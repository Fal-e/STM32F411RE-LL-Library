/*
 * GPIO_Driver.c
 *
 *  Created on: 7Dec.,2018
 *      Author: Falcon
 */

#include "GPIO_Driver.h"
#include <stdint.h>

uint32_t PINPOS[16] = { //Needed for registers that have 2 bits for 1 I/O pin
		(0x00), //pin 0 starts at 0
		(0x02), //pin 1 starts at 2
		(0x04),
		(0x06),
		(0x08),
		(0x0A),
		(0x0C),
		(0x0E), //pin 7
		(0x10), //pin 8
		(0x12), //pin 9
		(0x14),
		(0x16),
		(0x18),
		(0x1A),
		(0x1C),
		(0x1E), //Pin 15 starts at 30 which is 1E in HEX
};


uint32_t alt_PINPOS[16] = {
		(0x00), //pin 0
		(0x04), //1
		(0x08), //2
		(0x0C), //3
		(0x10), //4
		(0x14), //5
		(0x18), //6
		(0x1C), //7

};

 static void config_pin(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed, uint32_t mode, uint16_t mode_type, uint32_t alt_func)
{
	if(mode == OUTPUT_MODE)
	{
		port->MODER |= (1<<PINPOS[pinNumber]);
		port->MODER &= ~(1<<PINPOS[pinNumber+1]);


			if(mode_type == OUTPUT_PUP)
			{
				port->OTYPER &= ~(1<<pinNumber);
			}

			if(mode_type == OUTPUT_OD)
			{
				port->OTYPER |= (1<<pinNumber);
			}


			switch(pinSpeed)
			{
			//Output speed
			case (SPEED_LOW):
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]); // Putting a 00
			break;

			case (SPEED_MEDIUM): //Putting a 01
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber+1]);
			break;

			case (SPEED_HIGH): //Putting a 10
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]);
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
			break;

			case (SPEED_V_HIGH): //Putting a 11
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
			break;

			}

		}

	else
	{
		switch(mode)
					{

					case (INPUT_MODE): //00
					port->MODER &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]);
					break;

					case (ALT_MODE): //10
					port->MODER &= ~(1<<PINPOS[pinNumber]);
					port->MODER |= (1<<PINPOS[pinNumber]+1);
					break;

					case (ANALOG_MODE): //11
					port->MODER |= (1<<PINPOS[pinNumber]);
					port->MODER |= (1<<(PINPOS[pinNumber]+1));
					break;

					}

	}

	if (mode == ALT_MODE)
	{
		if (pinNumber <=7) //Low Register, AFRL
		{
			switch(alt_func)
								{

								case (AF0):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
								break;

								case (AF1):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position

								break;

								case (AF2):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
								break;

								case (AF3):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
								break;

								case (AF4):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
								port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
								port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
								break;

								case (AF5):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+1); // 0 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+3); //0 in 4th position
								break;

								case (AF6):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+3); //0 in 4th position
								break;

								case (AF7):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+3); //0 in 4th position
								break;

								case (AF8):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+1); // 0 in 2nd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+2); // 0 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF9):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+1); // 0 in 2nd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+2); // 0 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF10):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+2); // 0 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF11):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+2); // 0 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF12):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+1); // 0 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF13):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]+1); // 0 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF14):
								port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								case (AF15):
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+1); //1 in 2nd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+2); //1 in 3rd position
								port->AFR[0] |= (1<<alt_PINPOS[pinNumber]+3); //1 in 4th position
								break;

								}



		}

		else // High Register, AFRH
		{
			switch(alt_func)
											{

											case (AF0):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF1):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position

											break;

											case (AF2):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF3):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); 	//1 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF4):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF5):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF6):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF7):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+3]); //0 in 4th position
											break;

											case (AF8):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF9):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF10):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF11):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+2]); // 0 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF12):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF13):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber+1]); // 0 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;

											case (AF14):
											port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;


											case (AF15):
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+1]); //1 in 2nd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+2]); //1 in 3rd position
											port->AFR[1] |= (1<<alt_PINPOS[pinNumber+3]); //1 in 4th position
											break;
											}
		}


	}
}


void gpio_init(GPIO_TYPE gpio_type)
{
	if(gpio_type.port==PORTA)
		GPIO_CLOCK_ENABLE_PORTA;
	if(gpio_type.port==PORTB)
			GPIO_CLOCK_ENABLE_PORTB;
	if(gpio_type.port==PORTC)
			GPIO_CLOCK_ENABLE_PORTC;
	if(gpio_type.port==PORTD)
			GPIO_CLOCK_ENABLE_PORTD;

	config_pin(gpio_type.port,gpio_type.pin,gpio_type.speed,gpio_type.mode, gpio_type.mode_type,gpio_type.alt_func);

}

void gpio_write(GPIO_TypeDef *port, uint32_t pinNumber, uint8_t state)
{
	if(state==1)
	{
		port->BSRR=(1<<pinNumber);
	}
	else
	{
		port->BSRR = (1<<(pinNumber+16));
	}
}


//Write how to use each function. eg. gpio_write(PORTC,5,1). or gpio_write(PORTC,5,HIGH) etc


