/*
 * ss_delay.c
 *
 *  Created on: 4May,2019
 *      Author: Falcon
 */

#include <stdint.h>
#include "ss_delay.h"
#include "stm32f10x.h"
#include "stm32f10x_rcc.h"



void st_config_clock_72MHz(void)
{
	RCC_HSEConfig(RCC_HSE_ON);
	RCC_WaitForHSEStartUp();
	RCC_PLLConfig(RCC_PLLSource_HSE_Div2);
	RCC_PLLCmd(~CR_PLLON_BB);
	RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
	RCC_PLLCmd(CR_PLLON_BB);
	uint8_t test = tRCC_GetSYSCLKSource();



}




void config_clock_72MHz(void)

{
	// Set PLL multiplication factor to 9.
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PLLMULL) | RCC_CFGR_PLLMULL9;


	FLASH->ACR |= FLASH_ACR_PRFTBE; // Prefetch Buffer enable
	FLASH->ACR |= FLASH_ACR_LATENCY_2; // Two wait states since 48 MHz < SYSCLK <= 72 MHz
	while(!(FLASH->ACR & FLASH_ACR_PRFTBS)); // Wait until prefetch buffer enabled (Reading ACR register)

	// Select HSE as PLL source
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PLLSRC) | RCC_CFGR_PLLSRC_HSE;

	// External Freq undivided
	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_PLLXTPRE) | RCC_CFGR_PLLXTPRE_HSE;



	RCC->CR |= RCC_CR_HSEON;
	while(!(RCC_CR_HSERDY));

	//RCC->CFGR &= ~(1<<1);
	//RCC->CFGR |= RCC_CFGR_SW_HSE;
	//while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSE)


	//RCC->CFGR |= RCC_CFGR_SW_PLL; // Select PLL as SYSCLK
	//while(!(RCC->CFGR & RCC_CFGR_SWS_PLL)); // Wait for PLL to be ready






	// Enable PLL oscillator
	RCC->CR &= ~RCC_CR_PLLON;
	RCC->CR |= RCC_CR_PLLON;
	while(!(RCC->CR & RCC_CR_PLLRDY));


	RCC->CFGR = (RCC->CFGR & ~RCC_CFGR_SW) | RCC_CFGR_SW_PLL;

	//RCC->CFGR |= RCC_CFGR_PLLSRC_HSE;
	//RCC->CR &= ~RCC_CR_HSION;
	//RCC->CFGR |= RCC_CFGR_PLLMULL9; // x9 baybayyyy
	//RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
	//RCC->CR |= RCC_CR_PLLON;




	/* Select PLL as system Clock */
	//RCC->CFGR &= ~RCC_CFGR_SW;            /* Clear */
	//RCC->CFGR |=  RCC_CFGR_SW_PLL;    /* Set   */

	/* Wait for PLL to become system core clock */
	//while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);

}



void RCC_Configuration(void)
{
GPIO_InitTypeDef GPIO_InitStructure;

/* TIM2 clock enable */
 RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
/* SYSCLK, HCLK, PCLK2 and PCLK1 configuration -----------------------------*/
/* RCC system reset(for debug purpose) */
RCC_DeInit();

 /* Enable HSE */
 RCC_HSEConfig(RCC_HSE_ON);
 /* Wait till HSE is ready */
bool  HSEStartUpStatus = RCC_WaitForHSEStartUp();
 if(HSEStartUpStatus == SUCCESS)
 {
 /* HCLK = SYSCLK */
 RCC_HCLKConfig(RCC_SYSCLK_Div1);

 /* PCLK2 = HCLK */
 RCC_PCLK2Config(RCC_HCLK_Div1);
 /* PCLK1 = HCLK/2 */
 RCC_PCLK1Config(RCC_HCLK_Div2);

 /* ADCCLK = PCLK2/4 */
 RCC_ADCCLKConfig(RCC_PCLK2_Div4);
 /* Flash 2 wait state */
 FLASH_SetLatency(FLASH_Latency_2);

 /* Enable Prefetch Buffer */
 FLASH_PrefetchBufferCmd(FLASH_PrefetchBuffer_Enable);

 /* PLLCLK = 8MHz * 9 = 72 MHz */
 RCC_PLLConfig(RCC_PLLSource_HSE_Div1, RCC_PLLMul_9);
 /* Enable PLL */
 RCC_PLLCmd(ENABLE);
 /* Wait till PLL is ready */
 while(RCC_GetFlagStatus(RCC_FLAG_PLLRDY) == RESET)
 {
 }
 /* Select PLL as system clock source */
 RCC_SYSCLKConfig(RCC_SYSCLKSource_PLLCLK);
 /* Wait till PLL is used as system clock source */
 while(RCC_GetSYSCLKSource() != 0x08)
 {
 }
 }

/* Enable peripheral clocks --------------------------------------------------*/
/* Enable ADC1, GPIOA, GPIOB and GPIOC clock */
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB |
 RCC_APB2Periph_GPIOC, ENABLE);
}
