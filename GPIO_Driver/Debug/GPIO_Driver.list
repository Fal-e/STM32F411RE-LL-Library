
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001708  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080018a0  080018a0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080018a0  080018a0  000118a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080018a4  080018a4  000118a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080018a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000080  08001928  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000a0  08001928  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002904  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000007fc  00000000  00000000  000229b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000168  00000000  00000000  000231b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00023318  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00000de4  00000000  00000000  00023428  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000e97  00000000  00000000  0002420c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000250a3  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000444  00000000  00000000  00025120  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00025564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001888 	.word	0x08001888

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08001888 	.word	0x08001888

080001d8 <main>:
*/



int main(void)
{
 80001d8:	b590      	push	{r4, r7, lr}
 80001da:	b08f      	sub	sp, #60	; 0x3c
 80001dc:	af06      	add	r7, sp, #24
lcd_goto_xy(4,2);
lcd_print("Shahini");
//delay_mS(2000);
*/

config_clock_50MHz();
 80001de:	f001 fa4d 	bl	800167c <config_clock_50MHz>


GPIO_TYPE myGPIO;
myGPIO.port = PORTA;
 80001e2:	4b1f      	ldr	r3, [pc, #124]	; (8000260 <main+0x88>)
 80001e4:	603b      	str	r3, [r7, #0]
myGPIO.mode = OUTPUT_MODE;
 80001e6:	2301      	movs	r3, #1
 80001e8:	60bb      	str	r3, [r7, #8]
myGPIO.mode_type = OUTPUT_PUP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	60fb      	str	r3, [r7, #12]
gpio_port_config(myGPIO,(int []) {5},1);
 80001ee:	2305      	movs	r3, #5
 80001f0:	61fb      	str	r3, [r7, #28]
 80001f2:	2301      	movs	r3, #1
 80001f4:	9304      	str	r3, [sp, #16]
 80001f6:	f107 031c 	add.w	r3, r7, #28
 80001fa:	9303      	str	r3, [sp, #12]
 80001fc:	466c      	mov	r4, sp
 80001fe:	f107 0310 	add.w	r3, r7, #16
 8000202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800020a:	463b      	mov	r3, r7
 800020c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800020e:	f001 f8d1 	bl	80013b4 <gpio_port_config>


I2C_enable();
 8000212:	f001 f947 	bl	80014a4 <I2C_enable>





I2C_start();
 8000216:	f001 fa01 	bl	800161c <I2C_start>
I2C_addressWrite(0x27);
 800021a:	2027      	movs	r0, #39	; 0x27
 800021c:	f001 f9b0 	bl	8001580 <I2C_addressWrite>
I2C_data(0x38);
 8000220:	2038      	movs	r0, #56	; 0x38
 8000222:	f001 f9cd 	bl	80015c0 <I2C_data>
I2C_data(0x32);
 8000226:	2032      	movs	r0, #50	; 0x32
 8000228:	f001 f9ca 	bl	80015c0 <I2C_data>
I2C_stop();
 800022c:	f001 f9e0 	bl	80015f0 <I2C_stop>

delay_mS(10);
 8000230:	200a      	movs	r0, #10
 8000232:	f001 fae1 	bl	80017f8 <delay_mS>


I2C_start();
 8000236:	f001 f9f1 	bl	800161c <I2C_start>
I2C_addressWrite(0x27);
 800023a:	2027      	movs	r0, #39	; 0x27
 800023c:	f001 f9a0 	bl	8001580 <I2C_addressWrite>
I2C_data(0x32);
 8000240:	2032      	movs	r0, #50	; 0x32
 8000242:	f001 f9bd 	bl	80015c0 <I2C_data>
I2C_data(0x37);
 8000246:	2037      	movs	r0, #55	; 0x37
 8000248:	f001 f9ba 	bl	80015c0 <I2C_data>
I2C_stop();
 800024c:	f001 f9d0 	bl	80015f0 <I2C_stop>

delay_mS(10);
 8000250:	200a      	movs	r0, #10
 8000252:	f001 fad1 	bl	80017f8 <delay_mS>
 8000256:	2300      	movs	r3, #0
// This is because when a NACK is received (e.g. wrong address), TXE is not set, therefore remaining in the loop.
// Need to fix this by adding an interrupt, which STOPs or restarts communication.
// Otherwise, will be stuck in loop and no more communication can continue.

//
}
 8000258:	4618      	mov	r0, r3
 800025a:	3724      	adds	r7, #36	; 0x24
 800025c:	46bd      	mov	sp, r7
 800025e:	bd90      	pop	{r4, r7, pc}
 8000260:	40020000 	.word	0x40020000

08000264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800029c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000268:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800026a:	e003      	b.n	8000274 <LoopCopyDataInit>

0800026c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800026c:	4b0c      	ldr	r3, [pc, #48]	; (80002a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800026e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000270:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000272:	3104      	adds	r1, #4

08000274 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000274:	480b      	ldr	r0, [pc, #44]	; (80002a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000276:	4b0c      	ldr	r3, [pc, #48]	; (80002a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000278:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800027a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800027c:	d3f6      	bcc.n	800026c <CopyDataInit>
  ldr  r2, =_sbss
 800027e:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000280:	e002      	b.n	8000288 <LoopFillZerobss>

08000282 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000282:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000284:	f842 3b04 	str.w	r3, [r2], #4

08000288 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000288:	4b09      	ldr	r3, [pc, #36]	; (80002b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800028a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800028c:	d3f9      	bcc.n	8000282 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800028e:	f000 f813 	bl	80002b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000292:	f001 fad5 	bl	8001840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000296:	f7ff ff9f 	bl	80001d8 <main>
  bx  lr    
 800029a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800029c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002a0:	080018a8 	.word	0x080018a8
  ldr  r0, =_sdata
 80002a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002a8:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80002ac:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80002b0:	200000a0 	.word	0x200000a0

080002b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b4:	e7fe      	b.n	80002b4 <ADC_IRQHandler>
	...

080002b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002bc:	4a16      	ldr	r2, [pc, #88]	; (8000318 <SystemInit+0x60>)
 80002be:	4b16      	ldr	r3, [pc, #88]	; (8000318 <SystemInit+0x60>)
 80002c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002cc:	4a13      	ldr	r2, [pc, #76]	; (800031c <SystemInit+0x64>)
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <SystemInit+0x64>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f043 0301 	orr.w	r3, r3, #1
 80002d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002d8:	4b10      	ldr	r3, [pc, #64]	; (800031c <SystemInit+0x64>)
 80002da:	2200      	movs	r2, #0
 80002dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002de:	4a0f      	ldr	r2, [pc, #60]	; (800031c <SystemInit+0x64>)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <SystemInit+0x64>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <SystemInit+0x64>)
 80002f0:	4a0b      	ldr	r2, [pc, #44]	; (8000320 <SystemInit+0x68>)
 80002f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f4:	4a09      	ldr	r2, [pc, #36]	; (800031c <SystemInit+0x64>)
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SystemInit+0x64>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000300:	4b06      	ldr	r3, [pc, #24]	; (800031c <SystemInit+0x64>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <SystemInit+0x60>)
 8000308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800030c:	609a      	str	r2, [r3, #8]
#endif
}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	e000ed00 	.word	0xe000ed00
 800031c:	40023800 	.word	0x40023800
 8000320:	24003010 	.word	0x24003010

08000324 <config_pin>:
		(0x1C), //7

};

 static void config_pin(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed, uint32_t mode, uint16_t mode_type, uint32_t alt_func)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	60f8      	str	r0, [r7, #12]
 800032c:	60b9      	str	r1, [r7, #8]
 800032e:	607a      	str	r2, [r7, #4]
 8000330:	603b      	str	r3, [r7, #0]

	if(mode == OUTPUT_MODE)
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	2b01      	cmp	r3, #1
 8000336:	f040 80aa 	bne.w	800048e <config_pin+0x16a>
	{
		port->MODER |= (1<<PINPOS[pinNumber]);
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	49b1      	ldr	r1, [pc, #708]	; (8000604 <config_pin+0x2e0>)
 8000340:	68ba      	ldr	r2, [r7, #8]
 8000342:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	431a      	orrs	r2, r3
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	601a      	str	r2, [r3, #0]
		port->MODER &= ~(1<<PINPOS[pinNumber]+1);
 8000352:	68fb      	ldr	r3, [r7, #12]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	49ab      	ldr	r1, [pc, #684]	; (8000604 <config_pin+0x2e0>)
 8000358:	68ba      	ldr	r2, [r7, #8]
 800035a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800035e:	3201      	adds	r2, #1
 8000360:	2101      	movs	r1, #1
 8000362:	fa01 f202 	lsl.w	r2, r1, r2
 8000366:	43d2      	mvns	r2, r2
 8000368:	401a      	ands	r2, r3
 800036a:	68fb      	ldr	r3, [r7, #12]
 800036c:	601a      	str	r2, [r3, #0]


			if(mode_type == OUTPUT_PUP)
 800036e:	8b3b      	ldrh	r3, [r7, #24]
 8000370:	2b00      	cmp	r3, #0
 8000372:	d109      	bne.n	8000388 <config_pin+0x64>
			{
				port->OTYPER &= ~(1<<pinNumber);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	2101      	movs	r1, #1
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	401a      	ands	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	605a      	str	r2, [r3, #4]
			}

			if(mode_type == OUTPUT_OD)
 8000388:	8b3b      	ldrh	r3, [r7, #24]
 800038a:	2b01      	cmp	r3, #1
 800038c:	d108      	bne.n	80003a0 <config_pin+0x7c>
			{
				port->OTYPER |= (1<<pinNumber);
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	2101      	movs	r1, #1
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	fa01 f202 	lsl.w	r2, r1, r2
 800039a:	431a      	orrs	r2, r3
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	605a      	str	r2, [r3, #4]
			}


			switch(pinSpeed)
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b03      	cmp	r3, #3
 80003a4:	f200 80c5 	bhi.w	8000532 <config_pin+0x20e>
 80003a8:	a201      	add	r2, pc, #4	; (adr r2, 80003b0 <config_pin+0x8c>)
 80003aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ae:	bf00      	nop
 80003b0:	080003c1 	.word	0x080003c1
 80003b4:	080003ed 	.word	0x080003ed
 80003b8:	08000423 	.word	0x08000423
 80003bc:	08000459 	.word	0x08000459
			{
			//Output speed
			case (SPEED_LOW):
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]); // Putting a 00
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	498f      	ldr	r1, [pc, #572]	; (8000604 <config_pin+0x2e0>)
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003cc:	2101      	movs	r1, #1
 80003ce:	4091      	lsls	r1, r2
 80003d0:	68ba      	ldr	r2, [r7, #8]
 80003d2:	3201      	adds	r2, #1
 80003d4:	488b      	ldr	r0, [pc, #556]	; (8000604 <config_pin+0x2e0>)
 80003d6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80003da:	2001      	movs	r0, #1
 80003dc:	fa00 f202 	lsl.w	r2, r0, r2
 80003e0:	430a      	orrs	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	401a      	ands	r2, r3
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	609a      	str	r2, [r3, #8]
			break;
 80003ea:	e0a2      	b.n	8000532 <config_pin+0x20e>

			case (SPEED_MEDIUM): //Putting a 01
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	689b      	ldr	r3, [r3, #8]
 80003f0:	4984      	ldr	r1, [pc, #528]	; (8000604 <config_pin+0x2e0>)
 80003f2:	68ba      	ldr	r2, [r7, #8]
 80003f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003f8:	2101      	movs	r1, #1
 80003fa:	fa01 f202 	lsl.w	r2, r1, r2
 80003fe:	431a      	orrs	r2, r3
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	609a      	str	r2, [r3, #8]
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber+1]);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	68ba      	ldr	r2, [r7, #8]
 800040a:	3201      	adds	r2, #1
 800040c:	497d      	ldr	r1, [pc, #500]	; (8000604 <config_pin+0x2e0>)
 800040e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000412:	2101      	movs	r1, #1
 8000414:	fa01 f202 	lsl.w	r2, r1, r2
 8000418:	43d2      	mvns	r2, r2
 800041a:	401a      	ands	r2, r3
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	609a      	str	r2, [r3, #8]
			break;
 8000420:	e087      	b.n	8000532 <config_pin+0x20e>

			case (SPEED_HIGH): //Putting a 10
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]);
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	4977      	ldr	r1, [pc, #476]	; (8000604 <config_pin+0x2e0>)
 8000428:	68ba      	ldr	r2, [r7, #8]
 800042a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800042e:	2101      	movs	r1, #1
 8000430:	fa01 f202 	lsl.w	r2, r1, r2
 8000434:	43d2      	mvns	r2, r2
 8000436:	401a      	ands	r2, r3
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	609a      	str	r2, [r3, #8]
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	689b      	ldr	r3, [r3, #8]
 8000440:	68ba      	ldr	r2, [r7, #8]
 8000442:	3201      	adds	r2, #1
 8000444:	496f      	ldr	r1, [pc, #444]	; (8000604 <config_pin+0x2e0>)
 8000446:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800044a:	2101      	movs	r1, #1
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	431a      	orrs	r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	609a      	str	r2, [r3, #8]
			break;
 8000456:	e06c      	b.n	8000532 <config_pin+0x20e>

			case (SPEED_V_HIGH): //Putting a 11
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	689b      	ldr	r3, [r3, #8]
 800045c:	4969      	ldr	r1, [pc, #420]	; (8000604 <config_pin+0x2e0>)
 800045e:	68ba      	ldr	r2, [r7, #8]
 8000460:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	431a      	orrs	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	609a      	str	r2, [r3, #8]
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	689b      	ldr	r3, [r3, #8]
 8000474:	68ba      	ldr	r2, [r7, #8]
 8000476:	3201      	adds	r2, #1
 8000478:	4962      	ldr	r1, [pc, #392]	; (8000604 <config_pin+0x2e0>)
 800047a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800047e:	2101      	movs	r1, #1
 8000480:	fa01 f202 	lsl.w	r2, r1, r2
 8000484:	431a      	orrs	r2, r3
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	609a      	str	r2, [r3, #8]
			break;
 800048a:	bf00      	nop
 800048c:	e051      	b.n	8000532 <config_pin+0x20e>

		}

	else
	{
		switch(mode)
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	2b02      	cmp	r3, #2
 8000492:	d019      	beq.n	80004c8 <config_pin+0x1a4>
 8000494:	2b03      	cmp	r3, #3
 8000496:	d032      	beq.n	80004fe <config_pin+0x1da>
 8000498:	2b00      	cmp	r3, #0
 800049a:	d14a      	bne.n	8000532 <config_pin+0x20e>
					{

					case (INPUT_MODE): //00
					port->MODER &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	4958      	ldr	r1, [pc, #352]	; (8000604 <config_pin+0x2e0>)
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004a8:	2101      	movs	r1, #1
 80004aa:	4091      	lsls	r1, r2
 80004ac:	68ba      	ldr	r2, [r7, #8]
 80004ae:	3201      	adds	r2, #1
 80004b0:	4854      	ldr	r0, [pc, #336]	; (8000604 <config_pin+0x2e0>)
 80004b2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80004b6:	2001      	movs	r0, #1
 80004b8:	fa00 f202 	lsl.w	r2, r0, r2
 80004bc:	430a      	orrs	r2, r1
 80004be:	43d2      	mvns	r2, r2
 80004c0:	401a      	ands	r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	601a      	str	r2, [r3, #0]
					break;
 80004c6:	e034      	b.n	8000532 <config_pin+0x20e>

					case (ALT_MODE): //10
					port->MODER &= ~(1<<PINPOS[pinNumber]);
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	494d      	ldr	r1, [pc, #308]	; (8000604 <config_pin+0x2e0>)
 80004ce:	68ba      	ldr	r2, [r7, #8]
 80004d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004d4:	2101      	movs	r1, #1
 80004d6:	fa01 f202 	lsl.w	r2, r1, r2
 80004da:	43d2      	mvns	r2, r2
 80004dc:	401a      	ands	r2, r3
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	601a      	str	r2, [r3, #0]
					port->MODER |= (1<<(PINPOS[pinNumber]+1));
 80004e2:	68fb      	ldr	r3, [r7, #12]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	4947      	ldr	r1, [pc, #284]	; (8000604 <config_pin+0x2e0>)
 80004e8:	68ba      	ldr	r2, [r7, #8]
 80004ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004ee:	3201      	adds	r2, #1
 80004f0:	2101      	movs	r1, #1
 80004f2:	fa01 f202 	lsl.w	r2, r1, r2
 80004f6:	431a      	orrs	r2, r3
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	601a      	str	r2, [r3, #0]
					break;
 80004fc:	e019      	b.n	8000532 <config_pin+0x20e>

					case (ANALOG_MODE): //11
					port->MODER |= (1<<PINPOS[pinNumber]);
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4940      	ldr	r1, [pc, #256]	; (8000604 <config_pin+0x2e0>)
 8000504:	68ba      	ldr	r2, [r7, #8]
 8000506:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	431a      	orrs	r2, r3
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	601a      	str	r2, [r3, #0]
					port->MODER |= (1<<(PINPOS[pinNumber]+1));
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	493a      	ldr	r1, [pc, #232]	; (8000604 <config_pin+0x2e0>)
 800051c:	68ba      	ldr	r2, [r7, #8]
 800051e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000522:	3201      	adds	r2, #1
 8000524:	2101      	movs	r1, #1
 8000526:	fa01 f202 	lsl.w	r2, r1, r2
 800052a:	431a      	orrs	r2, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	601a      	str	r2, [r3, #0]
					break;
 8000530:	bf00      	nop

					}

	}

	if (mode == ALT_MODE)
 8000532:	683b      	ldr	r3, [r7, #0]
 8000534:	2b02      	cmp	r3, #2
 8000536:	f040 8734 	bne.w	80013a2 <config_pin+0x107e>
	{
		if (pinNumber <=7) //Low Register, AFRL
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	2b07      	cmp	r3, #7
 800053e:	f200 83a0 	bhi.w	8000c82 <config_pin+0x95e>
		{
			switch(alt_func)
 8000542:	69fb      	ldr	r3, [r7, #28]
 8000544:	2b0f      	cmp	r3, #15
 8000546:	f200 872c 	bhi.w	80013a2 <config_pin+0x107e>
 800054a:	a201      	add	r2, pc, #4	; (adr r2, 8000550 <config_pin+0x22c>)
 800054c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000550:	08000591 	.word	0x08000591
 8000554:	0800060d 	.word	0x0800060d
 8000558:	0800067d 	.word	0x0800067d
 800055c:	080006ed 	.word	0x080006ed
 8000560:	0800075b 	.word	0x0800075b
 8000564:	080007cb 	.word	0x080007cb
 8000568:	08000839 	.word	0x08000839
 800056c:	080008ad 	.word	0x080008ad
 8000570:	08000919 	.word	0x08000919
 8000574:	08000989 	.word	0x08000989
 8000578:	080009f7 	.word	0x080009f7
 800057c:	08000a65 	.word	0x08000a65
 8000580:	08000ad1 	.word	0x08000ad1
 8000584:	08000b45 	.word	0x08000b45
 8000588:	08000baf 	.word	0x08000baf
 800058c:	08000c19 	.word	0x08000c19
				{

				case (AF0):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	6a1b      	ldr	r3, [r3, #32]
 8000594:	491c      	ldr	r1, [pc, #112]	; (8000608 <config_pin+0x2e4>)
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800059c:	2101      	movs	r1, #1
 800059e:	fa01 f202 	lsl.w	r2, r1, r2
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	401a      	ands	r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6a1b      	ldr	r3, [r3, #32]
 80005ae:	4916      	ldr	r1, [pc, #88]	; (8000608 <config_pin+0x2e4>)
 80005b0:	68ba      	ldr	r2, [r7, #8]
 80005b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005b6:	3201      	adds	r2, #1
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	43d2      	mvns	r2, r2
 80005c0:	401a      	ands	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	6a1b      	ldr	r3, [r3, #32]
 80005ca:	490f      	ldr	r1, [pc, #60]	; (8000608 <config_pin+0x2e4>)
 80005cc:	68ba      	ldr	r2, [r7, #8]
 80005ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005d2:	3202      	adds	r2, #2
 80005d4:	2101      	movs	r1, #1
 80005d6:	fa01 f202 	lsl.w	r2, r1, r2
 80005da:	43d2      	mvns	r2, r2
 80005dc:	401a      	ands	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6a1b      	ldr	r3, [r3, #32]
 80005e6:	4908      	ldr	r1, [pc, #32]	; (8000608 <config_pin+0x2e4>)
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005ee:	3203      	adds	r2, #3
 80005f0:	2101      	movs	r1, #1
 80005f2:	fa01 f202 	lsl.w	r2, r1, r2
 80005f6:	43d2      	mvns	r2, r2
 80005f8:	401a      	ands	r2, r3
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	621a      	str	r2, [r3, #32]
				break;
 80005fe:	f000 bed0 	b.w	80013a2 <config_pin+0x107e>
 8000602:	bf00      	nop
 8000604:	20000000 	.word	0x20000000
 8000608:	20000040 	.word	0x20000040

				case (AF1):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	49a5      	ldr	r1, [pc, #660]	; (80008a8 <config_pin+0x584>)
 8000612:	68ba      	ldr	r2, [r7, #8]
 8000614:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000618:	2101      	movs	r1, #1
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	431a      	orrs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	499f      	ldr	r1, [pc, #636]	; (80008a8 <config_pin+0x584>)
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000630:	3201      	adds	r2, #1
 8000632:	2101      	movs	r1, #1
 8000634:	fa01 f202 	lsl.w	r2, r1, r2
 8000638:	43d2      	mvns	r2, r2
 800063a:	401a      	ands	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4998      	ldr	r1, [pc, #608]	; (80008a8 <config_pin+0x584>)
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800064c:	3202      	adds	r2, #2
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	43d2      	mvns	r2, r2
 8000656:	401a      	ands	r2, r3
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4991      	ldr	r1, [pc, #580]	; (80008a8 <config_pin+0x584>)
 8000662:	68ba      	ldr	r2, [r7, #8]
 8000664:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000668:	3203      	adds	r2, #3
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	401a      	ands	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	621a      	str	r2, [r3, #32]

				break;
 8000678:	f000 be93 	b.w	80013a2 <config_pin+0x107e>

				case (AF2):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	6a1b      	ldr	r3, [r3, #32]
 8000680:	4989      	ldr	r1, [pc, #548]	; (80008a8 <config_pin+0x584>)
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000688:	2101      	movs	r1, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	43d2      	mvns	r2, r2
 8000690:	401a      	ands	r2, r3
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	4983      	ldr	r1, [pc, #524]	; (80008a8 <config_pin+0x584>)
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006a2:	3201      	adds	r2, #1
 80006a4:	2101      	movs	r1, #1
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	6a1b      	ldr	r3, [r3, #32]
 80006b4:	497c      	ldr	r1, [pc, #496]	; (80008a8 <config_pin+0x584>)
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006bc:	3202      	adds	r2, #2
 80006be:	2101      	movs	r1, #1
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	401a      	ands	r2, r3
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	6a1b      	ldr	r3, [r3, #32]
 80006d0:	4975      	ldr	r1, [pc, #468]	; (80008a8 <config_pin+0x584>)
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006d8:	3203      	adds	r2, #3
 80006da:	2101      	movs	r1, #1
 80006dc:	fa01 f202 	lsl.w	r2, r1, r2
 80006e0:	43d2      	mvns	r2, r2
 80006e2:	401a      	ands	r2, r3
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	621a      	str	r2, [r3, #32]
				break;
 80006e8:	f000 be5b 	b.w	80013a2 <config_pin+0x107e>

				case (AF3):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	6a1b      	ldr	r3, [r3, #32]
 80006f0:	496d      	ldr	r1, [pc, #436]	; (80008a8 <config_pin+0x584>)
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006f8:	2101      	movs	r1, #1
 80006fa:	fa01 f202 	lsl.w	r2, r1, r2
 80006fe:	431a      	orrs	r2, r3
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	4967      	ldr	r1, [pc, #412]	; (80008a8 <config_pin+0x584>)
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000710:	3201      	adds	r2, #1
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	431a      	orrs	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	4961      	ldr	r1, [pc, #388]	; (80008a8 <config_pin+0x584>)
 8000724:	68ba      	ldr	r2, [r7, #8]
 8000726:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800072a:	3202      	adds	r2, #2
 800072c:	2101      	movs	r1, #1
 800072e:	fa01 f202 	lsl.w	r2, r1, r2
 8000732:	43d2      	mvns	r2, r2
 8000734:	401a      	ands	r2, r3
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	495a      	ldr	r1, [pc, #360]	; (80008a8 <config_pin+0x584>)
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000746:	3203      	adds	r2, #3
 8000748:	2101      	movs	r1, #1
 800074a:	fa01 f202 	lsl.w	r2, r1, r2
 800074e:	43d2      	mvns	r2, r2
 8000750:	401a      	ands	r2, r3
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	621a      	str	r2, [r3, #32]
				break;
 8000756:	f000 be24 	b.w	80013a2 <config_pin+0x107e>

				case (AF4):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6a1b      	ldr	r3, [r3, #32]
 800075e:	4952      	ldr	r1, [pc, #328]	; (80008a8 <config_pin+0x584>)
 8000760:	68ba      	ldr	r2, [r7, #8]
 8000762:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000766:	2101      	movs	r1, #1
 8000768:	fa01 f202 	lsl.w	r2, r1, r2
 800076c:	43d2      	mvns	r2, r2
 800076e:	401a      	ands	r2, r3
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	6a1b      	ldr	r3, [r3, #32]
 8000778:	494b      	ldr	r1, [pc, #300]	; (80008a8 <config_pin+0x584>)
 800077a:	68ba      	ldr	r2, [r7, #8]
 800077c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000780:	3201      	adds	r2, #1
 8000782:	2101      	movs	r1, #1
 8000784:	fa01 f202 	lsl.w	r2, r1, r2
 8000788:	43d2      	mvns	r2, r2
 800078a:	401a      	ands	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	6a1b      	ldr	r3, [r3, #32]
 8000794:	4944      	ldr	r1, [pc, #272]	; (80008a8 <config_pin+0x584>)
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800079c:	3202      	adds	r2, #2
 800079e:	2101      	movs	r1, #1
 80007a0:	fa01 f202 	lsl.w	r2, r1, r2
 80007a4:	431a      	orrs	r2, r3
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	493e      	ldr	r1, [pc, #248]	; (80008a8 <config_pin+0x584>)
 80007b0:	68ba      	ldr	r2, [r7, #8]
 80007b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007b6:	3203      	adds	r2, #3
 80007b8:	2101      	movs	r1, #1
 80007ba:	fa01 f202 	lsl.w	r2, r1, r2
 80007be:	43d2      	mvns	r2, r2
 80007c0:	401a      	ands	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	621a      	str	r2, [r3, #32]
				break;
 80007c6:	f000 bdec 	b.w	80013a2 <config_pin+0x107e>

				case (AF5):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	6a1b      	ldr	r3, [r3, #32]
 80007ce:	4936      	ldr	r1, [pc, #216]	; (80008a8 <config_pin+0x584>)
 80007d0:	68ba      	ldr	r2, [r7, #8]
 80007d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	431a      	orrs	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	6a1b      	ldr	r3, [r3, #32]
 80007e6:	4930      	ldr	r1, [pc, #192]	; (80008a8 <config_pin+0x584>)
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007ee:	3201      	adds	r2, #1
 80007f0:	2101      	movs	r1, #1
 80007f2:	fa01 f202 	lsl.w	r2, r1, r2
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	401a      	ands	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	4929      	ldr	r1, [pc, #164]	; (80008a8 <config_pin+0x584>)
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800080a:	3202      	adds	r2, #2
 800080c:	2101      	movs	r1, #1
 800080e:	fa01 f202 	lsl.w	r2, r1, r2
 8000812:	431a      	orrs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	6a1b      	ldr	r3, [r3, #32]
 800081c:	4922      	ldr	r1, [pc, #136]	; (80008a8 <config_pin+0x584>)
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000824:	3203      	adds	r2, #3
 8000826:	2101      	movs	r1, #1
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	43d2      	mvns	r2, r2
 800082e:	401a      	ands	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	621a      	str	r2, [r3, #32]
				break;
 8000834:	f000 bdb5 	b.w	80013a2 <config_pin+0x107e>

				case (AF6):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	6a1b      	ldr	r3, [r3, #32]
 800083c:	491a      	ldr	r1, [pc, #104]	; (80008a8 <config_pin+0x584>)
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000844:	2101      	movs	r1, #1
 8000846:	fa01 f202 	lsl.w	r2, r1, r2
 800084a:	43d2      	mvns	r2, r2
 800084c:	401a      	ands	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	6a1b      	ldr	r3, [r3, #32]
 8000856:	4914      	ldr	r1, [pc, #80]	; (80008a8 <config_pin+0x584>)
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800085e:	3201      	adds	r2, #1
 8000860:	2101      	movs	r1, #1
 8000862:	fa01 f202 	lsl.w	r2, r1, r2
 8000866:	431a      	orrs	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	490d      	ldr	r1, [pc, #52]	; (80008a8 <config_pin+0x584>)
 8000872:	68ba      	ldr	r2, [r7, #8]
 8000874:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000878:	3202      	adds	r2, #2
 800087a:	2101      	movs	r1, #1
 800087c:	fa01 f202 	lsl.w	r2, r1, r2
 8000880:	431a      	orrs	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4907      	ldr	r1, [pc, #28]	; (80008a8 <config_pin+0x584>)
 800088c:	68ba      	ldr	r2, [r7, #8]
 800088e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000892:	3203      	adds	r2, #3
 8000894:	2101      	movs	r1, #1
 8000896:	fa01 f202 	lsl.w	r2, r1, r2
 800089a:	43d2      	mvns	r2, r2
 800089c:	401a      	ands	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	621a      	str	r2, [r3, #32]
				break;
 80008a2:	f000 bd7e 	b.w	80013a2 <config_pin+0x107e>
 80008a6:	bf00      	nop
 80008a8:	20000040 	.word	0x20000040

				case (AF7):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	6a1b      	ldr	r3, [r3, #32]
 80008b0:	49a3      	ldr	r1, [pc, #652]	; (8000b40 <config_pin+0x81c>)
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008b8:	2101      	movs	r1, #1
 80008ba:	fa01 f202 	lsl.w	r2, r1, r2
 80008be:	431a      	orrs	r2, r3
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6a1b      	ldr	r3, [r3, #32]
 80008c8:	499d      	ldr	r1, [pc, #628]	; (8000b40 <config_pin+0x81c>)
 80008ca:	68ba      	ldr	r2, [r7, #8]
 80008cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008d0:	3201      	adds	r2, #1
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	431a      	orrs	r2, r3
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6a1b      	ldr	r3, [r3, #32]
 80008e2:	4997      	ldr	r1, [pc, #604]	; (8000b40 <config_pin+0x81c>)
 80008e4:	68ba      	ldr	r2, [r7, #8]
 80008e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008ea:	3202      	adds	r2, #2
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f202 	lsl.w	r2, r1, r2
 80008f2:	431a      	orrs	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	4990      	ldr	r1, [pc, #576]	; (8000b40 <config_pin+0x81c>)
 80008fe:	68ba      	ldr	r2, [r7, #8]
 8000900:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000904:	3203      	adds	r2, #3
 8000906:	2101      	movs	r1, #1
 8000908:	fa01 f202 	lsl.w	r2, r1, r2
 800090c:	43d2      	mvns	r2, r2
 800090e:	401a      	ands	r2, r3
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	621a      	str	r2, [r3, #32]
				break;
 8000914:	f000 bd45 	b.w	80013a2 <config_pin+0x107e>

				case (AF8):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	6a1b      	ldr	r3, [r3, #32]
 800091c:	4988      	ldr	r1, [pc, #544]	; (8000b40 <config_pin+0x81c>)
 800091e:	68ba      	ldr	r2, [r7, #8]
 8000920:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000924:	2101      	movs	r1, #1
 8000926:	fa01 f202 	lsl.w	r2, r1, r2
 800092a:	43d2      	mvns	r2, r2
 800092c:	401a      	ands	r2, r3
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	6a1b      	ldr	r3, [r3, #32]
 8000936:	4982      	ldr	r1, [pc, #520]	; (8000b40 <config_pin+0x81c>)
 8000938:	68ba      	ldr	r2, [r7, #8]
 800093a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800093e:	3201      	adds	r2, #1
 8000940:	2101      	movs	r1, #1
 8000942:	fa01 f202 	lsl.w	r2, r1, r2
 8000946:	43d2      	mvns	r2, r2
 8000948:	401a      	ands	r2, r3
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	6a1b      	ldr	r3, [r3, #32]
 8000952:	497b      	ldr	r1, [pc, #492]	; (8000b40 <config_pin+0x81c>)
 8000954:	68ba      	ldr	r2, [r7, #8]
 8000956:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800095a:	3202      	adds	r2, #2
 800095c:	2101      	movs	r1, #1
 800095e:	fa01 f202 	lsl.w	r2, r1, r2
 8000962:	43d2      	mvns	r2, r2
 8000964:	401a      	ands	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6a1b      	ldr	r3, [r3, #32]
 800096e:	4974      	ldr	r1, [pc, #464]	; (8000b40 <config_pin+0x81c>)
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000976:	3203      	adds	r2, #3
 8000978:	2101      	movs	r1, #1
 800097a:	fa01 f202 	lsl.w	r2, r1, r2
 800097e:	431a      	orrs	r2, r3
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	621a      	str	r2, [r3, #32]
				break;
 8000984:	f000 bd0d 	b.w	80013a2 <config_pin+0x107e>

				case (AF9):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	6a1b      	ldr	r3, [r3, #32]
 800098c:	496c      	ldr	r1, [pc, #432]	; (8000b40 <config_pin+0x81c>)
 800098e:	68ba      	ldr	r2, [r7, #8]
 8000990:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000994:	2101      	movs	r1, #1
 8000996:	fa01 f202 	lsl.w	r2, r1, r2
 800099a:	431a      	orrs	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	4966      	ldr	r1, [pc, #408]	; (8000b40 <config_pin+0x81c>)
 80009a6:	68ba      	ldr	r2, [r7, #8]
 80009a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ac:	3201      	adds	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	fa01 f202 	lsl.w	r2, r1, r2
 80009b4:	43d2      	mvns	r2, r2
 80009b6:	401a      	ands	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6a1b      	ldr	r3, [r3, #32]
 80009c0:	495f      	ldr	r1, [pc, #380]	; (8000b40 <config_pin+0x81c>)
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009c8:	3202      	adds	r2, #2
 80009ca:	2101      	movs	r1, #1
 80009cc:	fa01 f202 	lsl.w	r2, r1, r2
 80009d0:	43d2      	mvns	r2, r2
 80009d2:	401a      	ands	r2, r3
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	6a1b      	ldr	r3, [r3, #32]
 80009dc:	4958      	ldr	r1, [pc, #352]	; (8000b40 <config_pin+0x81c>)
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009e4:	3203      	adds	r2, #3
 80009e6:	2101      	movs	r1, #1
 80009e8:	fa01 f202 	lsl.w	r2, r1, r2
 80009ec:	431a      	orrs	r2, r3
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	621a      	str	r2, [r3, #32]
				break;
 80009f2:	f000 bcd6 	b.w	80013a2 <config_pin+0x107e>

				case (AF10):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6a1b      	ldr	r3, [r3, #32]
 80009fa:	4951      	ldr	r1, [pc, #324]	; (8000b40 <config_pin+0x81c>)
 80009fc:	68ba      	ldr	r2, [r7, #8]
 80009fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a02:	2101      	movs	r1, #1
 8000a04:	fa01 f202 	lsl.w	r2, r1, r2
 8000a08:	43d2      	mvns	r2, r2
 8000a0a:	401a      	ands	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	6a1b      	ldr	r3, [r3, #32]
 8000a14:	494a      	ldr	r1, [pc, #296]	; (8000b40 <config_pin+0x81c>)
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a1c:	3201      	adds	r2, #1
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	431a      	orrs	r2, r3
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4944      	ldr	r1, [pc, #272]	; (8000b40 <config_pin+0x81c>)
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a36:	3202      	adds	r2, #2
 8000a38:	2101      	movs	r1, #1
 8000a3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3e:	43d2      	mvns	r2, r2
 8000a40:	401a      	ands	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	6a1b      	ldr	r3, [r3, #32]
 8000a4a:	493d      	ldr	r1, [pc, #244]	; (8000b40 <config_pin+0x81c>)
 8000a4c:	68ba      	ldr	r2, [r7, #8]
 8000a4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a52:	3203      	adds	r2, #3
 8000a54:	2101      	movs	r1, #1
 8000a56:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	621a      	str	r2, [r3, #32]
				break;
 8000a60:	f000 bc9f 	b.w	80013a2 <config_pin+0x107e>

				case (AF11):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6a1b      	ldr	r3, [r3, #32]
 8000a68:	4935      	ldr	r1, [pc, #212]	; (8000b40 <config_pin+0x81c>)
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a70:	2101      	movs	r1, #1
 8000a72:	fa01 f202 	lsl.w	r2, r1, r2
 8000a76:	431a      	orrs	r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	6a1b      	ldr	r3, [r3, #32]
 8000a80:	492f      	ldr	r1, [pc, #188]	; (8000b40 <config_pin+0x81c>)
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a88:	3201      	adds	r2, #1
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a90:	431a      	orrs	r2, r3
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6a1b      	ldr	r3, [r3, #32]
 8000a9a:	4929      	ldr	r1, [pc, #164]	; (8000b40 <config_pin+0x81c>)
 8000a9c:	68ba      	ldr	r2, [r7, #8]
 8000a9e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000aa2:	3202      	adds	r2, #2
 8000aa4:	2101      	movs	r1, #1
 8000aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aaa:	43d2      	mvns	r2, r2
 8000aac:	401a      	ands	r2, r3
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	6a1b      	ldr	r3, [r3, #32]
 8000ab6:	4922      	ldr	r1, [pc, #136]	; (8000b40 <config_pin+0x81c>)
 8000ab8:	68ba      	ldr	r2, [r7, #8]
 8000aba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000abe:	3203      	adds	r2, #3
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	431a      	orrs	r2, r3
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	621a      	str	r2, [r3, #32]
				break;
 8000acc:	f000 bc69 	b.w	80013a2 <config_pin+0x107e>

				case (AF12):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a1b      	ldr	r3, [r3, #32]
 8000ad4:	491a      	ldr	r1, [pc, #104]	; (8000b40 <config_pin+0x81c>)
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000adc:	2101      	movs	r1, #1
 8000ade:	fa01 f202 	lsl.w	r2, r1, r2
 8000ae2:	43d2      	mvns	r2, r2
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	6a1b      	ldr	r3, [r3, #32]
 8000aee:	4914      	ldr	r1, [pc, #80]	; (8000b40 <config_pin+0x81c>)
 8000af0:	68ba      	ldr	r2, [r7, #8]
 8000af2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000af6:	3201      	adds	r2, #1
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	43d2      	mvns	r2, r2
 8000b00:	401a      	ands	r2, r3
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6a1b      	ldr	r3, [r3, #32]
 8000b0a:	490d      	ldr	r1, [pc, #52]	; (8000b40 <config_pin+0x81c>)
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b12:	3202      	adds	r2, #2
 8000b14:	2101      	movs	r1, #1
 8000b16:	fa01 f202 	lsl.w	r2, r1, r2
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4906      	ldr	r1, [pc, #24]	; (8000b40 <config_pin+0x81c>)
 8000b26:	68ba      	ldr	r2, [r7, #8]
 8000b28:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b2c:	3203      	adds	r2, #3
 8000b2e:	2101      	movs	r1, #1
 8000b30:	fa01 f202 	lsl.w	r2, r1, r2
 8000b34:	431a      	orrs	r2, r3
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	621a      	str	r2, [r3, #32]
				break;
 8000b3a:	f000 bc32 	b.w	80013a2 <config_pin+0x107e>
 8000b3e:	bf00      	nop
 8000b40:	20000040 	.word	0x20000040

				case (AF13):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	6a1b      	ldr	r3, [r3, #32]
 8000b48:	4999      	ldr	r1, [pc, #612]	; (8000db0 <config_pin+0xa8c>)
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b50:	2101      	movs	r1, #1
 8000b52:	fa01 f202 	lsl.w	r2, r1, r2
 8000b56:	431a      	orrs	r2, r3
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	6a1b      	ldr	r3, [r3, #32]
 8000b60:	4993      	ldr	r1, [pc, #588]	; (8000db0 <config_pin+0xa8c>)
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b68:	3201      	adds	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b70:	43d2      	mvns	r2, r2
 8000b72:	401a      	ands	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	6a1b      	ldr	r3, [r3, #32]
 8000b7c:	498c      	ldr	r1, [pc, #560]	; (8000db0 <config_pin+0xa8c>)
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b84:	3202      	adds	r2, #2
 8000b86:	2101      	movs	r1, #1
 8000b88:	fa01 f202 	lsl.w	r2, r1, r2
 8000b8c:	431a      	orrs	r2, r3
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	4986      	ldr	r1, [pc, #536]	; (8000db0 <config_pin+0xa8c>)
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b9e:	3203      	adds	r2, #3
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba6:	431a      	orrs	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	621a      	str	r2, [r3, #32]
				break;
 8000bac:	e3f9      	b.n	80013a2 <config_pin+0x107e>

				case (AF14):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6a1b      	ldr	r3, [r3, #32]
 8000bb2:	497f      	ldr	r1, [pc, #508]	; (8000db0 <config_pin+0xa8c>)
 8000bb4:	68ba      	ldr	r2, [r7, #8]
 8000bb6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bba:	2101      	movs	r1, #1
 8000bbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4978      	ldr	r1, [pc, #480]	; (8000db0 <config_pin+0xa8c>)
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bd4:	3201      	adds	r2, #1
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	431a      	orrs	r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	4972      	ldr	r1, [pc, #456]	; (8000db0 <config_pin+0xa8c>)
 8000be8:	68ba      	ldr	r2, [r7, #8]
 8000bea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bee:	3202      	adds	r2, #2
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf6:	431a      	orrs	r2, r3
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	496b      	ldr	r1, [pc, #428]	; (8000db0 <config_pin+0xa8c>)
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c08:	3203      	adds	r2, #3
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c10:	431a      	orrs	r2, r3
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	621a      	str	r2, [r3, #32]
				break;
 8000c16:	e3c4      	b.n	80013a2 <config_pin+0x107e>

				case (AF15):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4964      	ldr	r1, [pc, #400]	; (8000db0 <config_pin+0xa8c>)
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c24:	2101      	movs	r1, #1
 8000c26:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	6a1b      	ldr	r3, [r3, #32]
 8000c34:	495e      	ldr	r1, [pc, #376]	; (8000db0 <config_pin+0xa8c>)
 8000c36:	68ba      	ldr	r2, [r7, #8]
 8000c38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c3c:	3201      	adds	r2, #1
 8000c3e:	2101      	movs	r1, #1
 8000c40:	fa01 f202 	lsl.w	r2, r1, r2
 8000c44:	431a      	orrs	r2, r3
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	6a1b      	ldr	r3, [r3, #32]
 8000c4e:	4958      	ldr	r1, [pc, #352]	; (8000db0 <config_pin+0xa8c>)
 8000c50:	68ba      	ldr	r2, [r7, #8]
 8000c52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c56:	3202      	adds	r2, #2
 8000c58:	2101      	movs	r1, #1
 8000c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5e:	431a      	orrs	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	6a1b      	ldr	r3, [r3, #32]
 8000c68:	4951      	ldr	r1, [pc, #324]	; (8000db0 <config_pin+0xa8c>)
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c70:	3203      	adds	r2, #3
 8000c72:	2101      	movs	r1, #1
 8000c74:	fa01 f202 	lsl.w	r2, r1, r2
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	621a      	str	r2, [r3, #32]
				break;
 8000c7e:	bf00      	nop
 8000c80:	e38f      	b.n	80013a2 <config_pin+0x107e>

		}

		else // High Register, AFRH
		{
			switch(alt_func)
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	f200 838c 	bhi.w	80013a2 <config_pin+0x107e>
 8000c8a:	a201      	add	r2, pc, #4	; (adr r2, 8000c90 <config_pin+0x96c>)
 8000c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c90:	08000cd1 	.word	0x08000cd1
 8000c94:	08000d41 	.word	0x08000d41
 8000c98:	08000db5 	.word	0x08000db5
 8000c9c:	08000e23 	.word	0x08000e23
 8000ca0:	08000e8f 	.word	0x08000e8f
 8000ca4:	08000efd 	.word	0x08000efd
 8000ca8:	08000f69 	.word	0x08000f69
 8000cac:	08000fd5 	.word	0x08000fd5
 8000cb0:	08001045 	.word	0x08001045
 8000cb4:	080010b3 	.word	0x080010b3
 8000cb8:	0800111f 	.word	0x0800111f
 8000cbc:	0800118b 	.word	0x0800118b
 8000cc0:	080011f5 	.word	0x080011f5
 8000cc4:	08001261 	.word	0x08001261
 8000cc8:	080012d1 	.word	0x080012d1
 8000ccc:	0800133b 	.word	0x0800133b
				{

				case (AF0):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd4:	4936      	ldr	r1, [pc, #216]	; (8000db0 <config_pin+0xa8c>)
 8000cd6:	68ba      	ldr	r2, [r7, #8]
 8000cd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fa01 f202 	lsl.w	r2, r1, r2
 8000ce2:	43d2      	mvns	r2, r2
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cee:	4930      	ldr	r1, [pc, #192]	; (8000db0 <config_pin+0xa8c>)
 8000cf0:	68ba      	ldr	r2, [r7, #8]
 8000cf2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cf6:	3201      	adds	r2, #1
 8000cf8:	2101      	movs	r1, #1
 8000cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfe:	43d2      	mvns	r2, r2
 8000d00:	401a      	ands	r2, r3
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d0a:	4929      	ldr	r1, [pc, #164]	; (8000db0 <config_pin+0xa8c>)
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d12:	3202      	adds	r2, #2
 8000d14:	2101      	movs	r1, #1
 8000d16:	fa01 f202 	lsl.w	r2, r1, r2
 8000d1a:	43d2      	mvns	r2, r2
 8000d1c:	401a      	ands	r2, r3
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d26:	4922      	ldr	r1, [pc, #136]	; (8000db0 <config_pin+0xa8c>)
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d2e:	3203      	adds	r2, #3
 8000d30:	2101      	movs	r1, #1
 8000d32:	fa01 f202 	lsl.w	r2, r1, r2
 8000d36:	43d2      	mvns	r2, r2
 8000d38:	401a      	ands	r2, r3
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000d3e:	e330      	b.n	80013a2 <config_pin+0x107e>

				case (AF1):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d44:	491a      	ldr	r1, [pc, #104]	; (8000db0 <config_pin+0xa8c>)
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d5c:	4914      	ldr	r1, [pc, #80]	; (8000db0 <config_pin+0xa8c>)
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d64:	3201      	adds	r2, #1
 8000d66:	2101      	movs	r1, #1
 8000d68:	fa01 f202 	lsl.w	r2, r1, r2
 8000d6c:	43d2      	mvns	r2, r2
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d78:	490d      	ldr	r1, [pc, #52]	; (8000db0 <config_pin+0xa8c>)
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d80:	3202      	adds	r2, #2
 8000d82:	2101      	movs	r1, #1
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	4906      	ldr	r1, [pc, #24]	; (8000db0 <config_pin+0xa8c>)
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d9c:	3203      	adds	r2, #3
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	43d2      	mvns	r2, r2
 8000da6:	401a      	ands	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8000dac:	e2f9      	b.n	80013a2 <config_pin+0x107e>
 8000dae:	bf00      	nop
 8000db0:	20000040 	.word	0x20000040

				case (AF2):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	49a1      	ldr	r1, [pc, #644]	; (8001040 <config_pin+0xd1c>)
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	43d2      	mvns	r2, r2
 8000dc8:	401a      	ands	r2, r3
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd2:	499b      	ldr	r1, [pc, #620]	; (8001040 <config_pin+0xd1c>)
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dda:	3201      	adds	r2, #1
 8000ddc:	2101      	movs	r1, #1
 8000dde:	fa01 f202 	lsl.w	r2, r1, r2
 8000de2:	431a      	orrs	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dec:	4994      	ldr	r1, [pc, #592]	; (8001040 <config_pin+0xd1c>)
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000df4:	3202      	adds	r2, #2
 8000df6:	2101      	movs	r1, #1
 8000df8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfc:	43d2      	mvns	r2, r2
 8000dfe:	401a      	ands	r2, r3
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	498d      	ldr	r1, [pc, #564]	; (8001040 <config_pin+0xd1c>)
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e10:	3203      	adds	r2, #3
 8000e12:	2101      	movs	r1, #1
 8000e14:	fa01 f202 	lsl.w	r2, r1, r2
 8000e18:	43d2      	mvns	r2, r2
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000e20:	e2bf      	b.n	80013a2 <config_pin+0x107e>

				case (AF3):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e26:	4986      	ldr	r1, [pc, #536]	; (8001040 <config_pin+0xd1c>)
 8000e28:	68ba      	ldr	r2, [r7, #8]
 8000e2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fa01 f202 	lsl.w	r2, r1, r2
 8000e34:	431a      	orrs	r2, r3
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	4980      	ldr	r1, [pc, #512]	; (8001040 <config_pin+0xd1c>)
 8000e40:	68ba      	ldr	r2, [r7, #8]
 8000e42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e46:	3201      	adds	r2, #1
 8000e48:	2101      	movs	r1, #1
 8000e4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4e:	431a      	orrs	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e58:	4979      	ldr	r1, [pc, #484]	; (8001040 <config_pin+0xd1c>)
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e60:	3202      	adds	r2, #2
 8000e62:	2101      	movs	r1, #1
 8000e64:	fa01 f202 	lsl.w	r2, r1, r2
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e74:	4972      	ldr	r1, [pc, #456]	; (8001040 <config_pin+0xd1c>)
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e7c:	3203      	adds	r2, #3
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fa01 f202 	lsl.w	r2, r1, r2
 8000e84:	43d2      	mvns	r2, r2
 8000e86:	401a      	ands	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000e8c:	e289      	b.n	80013a2 <config_pin+0x107e>

				case (AF4):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e92:	496b      	ldr	r1, [pc, #428]	; (8001040 <config_pin+0xd1c>)
 8000e94:	68ba      	ldr	r2, [r7, #8]
 8000e96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eac:	4964      	ldr	r1, [pc, #400]	; (8001040 <config_pin+0xd1c>)
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ebc:	43d2      	mvns	r2, r2
 8000ebe:	401a      	ands	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec8:	495d      	ldr	r1, [pc, #372]	; (8001040 <config_pin+0xd1c>)
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ed0:	3202      	adds	r2, #2
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed8:	431a      	orrs	r2, r3
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	4957      	ldr	r1, [pc, #348]	; (8001040 <config_pin+0xd1c>)
 8000ee4:	68ba      	ldr	r2, [r7, #8]
 8000ee6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000eea:	3203      	adds	r2, #3
 8000eec:	2101      	movs	r1, #1
 8000eee:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef2:	43d2      	mvns	r2, r2
 8000ef4:	401a      	ands	r2, r3
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000efa:	e252      	b.n	80013a2 <config_pin+0x107e>

				case (AF5):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f00:	494f      	ldr	r1, [pc, #316]	; (8001040 <config_pin+0xd1c>)
 8000f02:	68ba      	ldr	r2, [r7, #8]
 8000f04:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f08:	2101      	movs	r1, #1
 8000f0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0e:	431a      	orrs	r2, r3
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f18:	4949      	ldr	r1, [pc, #292]	; (8001040 <config_pin+0xd1c>)
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f20:	3201      	adds	r2, #1
 8000f22:	2101      	movs	r1, #1
 8000f24:	fa01 f202 	lsl.w	r2, r1, r2
 8000f28:	43d2      	mvns	r2, r2
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f34:	4942      	ldr	r1, [pc, #264]	; (8001040 <config_pin+0xd1c>)
 8000f36:	68ba      	ldr	r2, [r7, #8]
 8000f38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f3c:	3202      	adds	r2, #2
 8000f3e:	2101      	movs	r1, #1
 8000f40:	fa01 f202 	lsl.w	r2, r1, r2
 8000f44:	431a      	orrs	r2, r3
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4e:	493c      	ldr	r1, [pc, #240]	; (8001040 <config_pin+0xd1c>)
 8000f50:	68ba      	ldr	r2, [r7, #8]
 8000f52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f56:	3203      	adds	r2, #3
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5e:	43d2      	mvns	r2, r2
 8000f60:	401a      	ands	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000f66:	e21c      	b.n	80013a2 <config_pin+0x107e>

				case (AF6):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f6c:	4934      	ldr	r1, [pc, #208]	; (8001040 <config_pin+0xd1c>)
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	43d2      	mvns	r2, r2
 8000f7c:	401a      	ands	r2, r3
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	492e      	ldr	r1, [pc, #184]	; (8001040 <config_pin+0xd1c>)
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f8e:	3201      	adds	r2, #1
 8000f90:	2101      	movs	r1, #1
 8000f92:	fa01 f202 	lsl.w	r2, r1, r2
 8000f96:	431a      	orrs	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa0:	4927      	ldr	r1, [pc, #156]	; (8001040 <config_pin+0xd1c>)
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fa8:	3202      	adds	r2, #2
 8000faa:	2101      	movs	r1, #1
 8000fac:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fba:	4921      	ldr	r1, [pc, #132]	; (8001040 <config_pin+0xd1c>)
 8000fbc:	68ba      	ldr	r2, [r7, #8]
 8000fbe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fc2:	3203      	adds	r2, #3
 8000fc4:	2101      	movs	r1, #1
 8000fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fca:	43d2      	mvns	r2, r2
 8000fcc:	401a      	ands	r2, r3
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000fd2:	e1e6      	b.n	80013a2 <config_pin+0x107e>

				case (AF7):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd8:	4919      	ldr	r1, [pc, #100]	; (8001040 <config_pin+0xd1c>)
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff0:	4913      	ldr	r1, [pc, #76]	; (8001040 <config_pin+0xd1c>)
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ff8:	3201      	adds	r2, #1
 8000ffa:	2101      	movs	r1, #1
 8000ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8001000:	431a      	orrs	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <config_pin+0xd1c>)
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001012:	3202      	adds	r2, #2
 8001014:	2101      	movs	r1, #1
 8001016:	fa01 f202 	lsl.w	r2, r1, r2
 800101a:	431a      	orrs	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	4906      	ldr	r1, [pc, #24]	; (8001040 <config_pin+0xd1c>)
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800102c:	3203      	adds	r2, #3
 800102e:	2101      	movs	r1, #1
 8001030:	fa01 f202 	lsl.w	r2, r1, r2
 8001034:	43d2      	mvns	r2, r2
 8001036:	401a      	ands	r2, r3
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800103c:	e1b1      	b.n	80013a2 <config_pin+0x107e>
 800103e:	bf00      	nop
 8001040:	20000040 	.word	0x20000040

				case (AF8):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	49a0      	ldr	r1, [pc, #640]	; (80012cc <config_pin+0xfa8>)
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001050:	2101      	movs	r1, #1
 8001052:	fa01 f202 	lsl.w	r2, r1, r2
 8001056:	43d2      	mvns	r2, r2
 8001058:	401a      	ands	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	499a      	ldr	r1, [pc, #616]	; (80012cc <config_pin+0xfa8>)
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800106a:	3201      	adds	r2, #1
 800106c:	2101      	movs	r1, #1
 800106e:	fa01 f202 	lsl.w	r2, r1, r2
 8001072:	43d2      	mvns	r2, r2
 8001074:	401a      	ands	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	4993      	ldr	r1, [pc, #588]	; (80012cc <config_pin+0xfa8>)
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001086:	3202      	adds	r2, #2
 8001088:	2101      	movs	r1, #1
 800108a:	fa01 f202 	lsl.w	r2, r1, r2
 800108e:	43d2      	mvns	r2, r2
 8001090:	401a      	ands	r2, r3
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109a:	498c      	ldr	r1, [pc, #560]	; (80012cc <config_pin+0xfa8>)
 800109c:	68ba      	ldr	r2, [r7, #8]
 800109e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010a2:	3203      	adds	r2, #3
 80010a4:	2101      	movs	r1, #1
 80010a6:	fa01 f202 	lsl.w	r2, r1, r2
 80010aa:	431a      	orrs	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80010b0:	e177      	b.n	80013a2 <config_pin+0x107e>

				case (AF9):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	4985      	ldr	r1, [pc, #532]	; (80012cc <config_pin+0xfa8>)
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010be:	2101      	movs	r1, #1
 80010c0:	fa01 f202 	lsl.w	r2, r1, r2
 80010c4:	431a      	orrs	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ce:	497f      	ldr	r1, [pc, #508]	; (80012cc <config_pin+0xfa8>)
 80010d0:	68ba      	ldr	r2, [r7, #8]
 80010d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010d6:	3201      	adds	r2, #1
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	43d2      	mvns	r2, r2
 80010e0:	401a      	ands	r2, r3
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ea:	4978      	ldr	r1, [pc, #480]	; (80012cc <config_pin+0xfa8>)
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010f2:	3202      	adds	r2, #2
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	43d2      	mvns	r2, r2
 80010fc:	401a      	ands	r2, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	4971      	ldr	r1, [pc, #452]	; (80012cc <config_pin+0xfa8>)
 8001108:	68ba      	ldr	r2, [r7, #8]
 800110a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800110e:	3203      	adds	r2, #3
 8001110:	2101      	movs	r1, #1
 8001112:	fa01 f202 	lsl.w	r2, r1, r2
 8001116:	431a      	orrs	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800111c:	e141      	b.n	80013a2 <config_pin+0x107e>

				case (AF10):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001122:	496a      	ldr	r1, [pc, #424]	; (80012cc <config_pin+0xfa8>)
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800112a:	2101      	movs	r1, #1
 800112c:	fa01 f202 	lsl.w	r2, r1, r2
 8001130:	43d2      	mvns	r2, r2
 8001132:	401a      	ands	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	4963      	ldr	r1, [pc, #396]	; (80012cc <config_pin+0xfa8>)
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001144:	3201      	adds	r2, #1
 8001146:	2101      	movs	r1, #1
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
 800114c:	431a      	orrs	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001156:	495d      	ldr	r1, [pc, #372]	; (80012cc <config_pin+0xfa8>)
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800115e:	3202      	adds	r2, #2
 8001160:	2101      	movs	r1, #1
 8001162:	fa01 f202 	lsl.w	r2, r1, r2
 8001166:	43d2      	mvns	r2, r2
 8001168:	401a      	ands	r2, r3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4956      	ldr	r1, [pc, #344]	; (80012cc <config_pin+0xfa8>)
 8001174:	68ba      	ldr	r2, [r7, #8]
 8001176:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800117a:	3203      	adds	r2, #3
 800117c:	2101      	movs	r1, #1
 800117e:	fa01 f202 	lsl.w	r2, r1, r2
 8001182:	431a      	orrs	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001188:	e10b      	b.n	80013a2 <config_pin+0x107e>

				case (AF11):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	494f      	ldr	r1, [pc, #316]	; (80012cc <config_pin+0xfa8>)
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001196:	2101      	movs	r1, #1
 8001198:	fa01 f202 	lsl.w	r2, r1, r2
 800119c:	431a      	orrs	r2, r3
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	4949      	ldr	r1, [pc, #292]	; (80012cc <config_pin+0xfa8>)
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011ae:	3201      	adds	r2, #1
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	431a      	orrs	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	4942      	ldr	r1, [pc, #264]	; (80012cc <config_pin+0xfa8>)
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011c8:	3202      	adds	r2, #2
 80011ca:	2101      	movs	r1, #1
 80011cc:	fa01 f202 	lsl.w	r2, r1, r2
 80011d0:	43d2      	mvns	r2, r2
 80011d2:	401a      	ands	r2, r3
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	493b      	ldr	r1, [pc, #236]	; (80012cc <config_pin+0xfa8>)
 80011de:	68ba      	ldr	r2, [r7, #8]
 80011e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e4:	3203      	adds	r2, #3
 80011e6:	2101      	movs	r1, #1
 80011e8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ec:	431a      	orrs	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80011f2:	e0d6      	b.n	80013a2 <config_pin+0x107e>

				case (AF12):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f8:	4934      	ldr	r1, [pc, #208]	; (80012cc <config_pin+0xfa8>)
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	43d2      	mvns	r2, r2
 8001208:	401a      	ands	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001212:	492e      	ldr	r1, [pc, #184]	; (80012cc <config_pin+0xfa8>)
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800121a:	3201      	adds	r2, #1
 800121c:	2101      	movs	r1, #1
 800121e:	fa01 f202 	lsl.w	r2, r1, r2
 8001222:	43d2      	mvns	r2, r2
 8001224:	401a      	ands	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122e:	4927      	ldr	r1, [pc, #156]	; (80012cc <config_pin+0xfa8>)
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001236:	3202      	adds	r2, #2
 8001238:	2101      	movs	r1, #1
 800123a:	fa01 f202 	lsl.w	r2, r1, r2
 800123e:	431a      	orrs	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	4920      	ldr	r1, [pc, #128]	; (80012cc <config_pin+0xfa8>)
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001250:	3203      	adds	r2, #3
 8001252:	2101      	movs	r1, #1
 8001254:	fa01 f202 	lsl.w	r2, r1, r2
 8001258:	431a      	orrs	r2, r3
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800125e:	e0a0      	b.n	80013a2 <config_pin+0x107e>

				case (AF13):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	4919      	ldr	r1, [pc, #100]	; (80012cc <config_pin+0xfa8>)
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800126c:	2101      	movs	r1, #1
 800126e:	fa01 f202 	lsl.w	r2, r1, r2
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127c:	4913      	ldr	r1, [pc, #76]	; (80012cc <config_pin+0xfa8>)
 800127e:	68ba      	ldr	r2, [r7, #8]
 8001280:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001284:	3201      	adds	r2, #1
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	43d2      	mvns	r2, r2
 800128e:	401a      	ands	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001298:	490c      	ldr	r1, [pc, #48]	; (80012cc <config_pin+0xfa8>)
 800129a:	68ba      	ldr	r2, [r7, #8]
 800129c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012a0:	3202      	adds	r2, #2
 80012a2:	2101      	movs	r1, #1
 80012a4:	fa01 f202 	lsl.w	r2, r1, r2
 80012a8:	431a      	orrs	r2, r3
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b2:	4906      	ldr	r1, [pc, #24]	; (80012cc <config_pin+0xfa8>)
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012ba:	3203      	adds	r2, #3
 80012bc:	2101      	movs	r1, #1
 80012be:	fa01 f202 	lsl.w	r2, r1, r2
 80012c2:	431a      	orrs	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80012c8:	e06b      	b.n	80013a2 <config_pin+0x107e>
 80012ca:	bf00      	nop
 80012cc:	20000040 	.word	0x20000040

				case (AF14):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	4936      	ldr	r1, [pc, #216]	; (80013b0 <config_pin+0x108c>)
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012dc:	2101      	movs	r1, #1
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	43d2      	mvns	r2, r2
 80012e4:	401a      	ands	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	4930      	ldr	r1, [pc, #192]	; (80013b0 <config_pin+0x108c>)
 80012f0:	68ba      	ldr	r2, [r7, #8]
 80012f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f6:	3201      	adds	r2, #1
 80012f8:	2101      	movs	r1, #1
 80012fa:	fa01 f202 	lsl.w	r2, r1, r2
 80012fe:	431a      	orrs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001308:	4929      	ldr	r1, [pc, #164]	; (80013b0 <config_pin+0x108c>)
 800130a:	68ba      	ldr	r2, [r7, #8]
 800130c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001310:	3202      	adds	r2, #2
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	431a      	orrs	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001322:	4923      	ldr	r1, [pc, #140]	; (80013b0 <config_pin+0x108c>)
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800132a:	3203      	adds	r2, #3
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f202 	lsl.w	r2, r1, r2
 8001332:	431a      	orrs	r2, r3
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001338:	e033      	b.n	80013a2 <config_pin+0x107e>


				case (AF15):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	491c      	ldr	r1, [pc, #112]	; (80013b0 <config_pin+0x108c>)
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	431a      	orrs	r2, r3
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	4916      	ldr	r1, [pc, #88]	; (80013b0 <config_pin+0x108c>)
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800135e:	3201      	adds	r2, #1
 8001360:	2101      	movs	r1, #1
 8001362:	fa01 f202 	lsl.w	r2, r1, r2
 8001366:	431a      	orrs	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	490f      	ldr	r1, [pc, #60]	; (80013b0 <config_pin+0x108c>)
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001378:	3202      	adds	r2, #2
 800137a:	2101      	movs	r1, #1
 800137c:	fa01 f202 	lsl.w	r2, r1, r2
 8001380:	431a      	orrs	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138a:	4909      	ldr	r1, [pc, #36]	; (80013b0 <config_pin+0x108c>)
 800138c:	68ba      	ldr	r2, [r7, #8]
 800138e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001392:	3203      	adds	r2, #3
 8001394:	2101      	movs	r1, #1
 8001396:	fa01 f202 	lsl.w	r2, r1, r2
 800139a:	431a      	orrs	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80013a0:	bf00      	nop
				}
		}


	}
}
 80013a2:	bf00      	nop
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000040 	.word	0x20000040

080013b4 <gpio_port_config>:
 * @param numPins : The number of GPIO pins you want to configure.
 * @retval None
 * @example : gpio_port_config(myGPIO,(int []) {1, 2, 3, 5},4);
 */
void gpio_port_config(GPIO_TYPE gpio_type, int myPins[], int numPins)
{
 80013b4:	b084      	sub	sp, #16
 80013b6:	b5b0      	push	{r4, r5, r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af02      	add	r7, sp, #8
 80013bc:	f107 0418 	add.w	r4, r7, #24
 80013c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(gpio_type.port==PORTA)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	4a25      	ldr	r2, [pc, #148]	; (800145c <gpio_port_config+0xa8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d105      	bne.n	80013d8 <gpio_port_config+0x24>
			GPIO_CLOCK_ENABLE_PORTA;
 80013cc:	4a24      	ldr	r2, [pc, #144]	; (8001460 <gpio_port_config+0xac>)
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <gpio_port_config+0xac>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTB)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	4a22      	ldr	r2, [pc, #136]	; (8001464 <gpio_port_config+0xb0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d105      	bne.n	80013ec <gpio_port_config+0x38>
				GPIO_CLOCK_ENABLE_PORTB;
 80013e0:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <gpio_port_config+0xac>)
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <gpio_port_config+0xac>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTC)
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <gpio_port_config+0xb4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d105      	bne.n	8001400 <gpio_port_config+0x4c>
				GPIO_CLOCK_ENABLE_PORTC;
 80013f4:	4a1a      	ldr	r2, [pc, #104]	; (8001460 <gpio_port_config+0xac>)
 80013f6:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <gpio_port_config+0xac>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	f043 0304 	orr.w	r3, r3, #4
 80013fe:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTD)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	4a1a      	ldr	r2, [pc, #104]	; (800146c <gpio_port_config+0xb8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d105      	bne.n	8001414 <gpio_port_config+0x60>
				GPIO_CLOCK_ENABLE_PORTD;
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <gpio_port_config+0xac>)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <gpio_port_config+0xac>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	6313      	str	r3, [r2, #48]	; 0x30


	for (int i = 0; i<numPins; i++)
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	e015      	b.n	8001446 <gpio_port_config+0x92>
	{
			gpio_type.pin= myPins[i];
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	61fb      	str	r3, [r7, #28]
		config_pin(gpio_type.port,gpio_type.pin,gpio_type.speed,gpio_type.mode, gpio_type.mode_type,gpio_type.alt_func);
 8001426:	69b8      	ldr	r0, [r7, #24]
 8001428:	69f9      	ldr	r1, [r7, #28]
 800142a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800142c:	6a3d      	ldr	r5, [r7, #32]
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	b29b      	uxth	r3, r3
 8001432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001434:	9201      	str	r2, [sp, #4]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	462b      	mov	r3, r5
 800143a:	4622      	mov	r2, r4
 800143c:	f7fe ff72 	bl	8000324 <config_pin>
	for (int i = 0; i<numPins; i++)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3301      	adds	r3, #1
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800144a:	429a      	cmp	r2, r3
 800144c:	dbe5      	blt.n	800141a <gpio_port_config+0x66>

	}


}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001458:	b004      	add	sp, #16
 800145a:	4770      	bx	lr
 800145c:	40020000 	.word	0x40020000
 8001460:	40023800 	.word	0x40023800
 8001464:	40020400 	.word	0x40020400
 8001468:	40020800 	.word	0x40020800
 800146c:	40020c00 	.word	0x40020c00

08001470 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800147a:	4909      	ldr	r1, [pc, #36]	; (80014a0 <NVIC_EnableIRQ+0x30>)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	095b      	lsrs	r3, r3, #5
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <I2C_enable>:

#include "I2C_Library.h"


void I2C_enable()
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b093      	sub	sp, #76	; 0x4c
 80014a8:	af06      	add	r7, sp, #24
	// I2C will not work unless the config_clock_50MHz(); is used before enabling I2C.
	int SCL = 6;
 80014aa:	2306      	movs	r3, #6
 80014ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	int SDA = 7;
 80014ae:	2307      	movs	r3, #7
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28

	// PORTB alternate mode setup pin 6 and 7
	GPIO_TYPE myI2C;
	myI2C.port = PORTB;
 80014b2:	4b25      	ldr	r3, [pc, #148]	; (8001548 <I2C_enable+0xa4>)
 80014b4:	607b      	str	r3, [r7, #4]
	myI2C.mode = ALT_MODE;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60fb      	str	r3, [r7, #12]

	myI2C.speed = SPEED_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	61bb      	str	r3, [r7, #24]
	myI2C.alt_func = AF4;
 80014be:	2304      	movs	r3, #4
 80014c0:	61fb      	str	r3, [r7, #28]
	gpio_port_config(myI2C,(int []) {SCL,SDA},2);
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ca:	2302      	movs	r3, #2
 80014cc:	9304      	str	r3, [sp, #16]
 80014ce:	f107 0320 	add.w	r3, r7, #32
 80014d2:	9303      	str	r3, [sp, #12]
 80014d4:	466c      	mov	r4, sp
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e6:	f7ff ff65 	bl	80013b4 <gpio_port_config>

	// Enabling clock for I2C
	RCC->APB1ENR |=RCC_APB1ENR_I2C1EN;
 80014ea:	4a18      	ldr	r2, [pc, #96]	; (800154c <I2C_enable+0xa8>)
 80014ec:	4b17      	ldr	r3, [pc, #92]	; (800154c <I2C_enable+0xa8>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40


	// The APB clock frequency is 50 MHz.
	I2C1->CR2 |= 0b110010;
 80014f6:	4a16      	ldr	r2, [pc, #88]	; (8001550 <I2C_enable+0xac>)
 80014f8:	4b15      	ldr	r3, [pc, #84]	; (8001550 <I2C_enable+0xac>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8001500:	6053      	str	r3, [r2, #4]
	// Standard I2C master mode
	I2C1->CCR &= ~I2C_CCR_FS;
 8001502:	4a13      	ldr	r2, [pc, #76]	; (8001550 <I2C_enable+0xac>)
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <I2C_enable+0xac>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800150c:	61d3      	str	r3, [r2, #28]
	// Clock control register as 100 kHZ for an APB frequency of 50 MHz.
	// (2*100khz)^-1 = RCC*(1/50Mhz)
	I2C1->CCR |= 250;
 800150e:	4a10      	ldr	r2, [pc, #64]	; (8001550 <I2C_enable+0xac>)
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <I2C_enable+0xac>)
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	f043 03fa 	orr.w	r3, r3, #250	; 0xfa
 8001518:	61d3      	str	r3, [r2, #28]
	// Maximum rise time. In standard mode, the maximum SCL rise time is 1000ns. We have 50MHz apb freq
	// which is 20ns. 1000/20 +1 = 51
	I2C1->TRISE |= 51;
 800151a:	4a0d      	ldr	r2, [pc, #52]	; (8001550 <I2C_enable+0xac>)
 800151c:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <I2C_enable+0xac>)
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8001524:	6213      	str	r3, [r2, #32]

	// Peripheral Enable
	I2C1->CR1 |= I2C_CR1_PE;
 8001526:	4a0a      	ldr	r2, [pc, #40]	; (8001550 <I2C_enable+0xac>)
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <I2C_enable+0xac>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6013      	str	r3, [r2, #0]

	/* Interrupt Enabled for the I2C1 Error event */
	I2C1->CR2 = I2C_CR2_ITERREN;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <I2C_enable+0xac>)
 8001534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001538:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 800153a:	2020      	movs	r0, #32
 800153c:	f7ff ff98 	bl	8001470 <NVIC_EnableIRQ>


}
 8001540:	bf00      	nop
 8001542:	3734      	adds	r7, #52	; 0x34
 8001544:	46bd      	mov	sp, r7
 8001546:	bd90      	pop	{r4, r7, pc}
 8001548:	40020400 	.word	0x40020400
 800154c:	40023800 	.word	0x40023800
 8001550:	40005400 	.word	0x40005400

08001554 <I2C1_ER_IRQHandler>:
/* Interrupt Service Routine for I2C1 Error event*/
void I2C1_ER_IRQHandler()
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	I2C1->SR1 &= ~I2C_SR1_AF;
 8001558:	4a08      	ldr	r2, [pc, #32]	; (800157c <I2C1_ER_IRQHandler+0x28>)
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <I2C1_ER_IRQHandler+0x28>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001562:	6153      	str	r3, [r2, #20]
	I2C1->CR1 |= I2C_CR1_STOP;
 8001564:	4a05      	ldr	r2, [pc, #20]	; (800157c <I2C1_ER_IRQHandler+0x28>)
 8001566:	4b05      	ldr	r3, [pc, #20]	; (800157c <I2C1_ER_IRQHandler+0x28>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156e:	6013      	str	r3, [r2, #0]
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40005400 	.word	0x40005400

08001580 <I2C_addressWrite>:


void I2C_addressWrite(uint8_t i2c_address)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = (i2c_address<<1) & 0b11111110; //lsb is 0 (Reset), therefore master is in transmitter mode
 800158a:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <I2C_addressWrite+0x3c>)
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	b2db      	uxtb	r3, r3
 8001592:	6113      	str	r3, [r2, #16]


	// EV6
	while(!(I2C1->SR1 & I2C_SR1_ADDR)); // Wait for Received Address matched
 8001594:	bf00      	nop
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <I2C_addressWrite+0x3c>)
 8001598:	695b      	ldr	r3, [r3, #20]
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f9      	beq.n	8001596 <I2C_addressWrite+0x16>
	while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80015a2:	bf00      	nop
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <I2C_addressWrite+0x3c>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d0f9      	beq.n	80015a4 <I2C_addressWrite+0x24>

}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40005400 	.word	0x40005400

080015c0 <I2C_data>:

void I2C_data(uint8_t i2c_data)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
		I2C1->DR = i2c_data;
 80015ca:	4a08      	ldr	r2, [pc, #32]	; (80015ec <I2C_data+0x2c>)
 80015cc:	79fb      	ldrb	r3, [r7, #7]
 80015ce:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 80015d0:	bf00      	nop
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <I2C_data+0x2c>)
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f9      	beq.n	80015d2 <I2C_data+0x12>

}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40005400 	.word	0x40005400

080015f0 <I2C_stop>:

void I2C_stop()
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
	while (!(I2C1->SR1 & I2C_SR1_BTF)); // Byte transfer finished succeeded
 80015f4:	bf00      	nop
 80015f6:	4b08      	ldr	r3, [pc, #32]	; (8001618 <I2C_stop+0x28>)
 80015f8:	695b      	ldr	r3, [r3, #20]
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f9      	beq.n	80015f6 <I2C_stop+0x6>
	I2C1->CR1 |= I2C_CR1_STOP;
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <I2C_stop+0x28>)
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <I2C_stop+0x28>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160c:	6013      	str	r3, [r2, #0]

}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40005400 	.word	0x40005400

0800161c <I2C_start>:


void I2C_start()
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
	//while(I2C1->SR2 & I2C_SR2_BUSY);// Unnecessary
	I2C1->CR1 |= I2C_CR1_START;
 8001620:	4a08      	ldr	r2, [pc, #32]	; (8001644 <I2C_start+0x28>)
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <I2C_start+0x28>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)); // keep waiting until the SB bit has been set
 800162c:	bf00      	nop
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <I2C_start+0x28>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f9      	beq.n	800162e <I2C_start+0x12>
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40005400 	.word	0x40005400

08001648 <NVIC_EnableIRQ>:
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	4603      	mov	r3, r0
 8001650:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001652:	4909      	ldr	r1, [pc, #36]	; (8001678 <NVIC_EnableIRQ+0x30>)
 8001654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	f002 021f 	and.w	r2, r2, #31
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <config_clock_50MHz>:
// Volatile means that Ticks can change at any time
// Declaring volatile is needed for global variables changed by interrupted service routines
// https://www.embedded.com/electronics-blogs/beginner-s-corner/4023801/Introduction-to-the-Volatile-Keyword

void config_clock_50MHz(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	/* Enable HSI */
	RCC->CR |= ((uint32_t)RCC_CR_HSION);
 8001680:	4a4d      	ldr	r2, [pc, #308]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

	/* Wait for HSI to be ready */
	while ((RCC->CR & RCC_CR_HSIRDY) == 0){
 800168c:	bf00      	nop
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f9      	beq.n	800168e <config_clock_50MHz+0x12>
	  // Nop
	}

	/* Set HSI as the System Clock */
	RCC->CFGR = RCC_CFGR_SW_HSI;
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <config_clock_50MHz+0x13c>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]

	/* Wait for HSI to be used for the system clock */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI){
 80016a0:	bf00      	nop
 80016a2:	4b45      	ldr	r3, [pc, #276]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <config_clock_50MHz+0x26>
	 // Nop
	}

	// some shit here //
	FLASH->ACR |= FLASH_ACR_PRFTEN;                          // Enable Prefetch Buffer
 80016ae:	4a43      	ldr	r2, [pc, #268]	; (80017bc <config_clock_50MHz+0x140>)
 80016b0:	4b42      	ldr	r3, [pc, #264]	; (80017bc <config_clock_50MHz+0x140>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b8:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY;                         // Flash 1 wait state
 80016ba:	4a40      	ldr	r2, [pc, #256]	; (80017bc <config_clock_50MHz+0x140>)
 80016bc:	4b3f      	ldr	r3, [pc, #252]	; (80017bc <config_clock_50MHz+0x140>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f043 030f 	orr.w	r3, r3, #15
 80016c4:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;                       // Enable the PWR APB1 Clock
 80016c6:	4a3c      	ldr	r2, [pc, #240]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016c8:	4b3b      	ldr	r3, [pc, #236]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR = PWR_CR_VOS_0;                                  // Select the Voltage Range 1 (1.8V)
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <config_clock_50MHz+0x144>)
 80016d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016d8:	601a      	str	r2, [r3, #0]
	while((PWR->CSR & PWR_CSR_VOSRDY ) != 0);
 80016da:	bf00      	nop
 80016dc:	4b38      	ldr	r3, [pc, #224]	; (80017c0 <config_clock_50MHz+0x144>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f9      	bne.n	80016dc <config_clock_50MHz+0x60>

	/* PLLCLK = (HSI * 4)/2 = 32 MHz */ //NAH
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC| RCC_PLLCFGR_PLLM |  RCC_PLLCFGR_PLLN);
 80016e8:	4933      	ldr	r1, [pc, #204]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016ea:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4b35      	ldr	r3, [pc, #212]	; (80017c4 <config_clock_50MHz+0x148>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSI|RCC_PLLCFGR_PLLM_4 | (200<<6));
 80016f4:	4a30      	ldr	r2, [pc, #192]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016f6:	4b30      	ldr	r3, [pc, #192]	; (80017b8 <config_clock_50MHz+0x13c>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 80016fe:	f043 0310 	orr.w	r3, r3, #16
 8001702:	6053      	str	r3, [r2, #4]

	/* Peripheral Clock divisors */
	RCC->CFGR &= ~(0xF<<4); // Cleared 4 bits. HPRE[3:0] which are bits 4,5,6,7. This means  that the system clock is not divided
 8001704:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001706:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800170e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b1000<<4); // AHB system clock now divided by 2.
 8001710:	4a29      	ldr	r2, [pc, #164]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001712:	4b29      	ldr	r3, [pc, #164]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800171a:	6093      	str	r3, [r2, #8]
	// HCLK is now 50 MHz



	// HCLK = SYSCLK
	RCC->CFGR &= ~(0x7<<10); // cleared 3 bits. PPRE1[2:0] which are bits 10,11,12
 800171c:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <config_clock_50MHz+0x13c>)
 800171e:	4b26      	ldr	r3, [pc, #152]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001726:	6093      	str	r3, [r2, #8]
	//RCC->CFGR |= (0b100<<10); // Set as 101, which means the AHB clock is divided by 2. APB1. 50mhz


	RCC->CFGR &= ~(0x7<<13); // Cleared 3 bits. PPRE2[2:0] which are bits 13,14,15
 8001728:	4a23      	ldr	r2, [pc, #140]	; (80017b8 <config_clock_50MHz+0x13c>)
 800172a:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <config_clock_50MHz+0x13c>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001732:	6093      	str	r3, [r2, #8]


	// the commented out apb1 apb2 means not divided.

	/* Enable PLL */
	 RCC->CR &= ~RCC_CR_PLLON;       /* Disable PLL */
 8001734:	4a20      	ldr	r2, [pc, #128]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800173e:	6013      	str	r3, [r2, #0]
	 RCC->CR |= RCC_CR_PLLON;        /* Enable PLL     */
 8001740:	4a1d      	ldr	r2, [pc, #116]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800174a:	6013      	str	r3, [r2, #0]

	   /* Wait until the PLL is ready */
	 while((RCC->CR & RCC_CR_PLLRDY) == 0){
 800174c:	bf00      	nop
 800174e:	4b1a      	ldr	r3, [pc, #104]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f9      	beq.n	800174e <config_clock_50MHz+0xd2>
	       //Nop
	   }

	   /* Select PLL as system Clock */
	 RCC->CFGR &= ~RCC_CFGR_SW;            /* Clear */
 800175a:	4a17      	ldr	r2, [pc, #92]	; (80017b8 <config_clock_50MHz+0x13c>)
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <config_clock_50MHz+0x13c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	6093      	str	r3, [r2, #8]
	 RCC->CFGR |=  RCC_CFGR_SW_PLL;    /* Set   */
 8001766:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001768:	4b13      	ldr	r3, [pc, #76]	; (80017b8 <config_clock_50MHz+0x13c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6093      	str	r3, [r2, #8]

	   /* Wait for PLL to become system core clock */
	 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){
 8001772:	bf00      	nop
 8001774:	4b10      	ldr	r3, [pc, #64]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d1f9      	bne.n	8001774 <config_clock_50MHz+0xf8>




	//************************* configuring for milisecond delay
	 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8001780:	4a0d      	ldr	r2, [pc, #52]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001782:	4b0d      	ldr	r3, [pc, #52]	; (80017b8 <config_clock_50MHz+0x13c>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6413      	str	r3, [r2, #64]	; 0x40
	 TIM4->PSC = 50;
 800178c:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <config_clock_50MHz+0x14c>)
 800178e:	2232      	movs	r2, #50	; 0x32
 8001790:	629a      	str	r2, [r3, #40]	; 0x28
	 TIM4->ARR = 1000;
 8001792:	4b0d      	ldr	r3, [pc, #52]	; (80017c8 <config_clock_50MHz+0x14c>)
 8001794:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM4->CR1 &= ~TIM_CR1_DIR; //Up counter. By default, but still good practice
 800179a:	4a0b      	ldr	r2, [pc, #44]	; (80017c8 <config_clock_50MHz+0x14c>)
 800179c:	4b0a      	ldr	r3, [pc, #40]	; (80017c8 <config_clock_50MHz+0x14c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f023 0310 	bic.w	r3, r3, #16
 80017a4:	6013      	str	r3, [r2, #0]
	 //TIM4->CR1 |= TIM_CR1_URS; // Only up/down counter generates an update interrupt // good practice
	 TIM4->DIER = TIM_DIER_UIE; // Update interrupt enabled
 80017a6:	4b08      	ldr	r3, [pc, #32]	; (80017c8 <config_clock_50MHz+0x14c>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	60da      	str	r2, [r3, #12]
	 NVIC_EnableIRQ(TIM4_IRQn);
 80017ac:	201e      	movs	r0, #30
 80017ae:	f7ff ff4b 	bl	8001648 <NVIC_EnableIRQ>

}
 80017b2:	bf00      	nop
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40023c00 	.word	0x40023c00
 80017c0:	40007000 	.word	0x40007000
 80017c4:	ffbf8000 	.word	0xffbf8000
 80017c8:	40000800 	.word	0x40000800

080017cc <TIM4_IRQHandler>:


void TIM4_IRQHandler()
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0

	Ticks++;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <TIM4_IRQHandler+0x24>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3301      	adds	r3, #1
 80017d6:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <TIM4_IRQHandler+0x24>)
 80017d8:	6013      	str	r3, [r2, #0]
	TIM4->SR &= ~TIM_SR_UIF; // cleared update interrupt
 80017da:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <TIM4_IRQHandler+0x28>)
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <TIM4_IRQHandler+0x28>)
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	f023 0301 	bic.w	r3, r3, #1
 80017e4:	6113      	str	r3, [r2, #16]

}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	2000009c 	.word	0x2000009c
 80017f4:	40000800 	.word	0x40000800

080017f8 <delay_mS>:


void delay_mS(uint32_t mS)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
		TIM4->CR1 |= TIM_CR1_CEN;
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <delay_mS+0x40>)
 8001802:	4b0d      	ldr	r3, [pc, #52]	; (8001838 <delay_mS+0x40>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6013      	str	r3, [r2, #0]
		Ticks = 0;
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <delay_mS+0x44>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

		while(Ticks<mS);
 8001812:	bf00      	nop
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <delay_mS+0x44>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d3f9      	bcc.n	8001814 <delay_mS+0x1c>

		TIM4->CR1 &= ~TIM_CR1_CEN;
 8001820:	4a05      	ldr	r2, [pc, #20]	; (8001838 <delay_mS+0x40>)
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <delay_mS+0x40>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6013      	str	r3, [r2, #0]

}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40000800 	.word	0x40000800
 800183c:	2000009c 	.word	0x2000009c

08001840 <__libc_init_array>:
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	4e0d      	ldr	r6, [pc, #52]	; (8001878 <__libc_init_array+0x38>)
 8001844:	4c0d      	ldr	r4, [pc, #52]	; (800187c <__libc_init_array+0x3c>)
 8001846:	1ba4      	subs	r4, r4, r6
 8001848:	10a4      	asrs	r4, r4, #2
 800184a:	2500      	movs	r5, #0
 800184c:	42a5      	cmp	r5, r4
 800184e:	d109      	bne.n	8001864 <__libc_init_array+0x24>
 8001850:	4e0b      	ldr	r6, [pc, #44]	; (8001880 <__libc_init_array+0x40>)
 8001852:	4c0c      	ldr	r4, [pc, #48]	; (8001884 <__libc_init_array+0x44>)
 8001854:	f000 f818 	bl	8001888 <_init>
 8001858:	1ba4      	subs	r4, r4, r6
 800185a:	10a4      	asrs	r4, r4, #2
 800185c:	2500      	movs	r5, #0
 800185e:	42a5      	cmp	r5, r4
 8001860:	d105      	bne.n	800186e <__libc_init_array+0x2e>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001868:	4798      	blx	r3
 800186a:	3501      	adds	r5, #1
 800186c:	e7ee      	b.n	800184c <__libc_init_array+0xc>
 800186e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001872:	4798      	blx	r3
 8001874:	3501      	adds	r5, #1
 8001876:	e7f2      	b.n	800185e <__libc_init_array+0x1e>
 8001878:	080018a0 	.word	0x080018a0
 800187c:	080018a0 	.word	0x080018a0
 8001880:	080018a0 	.word	0x080018a0
 8001884:	080018a4 	.word	0x080018a4

08001888 <_init>:
 8001888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188a:	bf00      	nop
 800188c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800188e:	bc08      	pop	{r3}
 8001890:	469e      	mov	lr, r3
 8001892:	4770      	bx	lr

08001894 <_fini>:
 8001894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001896:	bf00      	nop
 8001898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800189a:	bc08      	pop	{r3}
 800189c:	469e      	mov	lr, r3
 800189e:	4770      	bx	lr
