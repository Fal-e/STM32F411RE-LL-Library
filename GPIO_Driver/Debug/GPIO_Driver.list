
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001770  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001908  08001908  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001908  08001908  00011908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800190c  0800190c  0001190c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08001910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000080  08001990  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000a0  08001990  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   00002a5a  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000089f  00000000  00000000  00022b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000198  00000000  00000000  000233b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  00023548  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001026  00000000  00000000  00023678  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000eed  00000000  00000000  0002469e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002558b  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000004c0  00000000  00000000  00025608  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00025ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080018f0 	.word	0x080018f0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	080018f0 	.word	0x080018f0

080001d8 <main>:
*/



int main(void)
{
 80001d8:	b590      	push	{r4, r7, lr}
 80001da:	b099      	sub	sp, #100	; 0x64
 80001dc:	af06      	add	r7, sp, #24
lcd_goto_xy(4,2);
lcd_print("Shahini");
//delay_mS(2000);
*/

 config_clock_50MHz();
 80001de:	f001 fa81 	bl	80016e4 <config_clock_50MHz>


GPIO_TYPE myGPIO;
myGPIO.port = PORTC;
 80001e2:	4b1d      	ldr	r3, [pc, #116]	; (8000258 <main+0x80>)
 80001e4:	623b      	str	r3, [r7, #32]
myGPIO.mode = ANALOG_MODE;
 80001e6:	2303      	movs	r3, #3
 80001e8:	62bb      	str	r3, [r7, #40]	; 0x28
gpio_port_config(myGPIO,(int []) {0},1);
 80001ea:	2300      	movs	r3, #0
 80001ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80001ee:	2301      	movs	r3, #1
 80001f0:	9304      	str	r3, [sp, #16]
 80001f2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001f6:	9303      	str	r3, [sp, #12]
 80001f8:	466c      	mov	r4, sp
 80001fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000206:	f107 0320 	add.w	r3, r7, #32
 800020a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800020c:	f001 f8d0 	bl	80013b0 <gpio_port_config>


GPIO_TYPE myLed;
myLed.port = PORTA;
 8000210:	4b12      	ldr	r3, [pc, #72]	; (800025c <main+0x84>)
 8000212:	607b      	str	r3, [r7, #4]
myLed.mode = OUTPUT_MODE;
 8000214:	2301      	movs	r3, #1
 8000216:	60fb      	str	r3, [r7, #12]
myLed.mode_type = OUTPUT_PUP;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
gpio_port_config(myLed,(int []) {5},1);
 800021c:	2305      	movs	r3, #5
 800021e:	643b      	str	r3, [r7, #64]	; 0x40
 8000220:	2301      	movs	r3, #1
 8000222:	9304      	str	r3, [sp, #16]
 8000224:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000228:	9303      	str	r3, [sp, #12]
 800022a:	466c      	mov	r4, sp
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000234:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000238:	1d3b      	adds	r3, r7, #4
 800023a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800023c:	f001 f8b8 	bl	80013b0 <gpio_port_config>




I2C_enable();
 8000240:	f001 f92e 	bl	80014a0 <I2C_enable>

//while(1){
//lcd_i2c_print("Value: ");

//I2C_scan();
uint16_t result = imu_accel_x();
 8000244:	f001 fb0c 	bl	8001860 <imu_accel_x>
 8000248:	4603      	mov	r3, r0
 800024a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800024e:	2300      	movs	r3, #0
// This is because when a NACK is received (e.g. wrong address), TXE is not set, therefore remaining in the loop.
// Need to fix this by adding an interrupt, which STOPs or restarts communication.
// Otherwise, will be stuck in loop and no more communication can continue.

//
}
 8000250:	4618      	mov	r0, r3
 8000252:	374c      	adds	r7, #76	; 0x4c
 8000254:	46bd      	mov	sp, r7
 8000256:	bd90      	pop	{r4, r7, pc}
 8000258:	40020800 	.word	0x40020800
 800025c:	40020000 	.word	0x40020000

08000260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000298 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000264:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000266:	e003      	b.n	8000270 <LoopCopyDataInit>

08000268 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000268:	4b0c      	ldr	r3, [pc, #48]	; (800029c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800026a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800026c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800026e:	3104      	adds	r1, #4

08000270 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000270:	480b      	ldr	r0, [pc, #44]	; (80002a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000272:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000274:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000276:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000278:	d3f6      	bcc.n	8000268 <CopyDataInit>
  ldr  r2, =_sbss
 800027a:	4a0b      	ldr	r2, [pc, #44]	; (80002a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800027c:	e002      	b.n	8000284 <LoopFillZerobss>

0800027e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800027e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000280:	f842 3b04 	str.w	r3, [r2], #4

08000284 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000286:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000288:	d3f9      	bcc.n	800027e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800028a:	f000 f813 	bl	80002b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800028e:	f001 fb0b 	bl	80018a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000292:	f7ff ffa1 	bl	80001d8 <main>
  bx  lr    
 8000296:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000298:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800029c:	08001910 	.word	0x08001910
  ldr  r0, =_sdata
 80002a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002a4:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80002a8:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80002ac:	200000a0 	.word	0x200000a0

080002b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002b0:	e7fe      	b.n	80002b0 <ADC_IRQHandler>
	...

080002b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002b8:	4a16      	ldr	r2, [pc, #88]	; (8000314 <SystemInit+0x60>)
 80002ba:	4b16      	ldr	r3, [pc, #88]	; (8000314 <SystemInit+0x60>)
 80002bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80002c8:	4a13      	ldr	r2, [pc, #76]	; (8000318 <SystemInit+0x64>)
 80002ca:	4b13      	ldr	r3, [pc, #76]	; (8000318 <SystemInit+0x64>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f043 0301 	orr.w	r3, r3, #1
 80002d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80002d4:	4b10      	ldr	r3, [pc, #64]	; (8000318 <SystemInit+0x64>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80002da:	4a0f      	ldr	r2, [pc, #60]	; (8000318 <SystemInit+0x64>)
 80002dc:	4b0e      	ldr	r3, [pc, #56]	; (8000318 <SystemInit+0x64>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80002e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80002e8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <SystemInit+0x64>)
 80002ec:	4a0b      	ldr	r2, [pc, #44]	; (800031c <SystemInit+0x68>)
 80002ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f0:	4a09      	ldr	r2, [pc, #36]	; (8000318 <SystemInit+0x64>)
 80002f2:	4b09      	ldr	r3, [pc, #36]	; (8000318 <SystemInit+0x64>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80002fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80002fc:	4b06      	ldr	r3, [pc, #24]	; (8000318 <SystemInit+0x64>)
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000302:	4b04      	ldr	r3, [pc, #16]	; (8000314 <SystemInit+0x60>)
 8000304:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000308:	609a      	str	r2, [r3, #8]
#endif
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr
 8000314:	e000ed00 	.word	0xe000ed00
 8000318:	40023800 	.word	0x40023800
 800031c:	24003010 	.word	0x24003010

08000320 <config_pin>:
    (0x14), //5
    (0x18), //6
    (0x1C), //7
};

static void config_pin(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed, uint32_t mode, uint16_t mode_type, uint32_t alt_func) {
 8000320:	b480      	push	{r7}
 8000322:	b085      	sub	sp, #20
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
 800032c:	603b      	str	r3, [r7, #0]

    if (mode == OUTPUT_MODE) {
 800032e:	683b      	ldr	r3, [r7, #0]
 8000330:	2b01      	cmp	r3, #1
 8000332:	f040 80aa 	bne.w	800048a <config_pin+0x16a>
        port->MODER |= (1<<PINPOS[pinNumber]);
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	49b1      	ldr	r1, [pc, #708]	; (8000600 <config_pin+0x2e0>)
 800033c:	68ba      	ldr	r2, [r7, #8]
 800033e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000342:	2101      	movs	r1, #1
 8000344:	fa01 f202 	lsl.w	r2, r1, r2
 8000348:	431a      	orrs	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	601a      	str	r2, [r3, #0]
        port->MODER &= ~(1<<PINPOS[pinNumber]+1);
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	49ab      	ldr	r1, [pc, #684]	; (8000600 <config_pin+0x2e0>)
 8000354:	68ba      	ldr	r2, [r7, #8]
 8000356:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800035a:	3201      	adds	r2, #1
 800035c:	2101      	movs	r1, #1
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	43d2      	mvns	r2, r2
 8000364:	401a      	ands	r2, r3
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	601a      	str	r2, [r3, #0]


        if (mode_type == OUTPUT_PUP) {
 800036a:	8b3b      	ldrh	r3, [r7, #24]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d109      	bne.n	8000384 <config_pin+0x64>
            port->OTYPER &= ~(1<<pinNumber);
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	2101      	movs	r1, #1
 8000376:	68ba      	ldr	r2, [r7, #8]
 8000378:	fa01 f202 	lsl.w	r2, r1, r2
 800037c:	43d2      	mvns	r2, r2
 800037e:	401a      	ands	r2, r3
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	605a      	str	r2, [r3, #4]
        }

        if (mode_type == OUTPUT_OD) {
 8000384:	8b3b      	ldrh	r3, [r7, #24]
 8000386:	2b01      	cmp	r3, #1
 8000388:	d108      	bne.n	800039c <config_pin+0x7c>
            port->OTYPER |= (1<<pinNumber);
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	685b      	ldr	r3, [r3, #4]
 800038e:	2101      	movs	r1, #1
 8000390:	68ba      	ldr	r2, [r7, #8]
 8000392:	fa01 f202 	lsl.w	r2, r1, r2
 8000396:	431a      	orrs	r2, r3
 8000398:	68fb      	ldr	r3, [r7, #12]
 800039a:	605a      	str	r2, [r3, #4]
        }


        switch(pinSpeed) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	2b03      	cmp	r3, #3
 80003a0:	f200 80c5 	bhi.w	800052e <config_pin+0x20e>
 80003a4:	a201      	add	r2, pc, #4	; (adr r2, 80003ac <config_pin+0x8c>)
 80003a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003aa:	bf00      	nop
 80003ac:	080003bd 	.word	0x080003bd
 80003b0:	080003e9 	.word	0x080003e9
 80003b4:	0800041f 	.word	0x0800041f
 80003b8:	08000455 	.word	0x08000455
        //Output speed
        case (SPEED_LOW):
        port->OSPEEDR &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]); // Putting a 00
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	498f      	ldr	r1, [pc, #572]	; (8000600 <config_pin+0x2e0>)
 80003c2:	68ba      	ldr	r2, [r7, #8]
 80003c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003c8:	2101      	movs	r1, #1
 80003ca:	4091      	lsls	r1, r2
 80003cc:	68ba      	ldr	r2, [r7, #8]
 80003ce:	3201      	adds	r2, #1
 80003d0:	488b      	ldr	r0, [pc, #556]	; (8000600 <config_pin+0x2e0>)
 80003d2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80003d6:	2001      	movs	r0, #1
 80003d8:	fa00 f202 	lsl.w	r2, r0, r2
 80003dc:	430a      	orrs	r2, r1
 80003de:	43d2      	mvns	r2, r2
 80003e0:	401a      	ands	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	609a      	str	r2, [r3, #8]
        break;
 80003e6:	e0a2      	b.n	800052e <config_pin+0x20e>

        case (SPEED_MEDIUM): //Putting a 01
        port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	689b      	ldr	r3, [r3, #8]
 80003ec:	4984      	ldr	r1, [pc, #528]	; (8000600 <config_pin+0x2e0>)
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003f4:	2101      	movs	r1, #1
 80003f6:	fa01 f202 	lsl.w	r2, r1, r2
 80003fa:	431a      	orrs	r2, r3
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	609a      	str	r2, [r3, #8]
        port->OSPEEDR &= ~(1<<PINPOS[pinNumber+1]);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	68ba      	ldr	r2, [r7, #8]
 8000406:	3201      	adds	r2, #1
 8000408:	497d      	ldr	r1, [pc, #500]	; (8000600 <config_pin+0x2e0>)
 800040a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	43d2      	mvns	r2, r2
 8000416:	401a      	ands	r2, r3
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	609a      	str	r2, [r3, #8]
        break;
 800041c:	e087      	b.n	800052e <config_pin+0x20e>

        case (SPEED_HIGH): //Putting a 10
        port->OSPEEDR &= ~(1<<PINPOS[pinNumber]);
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	4977      	ldr	r1, [pc, #476]	; (8000600 <config_pin+0x2e0>)
 8000424:	68ba      	ldr	r2, [r7, #8]
 8000426:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800042a:	2101      	movs	r1, #1
 800042c:	fa01 f202 	lsl.w	r2, r1, r2
 8000430:	43d2      	mvns	r2, r2
 8000432:	401a      	ands	r2, r3
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	609a      	str	r2, [r3, #8]
        port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	689b      	ldr	r3, [r3, #8]
 800043c:	68ba      	ldr	r2, [r7, #8]
 800043e:	3201      	adds	r2, #1
 8000440:	496f      	ldr	r1, [pc, #444]	; (8000600 <config_pin+0x2e0>)
 8000442:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000446:	2101      	movs	r1, #1
 8000448:	fa01 f202 	lsl.w	r2, r1, r2
 800044c:	431a      	orrs	r2, r3
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	609a      	str	r2, [r3, #8]
        break;
 8000452:	e06c      	b.n	800052e <config_pin+0x20e>

        case (SPEED_V_HIGH): //Putting a 11
        port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4969      	ldr	r1, [pc, #420]	; (8000600 <config_pin+0x2e0>)
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000460:	2101      	movs	r1, #1
 8000462:	fa01 f202 	lsl.w	r2, r1, r2
 8000466:	431a      	orrs	r2, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	609a      	str	r2, [r3, #8]
        port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	68ba      	ldr	r2, [r7, #8]
 8000472:	3201      	adds	r2, #1
 8000474:	4962      	ldr	r1, [pc, #392]	; (8000600 <config_pin+0x2e0>)
 8000476:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	431a      	orrs	r2, r3
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	609a      	str	r2, [r3, #8]
        break;
 8000486:	bf00      	nop
 8000488:	e051      	b.n	800052e <config_pin+0x20e>
        }
    }

    else {
       switch(mode) {
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d019      	beq.n	80004c4 <config_pin+0x1a4>
 8000490:	2b03      	cmp	r3, #3
 8000492:	d032      	beq.n	80004fa <config_pin+0x1da>
 8000494:	2b00      	cmp	r3, #0
 8000496:	d14a      	bne.n	800052e <config_pin+0x20e>
            case (INPUT_MODE): //00
            port->MODER &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]);
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4958      	ldr	r1, [pc, #352]	; (8000600 <config_pin+0x2e0>)
 800049e:	68ba      	ldr	r2, [r7, #8]
 80004a0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004a4:	2101      	movs	r1, #1
 80004a6:	4091      	lsls	r1, r2
 80004a8:	68ba      	ldr	r2, [r7, #8]
 80004aa:	3201      	adds	r2, #1
 80004ac:	4854      	ldr	r0, [pc, #336]	; (8000600 <config_pin+0x2e0>)
 80004ae:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80004b2:	2001      	movs	r0, #1
 80004b4:	fa00 f202 	lsl.w	r2, r0, r2
 80004b8:	430a      	orrs	r2, r1
 80004ba:	43d2      	mvns	r2, r2
 80004bc:	401a      	ands	r2, r3
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	601a      	str	r2, [r3, #0]
            break;
 80004c2:	e034      	b.n	800052e <config_pin+0x20e>

            case (ALT_MODE): //10
            port->MODER &= ~(1<<PINPOS[pinNumber]);
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	494d      	ldr	r1, [pc, #308]	; (8000600 <config_pin+0x2e0>)
 80004ca:	68ba      	ldr	r2, [r7, #8]
 80004cc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004d0:	2101      	movs	r1, #1
 80004d2:	fa01 f202 	lsl.w	r2, r1, r2
 80004d6:	43d2      	mvns	r2, r2
 80004d8:	401a      	ands	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	601a      	str	r2, [r3, #0]
            port->MODER |= (1<<(PINPOS[pinNumber]+1));
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	4947      	ldr	r1, [pc, #284]	; (8000600 <config_pin+0x2e0>)
 80004e4:	68ba      	ldr	r2, [r7, #8]
 80004e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004ea:	3201      	adds	r2, #1
 80004ec:	2101      	movs	r1, #1
 80004ee:	fa01 f202 	lsl.w	r2, r1, r2
 80004f2:	431a      	orrs	r2, r3
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	601a      	str	r2, [r3, #0]
            break;
 80004f8:	e019      	b.n	800052e <config_pin+0x20e>

            case (ANALOG_MODE): //11
            port->MODER |= (1<<PINPOS[pinNumber]);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4940      	ldr	r1, [pc, #256]	; (8000600 <config_pin+0x2e0>)
 8000500:	68ba      	ldr	r2, [r7, #8]
 8000502:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000506:	2101      	movs	r1, #1
 8000508:	fa01 f202 	lsl.w	r2, r1, r2
 800050c:	431a      	orrs	r2, r3
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	601a      	str	r2, [r3, #0]
            port->MODER |= (1<<(PINPOS[pinNumber]+1));
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	493a      	ldr	r1, [pc, #232]	; (8000600 <config_pin+0x2e0>)
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800051e:	3201      	adds	r2, #1
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	431a      	orrs	r2, r3
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	601a      	str	r2, [r3, #0]
            break;
 800052c:	bf00      	nop
            }
    }

    if (mode == ALT_MODE) {
 800052e:	683b      	ldr	r3, [r7, #0]
 8000530:	2b02      	cmp	r3, #2
 8000532:	f040 8734 	bne.w	800139e <config_pin+0x107e>
        if (pinNumber <=7) { //Low Register, AFRL
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	2b07      	cmp	r3, #7
 800053a:	f200 83a0 	bhi.w	8000c7e <config_pin+0x95e>
            switch(alt_func) {
 800053e:	69fb      	ldr	r3, [r7, #28]
 8000540:	2b0f      	cmp	r3, #15
 8000542:	f200 872c 	bhi.w	800139e <config_pin+0x107e>
 8000546:	a201      	add	r2, pc, #4	; (adr r2, 800054c <config_pin+0x22c>)
 8000548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054c:	0800058d 	.word	0x0800058d
 8000550:	08000609 	.word	0x08000609
 8000554:	08000679 	.word	0x08000679
 8000558:	080006e9 	.word	0x080006e9
 800055c:	08000757 	.word	0x08000757
 8000560:	080007c7 	.word	0x080007c7
 8000564:	08000835 	.word	0x08000835
 8000568:	080008a9 	.word	0x080008a9
 800056c:	08000915 	.word	0x08000915
 8000570:	08000985 	.word	0x08000985
 8000574:	080009f3 	.word	0x080009f3
 8000578:	08000a61 	.word	0x08000a61
 800057c:	08000acd 	.word	0x08000acd
 8000580:	08000b41 	.word	0x08000b41
 8000584:	08000bab 	.word	0x08000bab
 8000588:	08000c15 	.word	0x08000c15
                case (AF0):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	491c      	ldr	r1, [pc, #112]	; (8000604 <config_pin+0x2e4>)
 8000592:	68ba      	ldr	r2, [r7, #8]
 8000594:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000598:	2101      	movs	r1, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	43d2      	mvns	r2, r2
 80005a0:	401a      	ands	r2, r3
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	621a      	str	r2, [r3, #32]
                   port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6a1b      	ldr	r3, [r3, #32]
 80005aa:	4916      	ldr	r1, [pc, #88]	; (8000604 <config_pin+0x2e4>)
 80005ac:	68ba      	ldr	r2, [r7, #8]
 80005ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005b2:	3201      	adds	r2, #1
 80005b4:	2101      	movs	r1, #1
 80005b6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ba:	43d2      	mvns	r2, r2
 80005bc:	401a      	ands	r2, r3
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	6a1b      	ldr	r3, [r3, #32]
 80005c6:	490f      	ldr	r1, [pc, #60]	; (8000604 <config_pin+0x2e4>)
 80005c8:	68ba      	ldr	r2, [r7, #8]
 80005ca:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005ce:	3202      	adds	r2, #2
 80005d0:	2101      	movs	r1, #1
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	6a1b      	ldr	r3, [r3, #32]
 80005e2:	4908      	ldr	r1, [pc, #32]	; (8000604 <config_pin+0x2e4>)
 80005e4:	68ba      	ldr	r2, [r7, #8]
 80005e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005ea:	3203      	adds	r2, #3
 80005ec:	2101      	movs	r1, #1
 80005ee:	fa01 f202 	lsl.w	r2, r1, r2
 80005f2:	43d2      	mvns	r2, r2
 80005f4:	401a      	ands	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	621a      	str	r2, [r3, #32]
                    break;
 80005fa:	f000 bed0 	b.w	800139e <config_pin+0x107e>
 80005fe:	bf00      	nop
 8000600:	20000000 	.word	0x20000000
 8000604:	20000040 	.word	0x20000040

                case (AF1):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	6a1b      	ldr	r3, [r3, #32]
 800060c:	49a5      	ldr	r1, [pc, #660]	; (80008a4 <config_pin+0x584>)
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000614:	2101      	movs	r1, #1
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	431a      	orrs	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	6a1b      	ldr	r3, [r3, #32]
 8000624:	499f      	ldr	r1, [pc, #636]	; (80008a4 <config_pin+0x584>)
 8000626:	68ba      	ldr	r2, [r7, #8]
 8000628:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800062c:	3201      	adds	r2, #1
 800062e:	2101      	movs	r1, #1
 8000630:	fa01 f202 	lsl.w	r2, r1, r2
 8000634:	43d2      	mvns	r2, r2
 8000636:	401a      	ands	r2, r3
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	4998      	ldr	r1, [pc, #608]	; (80008a4 <config_pin+0x584>)
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000648:	3202      	adds	r2, #2
 800064a:	2101      	movs	r1, #1
 800064c:	fa01 f202 	lsl.w	r2, r1, r2
 8000650:	43d2      	mvns	r2, r2
 8000652:	401a      	ands	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	6a1b      	ldr	r3, [r3, #32]
 800065c:	4991      	ldr	r1, [pc, #580]	; (80008a4 <config_pin+0x584>)
 800065e:	68ba      	ldr	r2, [r7, #8]
 8000660:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000664:	3203      	adds	r2, #3
 8000666:	2101      	movs	r1, #1
 8000668:	fa01 f202 	lsl.w	r2, r1, r2
 800066c:	43d2      	mvns	r2, r2
 800066e:	401a      	ands	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	621a      	str	r2, [r3, #32]
                    break;
 8000674:	f000 be93 	b.w	800139e <config_pin+0x107e>

                case (AF2):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	6a1b      	ldr	r3, [r3, #32]
 800067c:	4989      	ldr	r1, [pc, #548]	; (80008a4 <config_pin+0x584>)
 800067e:	68ba      	ldr	r2, [r7, #8]
 8000680:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000684:	2101      	movs	r1, #1
 8000686:	fa01 f202 	lsl.w	r2, r1, r2
 800068a:	43d2      	mvns	r2, r2
 800068c:	401a      	ands	r2, r3
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4983      	ldr	r1, [pc, #524]	; (80008a4 <config_pin+0x584>)
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800069e:	3201      	adds	r2, #1
 80006a0:	2101      	movs	r1, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	431a      	orrs	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	497c      	ldr	r1, [pc, #496]	; (80008a4 <config_pin+0x584>)
 80006b2:	68ba      	ldr	r2, [r7, #8]
 80006b4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006b8:	3202      	adds	r2, #2
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	43d2      	mvns	r2, r2
 80006c2:	401a      	ands	r2, r3
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4975      	ldr	r1, [pc, #468]	; (80008a4 <config_pin+0x584>)
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006d4:	3203      	adds	r2, #3
 80006d6:	2101      	movs	r1, #1
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	43d2      	mvns	r2, r2
 80006de:	401a      	ands	r2, r3
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	621a      	str	r2, [r3, #32]
                    break;
 80006e4:	f000 be5b 	b.w	800139e <config_pin+0x107e>

                case (AF3):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	496d      	ldr	r1, [pc, #436]	; (80008a4 <config_pin+0x584>)
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	431a      	orrs	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	6a1b      	ldr	r3, [r3, #32]
 8000704:	4967      	ldr	r1, [pc, #412]	; (80008a4 <config_pin+0x584>)
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800070c:	3201      	adds	r2, #1
 800070e:	2101      	movs	r1, #1
 8000710:	fa01 f202 	lsl.w	r2, r1, r2
 8000714:	431a      	orrs	r2, r3
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6a1b      	ldr	r3, [r3, #32]
 800071e:	4961      	ldr	r1, [pc, #388]	; (80008a4 <config_pin+0x584>)
 8000720:	68ba      	ldr	r2, [r7, #8]
 8000722:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000726:	3202      	adds	r2, #2
 8000728:	2101      	movs	r1, #1
 800072a:	fa01 f202 	lsl.w	r2, r1, r2
 800072e:	43d2      	mvns	r2, r2
 8000730:	401a      	ands	r2, r3
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	6a1b      	ldr	r3, [r3, #32]
 800073a:	495a      	ldr	r1, [pc, #360]	; (80008a4 <config_pin+0x584>)
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000742:	3203      	adds	r2, #3
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	43d2      	mvns	r2, r2
 800074c:	401a      	ands	r2, r3
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	621a      	str	r2, [r3, #32]
                    break;
 8000752:	f000 be24 	b.w	800139e <config_pin+0x107e>

                case (AF4):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	6a1b      	ldr	r3, [r3, #32]
 800075a:	4952      	ldr	r1, [pc, #328]	; (80008a4 <config_pin+0x584>)
 800075c:	68ba      	ldr	r2, [r7, #8]
 800075e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000762:	2101      	movs	r1, #1
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	43d2      	mvns	r2, r2
 800076a:	401a      	ands	r2, r3
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	6a1b      	ldr	r3, [r3, #32]
 8000774:	494b      	ldr	r1, [pc, #300]	; (80008a4 <config_pin+0x584>)
 8000776:	68ba      	ldr	r2, [r7, #8]
 8000778:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800077c:	3201      	adds	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	43d2      	mvns	r2, r2
 8000786:	401a      	ands	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6a1b      	ldr	r3, [r3, #32]
 8000790:	4944      	ldr	r1, [pc, #272]	; (80008a4 <config_pin+0x584>)
 8000792:	68ba      	ldr	r2, [r7, #8]
 8000794:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000798:	3202      	adds	r2, #2
 800079a:	2101      	movs	r1, #1
 800079c:	fa01 f202 	lsl.w	r2, r1, r2
 80007a0:	431a      	orrs	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6a1b      	ldr	r3, [r3, #32]
 80007aa:	493e      	ldr	r1, [pc, #248]	; (80008a4 <config_pin+0x584>)
 80007ac:	68ba      	ldr	r2, [r7, #8]
 80007ae:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007b2:	3203      	adds	r2, #3
 80007b4:	2101      	movs	r1, #1
 80007b6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ba:	43d2      	mvns	r2, r2
 80007bc:	401a      	ands	r2, r3
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	621a      	str	r2, [r3, #32]
                    break;
 80007c2:	f000 bdec 	b.w	800139e <config_pin+0x107e>

                case (AF5):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6a1b      	ldr	r3, [r3, #32]
 80007ca:	4936      	ldr	r1, [pc, #216]	; (80008a4 <config_pin+0x584>)
 80007cc:	68ba      	ldr	r2, [r7, #8]
 80007ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007d2:	2101      	movs	r1, #1
 80007d4:	fa01 f202 	lsl.w	r2, r1, r2
 80007d8:	431a      	orrs	r2, r3
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	6a1b      	ldr	r3, [r3, #32]
 80007e2:	4930      	ldr	r1, [pc, #192]	; (80008a4 <config_pin+0x584>)
 80007e4:	68ba      	ldr	r2, [r7, #8]
 80007e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007ea:	3201      	adds	r2, #1
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	43d2      	mvns	r2, r2
 80007f4:	401a      	ands	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6a1b      	ldr	r3, [r3, #32]
 80007fe:	4929      	ldr	r1, [pc, #164]	; (80008a4 <config_pin+0x584>)
 8000800:	68ba      	ldr	r2, [r7, #8]
 8000802:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000806:	3202      	adds	r2, #2
 8000808:	2101      	movs	r1, #1
 800080a:	fa01 f202 	lsl.w	r2, r1, r2
 800080e:	431a      	orrs	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	6a1b      	ldr	r3, [r3, #32]
 8000818:	4922      	ldr	r1, [pc, #136]	; (80008a4 <config_pin+0x584>)
 800081a:	68ba      	ldr	r2, [r7, #8]
 800081c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000820:	3203      	adds	r2, #3
 8000822:	2101      	movs	r1, #1
 8000824:	fa01 f202 	lsl.w	r2, r1, r2
 8000828:	43d2      	mvns	r2, r2
 800082a:	401a      	ands	r2, r3
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	621a      	str	r2, [r3, #32]
                    break;
 8000830:	f000 bdb5 	b.w	800139e <config_pin+0x107e>

                case (AF6):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	6a1b      	ldr	r3, [r3, #32]
 8000838:	491a      	ldr	r1, [pc, #104]	; (80008a4 <config_pin+0x584>)
 800083a:	68ba      	ldr	r2, [r7, #8]
 800083c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000840:	2101      	movs	r1, #1
 8000842:	fa01 f202 	lsl.w	r2, r1, r2
 8000846:	43d2      	mvns	r2, r2
 8000848:	401a      	ands	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6a1b      	ldr	r3, [r3, #32]
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <config_pin+0x584>)
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800085a:	3201      	adds	r2, #1
 800085c:	2101      	movs	r1, #1
 800085e:	fa01 f202 	lsl.w	r2, r1, r2
 8000862:	431a      	orrs	r2, r3
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	6a1b      	ldr	r3, [r3, #32]
 800086c:	490d      	ldr	r1, [pc, #52]	; (80008a4 <config_pin+0x584>)
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000874:	3202      	adds	r2, #2
 8000876:	2101      	movs	r1, #1
 8000878:	fa01 f202 	lsl.w	r2, r1, r2
 800087c:	431a      	orrs	r2, r3
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	6a1b      	ldr	r3, [r3, #32]
 8000886:	4907      	ldr	r1, [pc, #28]	; (80008a4 <config_pin+0x584>)
 8000888:	68ba      	ldr	r2, [r7, #8]
 800088a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800088e:	3203      	adds	r2, #3
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	43d2      	mvns	r2, r2
 8000898:	401a      	ands	r2, r3
 800089a:	68fb      	ldr	r3, [r7, #12]
 800089c:	621a      	str	r2, [r3, #32]
                    break;
 800089e:	f000 bd7e 	b.w	800139e <config_pin+0x107e>
 80008a2:	bf00      	nop
 80008a4:	20000040 	.word	0x20000040

                case (AF7):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	6a1b      	ldr	r3, [r3, #32]
 80008ac:	49a3      	ldr	r1, [pc, #652]	; (8000b3c <config_pin+0x81c>)
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008b4:	2101      	movs	r1, #1
 80008b6:	fa01 f202 	lsl.w	r2, r1, r2
 80008ba:	431a      	orrs	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	6a1b      	ldr	r3, [r3, #32]
 80008c4:	499d      	ldr	r1, [pc, #628]	; (8000b3c <config_pin+0x81c>)
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008cc:	3201      	adds	r2, #1
 80008ce:	2101      	movs	r1, #1
 80008d0:	fa01 f202 	lsl.w	r2, r1, r2
 80008d4:	431a      	orrs	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	6a1b      	ldr	r3, [r3, #32]
 80008de:	4997      	ldr	r1, [pc, #604]	; (8000b3c <config_pin+0x81c>)
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008e6:	3202      	adds	r2, #2
 80008e8:	2101      	movs	r1, #1
 80008ea:	fa01 f202 	lsl.w	r2, r1, r2
 80008ee:	431a      	orrs	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4990      	ldr	r1, [pc, #576]	; (8000b3c <config_pin+0x81c>)
 80008fa:	68ba      	ldr	r2, [r7, #8]
 80008fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000900:	3203      	adds	r2, #3
 8000902:	2101      	movs	r1, #1
 8000904:	fa01 f202 	lsl.w	r2, r1, r2
 8000908:	43d2      	mvns	r2, r2
 800090a:	401a      	ands	r2, r3
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	621a      	str	r2, [r3, #32]
                    break;
 8000910:	f000 bd45 	b.w	800139e <config_pin+0x107e>

                case (AF8):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	6a1b      	ldr	r3, [r3, #32]
 8000918:	4988      	ldr	r1, [pc, #544]	; (8000b3c <config_pin+0x81c>)
 800091a:	68ba      	ldr	r2, [r7, #8]
 800091c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000920:	2101      	movs	r1, #1
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	43d2      	mvns	r2, r2
 8000928:	401a      	ands	r2, r3
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	4982      	ldr	r1, [pc, #520]	; (8000b3c <config_pin+0x81c>)
 8000934:	68ba      	ldr	r2, [r7, #8]
 8000936:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800093a:	3201      	adds	r2, #1
 800093c:	2101      	movs	r1, #1
 800093e:	fa01 f202 	lsl.w	r2, r1, r2
 8000942:	43d2      	mvns	r2, r2
 8000944:	401a      	ands	r2, r3
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	6a1b      	ldr	r3, [r3, #32]
 800094e:	497b      	ldr	r1, [pc, #492]	; (8000b3c <config_pin+0x81c>)
 8000950:	68ba      	ldr	r2, [r7, #8]
 8000952:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000956:	3202      	adds	r2, #2
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	43d2      	mvns	r2, r2
 8000960:	401a      	ands	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	6a1b      	ldr	r3, [r3, #32]
 800096a:	4974      	ldr	r1, [pc, #464]	; (8000b3c <config_pin+0x81c>)
 800096c:	68ba      	ldr	r2, [r7, #8]
 800096e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000972:	3203      	adds	r2, #3
 8000974:	2101      	movs	r1, #1
 8000976:	fa01 f202 	lsl.w	r2, r1, r2
 800097a:	431a      	orrs	r2, r3
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	621a      	str	r2, [r3, #32]
                    break;
 8000980:	f000 bd0d 	b.w	800139e <config_pin+0x107e>

                case (AF9):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	6a1b      	ldr	r3, [r3, #32]
 8000988:	496c      	ldr	r1, [pc, #432]	; (8000b3c <config_pin+0x81c>)
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000990:	2101      	movs	r1, #1
 8000992:	fa01 f202 	lsl.w	r2, r1, r2
 8000996:	431a      	orrs	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	6a1b      	ldr	r3, [r3, #32]
 80009a0:	4966      	ldr	r1, [pc, #408]	; (8000b3c <config_pin+0x81c>)
 80009a2:	68ba      	ldr	r2, [r7, #8]
 80009a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009a8:	3201      	adds	r2, #1
 80009aa:	2101      	movs	r1, #1
 80009ac:	fa01 f202 	lsl.w	r2, r1, r2
 80009b0:	43d2      	mvns	r2, r2
 80009b2:	401a      	ands	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	6a1b      	ldr	r3, [r3, #32]
 80009bc:	495f      	ldr	r1, [pc, #380]	; (8000b3c <config_pin+0x81c>)
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009c4:	3202      	adds	r2, #2
 80009c6:	2101      	movs	r1, #1
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	43d2      	mvns	r2, r2
 80009ce:	401a      	ands	r2, r3
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4958      	ldr	r1, [pc, #352]	; (8000b3c <config_pin+0x81c>)
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009e0:	3203      	adds	r2, #3
 80009e2:	2101      	movs	r1, #1
 80009e4:	fa01 f202 	lsl.w	r2, r1, r2
 80009e8:	431a      	orrs	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	621a      	str	r2, [r3, #32]
                    break;
 80009ee:	f000 bcd6 	b.w	800139e <config_pin+0x107e>

                case (AF10):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	6a1b      	ldr	r3, [r3, #32]
 80009f6:	4951      	ldr	r1, [pc, #324]	; (8000b3c <config_pin+0x81c>)
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009fe:	2101      	movs	r1, #1
 8000a00:	fa01 f202 	lsl.w	r2, r1, r2
 8000a04:	43d2      	mvns	r2, r2
 8000a06:	401a      	ands	r2, r3
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	494a      	ldr	r1, [pc, #296]	; (8000b3c <config_pin+0x81c>)
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a18:	3201      	adds	r2, #1
 8000a1a:	2101      	movs	r1, #1
 8000a1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a20:	431a      	orrs	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	6a1b      	ldr	r3, [r3, #32]
 8000a2a:	4944      	ldr	r1, [pc, #272]	; (8000b3c <config_pin+0x81c>)
 8000a2c:	68ba      	ldr	r2, [r7, #8]
 8000a2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a32:	3202      	adds	r2, #2
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3a:	43d2      	mvns	r2, r2
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6a1b      	ldr	r3, [r3, #32]
 8000a46:	493d      	ldr	r1, [pc, #244]	; (8000b3c <config_pin+0x81c>)
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a4e:	3203      	adds	r2, #3
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	431a      	orrs	r2, r3
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	621a      	str	r2, [r3, #32]
                    break;
 8000a5c:	f000 bc9f 	b.w	800139e <config_pin+0x107e>

                case (AF11):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	6a1b      	ldr	r3, [r3, #32]
 8000a64:	4935      	ldr	r1, [pc, #212]	; (8000b3c <config_pin+0x81c>)
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a72:	431a      	orrs	r2, r3
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6a1b      	ldr	r3, [r3, #32]
 8000a7c:	492f      	ldr	r1, [pc, #188]	; (8000b3c <config_pin+0x81c>)
 8000a7e:	68ba      	ldr	r2, [r7, #8]
 8000a80:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a84:	3201      	adds	r2, #1
 8000a86:	2101      	movs	r1, #1
 8000a88:	fa01 f202 	lsl.w	r2, r1, r2
 8000a8c:	431a      	orrs	r2, r3
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	6a1b      	ldr	r3, [r3, #32]
 8000a96:	4929      	ldr	r1, [pc, #164]	; (8000b3c <config_pin+0x81c>)
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a9e:	3202      	adds	r2, #2
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa6:	43d2      	mvns	r2, r2
 8000aa8:	401a      	ands	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4922      	ldr	r1, [pc, #136]	; (8000b3c <config_pin+0x81c>)
 8000ab4:	68ba      	ldr	r2, [r7, #8]
 8000ab6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000aba:	3203      	adds	r2, #3
 8000abc:	2101      	movs	r1, #1
 8000abe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	621a      	str	r2, [r3, #32]
                    break;
 8000ac8:	f000 bc69 	b.w	800139e <config_pin+0x107e>

                case (AF12):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	6a1b      	ldr	r3, [r3, #32]
 8000ad0:	491a      	ldr	r1, [pc, #104]	; (8000b3c <config_pin+0x81c>)
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ad8:	2101      	movs	r1, #1
 8000ada:	fa01 f202 	lsl.w	r2, r1, r2
 8000ade:	43d2      	mvns	r2, r2
 8000ae0:	401a      	ands	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	6a1b      	ldr	r3, [r3, #32]
 8000aea:	4914      	ldr	r1, [pc, #80]	; (8000b3c <config_pin+0x81c>)
 8000aec:	68ba      	ldr	r2, [r7, #8]
 8000aee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000af2:	3201      	adds	r2, #1
 8000af4:	2101      	movs	r1, #1
 8000af6:	fa01 f202 	lsl.w	r2, r1, r2
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	401a      	ands	r2, r3
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	6a1b      	ldr	r3, [r3, #32]
 8000b06:	490d      	ldr	r1, [pc, #52]	; (8000b3c <config_pin+0x81c>)
 8000b08:	68ba      	ldr	r2, [r7, #8]
 8000b0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b0e:	3202      	adds	r2, #2
 8000b10:	2101      	movs	r1, #1
 8000b12:	fa01 f202 	lsl.w	r2, r1, r2
 8000b16:	431a      	orrs	r2, r3
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	6a1b      	ldr	r3, [r3, #32]
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <config_pin+0x81c>)
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b28:	3203      	adds	r2, #3
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000b30:	431a      	orrs	r2, r3
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	621a      	str	r2, [r3, #32]
                    break;
 8000b36:	f000 bc32 	b.w	800139e <config_pin+0x107e>
 8000b3a:	bf00      	nop
 8000b3c:	20000040 	.word	0x20000040

                case (AF13):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	6a1b      	ldr	r3, [r3, #32]
 8000b44:	4999      	ldr	r1, [pc, #612]	; (8000dac <config_pin+0xa8c>)
 8000b46:	68ba      	ldr	r2, [r7, #8]
 8000b48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b52:	431a      	orrs	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	621a      	str	r2, [r3, #32]
                    port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	6a1b      	ldr	r3, [r3, #32]
 8000b5c:	4993      	ldr	r1, [pc, #588]	; (8000dac <config_pin+0xa8c>)
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b64:	3201      	adds	r2, #1
 8000b66:	2101      	movs	r1, #1
 8000b68:	fa01 f202 	lsl.w	r2, r1, r2
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	498c      	ldr	r1, [pc, #560]	; (8000dac <config_pin+0xa8c>)
 8000b7a:	68ba      	ldr	r2, [r7, #8]
 8000b7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b80:	3202      	adds	r2, #2
 8000b82:	2101      	movs	r1, #1
 8000b84:	fa01 f202 	lsl.w	r2, r1, r2
 8000b88:	431a      	orrs	r2, r3
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	6a1b      	ldr	r3, [r3, #32]
 8000b92:	4986      	ldr	r1, [pc, #536]	; (8000dac <config_pin+0xa8c>)
 8000b94:	68ba      	ldr	r2, [r7, #8]
 8000b96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b9a:	3203      	adds	r2, #3
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba2:	431a      	orrs	r2, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	621a      	str	r2, [r3, #32]
                    break;
 8000ba8:	e3f9      	b.n	800139e <config_pin+0x107e>

                case (AF14):
                    port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	497f      	ldr	r1, [pc, #508]	; (8000dac <config_pin+0xa8c>)
 8000bb0:	68ba      	ldr	r2, [r7, #8]
 8000bb2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bbc:	43d2      	mvns	r2, r2
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	6a1b      	ldr	r3, [r3, #32]
 8000bc8:	4978      	ldr	r1, [pc, #480]	; (8000dac <config_pin+0xa8c>)
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bd0:	3201      	adds	r2, #1
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6a1b      	ldr	r3, [r3, #32]
 8000be2:	4972      	ldr	r1, [pc, #456]	; (8000dac <config_pin+0xa8c>)
 8000be4:	68ba      	ldr	r2, [r7, #8]
 8000be6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bea:	3202      	adds	r2, #2
 8000bec:	2101      	movs	r1, #1
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	6a1b      	ldr	r3, [r3, #32]
 8000bfc:	496b      	ldr	r1, [pc, #428]	; (8000dac <config_pin+0xa8c>)
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c04:	3203      	adds	r2, #3
 8000c06:	2101      	movs	r1, #1
 8000c08:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	621a      	str	r2, [r3, #32]
                    break;
 8000c12:	e3c4      	b.n	800139e <config_pin+0x107e>

                case (AF15):
                    port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4964      	ldr	r1, [pc, #400]	; (8000dac <config_pin+0xa8c>)
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c20:	2101      	movs	r1, #1
 8000c22:	fa01 f202 	lsl.w	r2, r1, r2
 8000c26:	431a      	orrs	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6a1b      	ldr	r3, [r3, #32]
 8000c30:	495e      	ldr	r1, [pc, #376]	; (8000dac <config_pin+0xa8c>)
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c38:	3201      	adds	r2, #1
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c40:	431a      	orrs	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	6a1b      	ldr	r3, [r3, #32]
 8000c4a:	4958      	ldr	r1, [pc, #352]	; (8000dac <config_pin+0xa8c>)
 8000c4c:	68ba      	ldr	r2, [r7, #8]
 8000c4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c52:	3202      	adds	r2, #2
 8000c54:	2101      	movs	r1, #1
 8000c56:	fa01 f202 	lsl.w	r2, r1, r2
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	621a      	str	r2, [r3, #32]
                    port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6a1b      	ldr	r3, [r3, #32]
 8000c64:	4951      	ldr	r1, [pc, #324]	; (8000dac <config_pin+0xa8c>)
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c6c:	3203      	adds	r2, #3
 8000c6e:	2101      	movs	r1, #1
 8000c70:	fa01 f202 	lsl.w	r2, r1, r2
 8000c74:	431a      	orrs	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	621a      	str	r2, [r3, #32]
                    break;
 8000c7a:	bf00      	nop
 8000c7c:	e38f      	b.n	800139e <config_pin+0x107e>
            }
        }

        else { // High Register, AFRH
            switch(alt_func) {
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	2b0f      	cmp	r3, #15
 8000c82:	f200 838c 	bhi.w	800139e <config_pin+0x107e>
 8000c86:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <config_pin+0x96c>)
 8000c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8c:	08000ccd 	.word	0x08000ccd
 8000c90:	08000d3d 	.word	0x08000d3d
 8000c94:	08000db1 	.word	0x08000db1
 8000c98:	08000e1f 	.word	0x08000e1f
 8000c9c:	08000e8b 	.word	0x08000e8b
 8000ca0:	08000ef9 	.word	0x08000ef9
 8000ca4:	08000f65 	.word	0x08000f65
 8000ca8:	08000fd1 	.word	0x08000fd1
 8000cac:	08001041 	.word	0x08001041
 8000cb0:	080010af 	.word	0x080010af
 8000cb4:	0800111b 	.word	0x0800111b
 8000cb8:	08001187 	.word	0x08001187
 8000cbc:	080011f1 	.word	0x080011f1
 8000cc0:	0800125d 	.word	0x0800125d
 8000cc4:	080012cd 	.word	0x080012cd
 8000cc8:	08001337 	.word	0x08001337

                case (AF0):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cd0:	4936      	ldr	r1, [pc, #216]	; (8000dac <config_pin+0xa8c>)
 8000cd2:	68ba      	ldr	r2, [r7, #8]
 8000cd4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fa01 f202 	lsl.w	r2, r1, r2
 8000cde:	43d2      	mvns	r2, r2
 8000ce0:	401a      	ands	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cea:	4930      	ldr	r1, [pc, #192]	; (8000dac <config_pin+0xa8c>)
 8000cec:	68ba      	ldr	r2, [r7, #8]
 8000cee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cf2:	3201      	adds	r2, #1
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cfa:	43d2      	mvns	r2, r2
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	4929      	ldr	r1, [pc, #164]	; (8000dac <config_pin+0xa8c>)
 8000d08:	68ba      	ldr	r2, [r7, #8]
 8000d0a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d0e:	3202      	adds	r2, #2
 8000d10:	2101      	movs	r1, #1
 8000d12:	fa01 f202 	lsl.w	r2, r1, r2
 8000d16:	43d2      	mvns	r2, r2
 8000d18:	401a      	ands	r2, r3
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d22:	4922      	ldr	r1, [pc, #136]	; (8000dac <config_pin+0xa8c>)
 8000d24:	68ba      	ldr	r2, [r7, #8]
 8000d26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d2a:	3203      	adds	r2, #3
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d32:	43d2      	mvns	r2, r2
 8000d34:	401a      	ands	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000d3a:	e330      	b.n	800139e <config_pin+0x107e>

                case (AF1):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d40:	491a      	ldr	r1, [pc, #104]	; (8000dac <config_pin+0xa8c>)
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d48:	2101      	movs	r1, #1
 8000d4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d4e:	431a      	orrs	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d58:	4914      	ldr	r1, [pc, #80]	; (8000dac <config_pin+0xa8c>)
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d60:	3201      	adds	r2, #1
 8000d62:	2101      	movs	r1, #1
 8000d64:	fa01 f202 	lsl.w	r2, r1, r2
 8000d68:	43d2      	mvns	r2, r2
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d74:	490d      	ldr	r1, [pc, #52]	; (8000dac <config_pin+0xa8c>)
 8000d76:	68ba      	ldr	r2, [r7, #8]
 8000d78:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d7c:	3202      	adds	r2, #2
 8000d7e:	2101      	movs	r1, #1
 8000d80:	fa01 f202 	lsl.w	r2, r1, r2
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d90:	4906      	ldr	r1, [pc, #24]	; (8000dac <config_pin+0xa8c>)
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d98:	3203      	adds	r2, #3
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	43d2      	mvns	r2, r2
 8000da2:	401a      	ands	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000da8:	e2f9      	b.n	800139e <config_pin+0x107e>
 8000daa:	bf00      	nop
 8000dac:	20000040 	.word	0x20000040

                case (AF2):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db4:	49a1      	ldr	r1, [pc, #644]	; (800103c <config_pin+0xd1c>)
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	401a      	ands	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dce:	499b      	ldr	r1, [pc, #620]	; (800103c <config_pin+0xd1c>)
 8000dd0:	68ba      	ldr	r2, [r7, #8]
 8000dd2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dd6:	3201      	adds	r2, #1
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	431a      	orrs	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de8:	4994      	ldr	r1, [pc, #592]	; (800103c <config_pin+0xd1c>)
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000df0:	3202      	adds	r2, #2
 8000df2:	2101      	movs	r1, #1
 8000df4:	fa01 f202 	lsl.w	r2, r1, r2
 8000df8:	43d2      	mvns	r2, r2
 8000dfa:	401a      	ands	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e04:	498d      	ldr	r1, [pc, #564]	; (800103c <config_pin+0xd1c>)
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e0c:	3203      	adds	r2, #3
 8000e0e:	2101      	movs	r1, #1
 8000e10:	fa01 f202 	lsl.w	r2, r1, r2
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000e1c:	e2bf      	b.n	800139e <config_pin+0x107e>

                case (AF3):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e22:	4986      	ldr	r1, [pc, #536]	; (800103c <config_pin+0xd1c>)
 8000e24:	68ba      	ldr	r2, [r7, #8]
 8000e26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	431a      	orrs	r2, r3
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	4980      	ldr	r1, [pc, #512]	; (800103c <config_pin+0xd1c>)
 8000e3c:	68ba      	ldr	r2, [r7, #8]
 8000e3e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e42:	3201      	adds	r2, #1
 8000e44:	2101      	movs	r1, #1
 8000e46:	fa01 f202 	lsl.w	r2, r1, r2
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e54:	4979      	ldr	r1, [pc, #484]	; (800103c <config_pin+0xd1c>)
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e5c:	3202      	adds	r2, #2
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fa01 f202 	lsl.w	r2, r1, r2
 8000e64:	43d2      	mvns	r2, r2
 8000e66:	401a      	ands	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e70:	4972      	ldr	r1, [pc, #456]	; (800103c <config_pin+0xd1c>)
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e78:	3203      	adds	r2, #3
 8000e7a:	2101      	movs	r1, #1
 8000e7c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e80:	43d2      	mvns	r2, r2
 8000e82:	401a      	ands	r2, r3
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000e88:	e289      	b.n	800139e <config_pin+0x107e>

                case (AF4):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e8e:	496b      	ldr	r1, [pc, #428]	; (800103c <config_pin+0xd1c>)
 8000e90:	68ba      	ldr	r2, [r7, #8]
 8000e92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e96:	2101      	movs	r1, #1
 8000e98:	fa01 f202 	lsl.w	r2, r1, r2
 8000e9c:	43d2      	mvns	r2, r2
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ea8:	4964      	ldr	r1, [pc, #400]	; (800103c <config_pin+0xd1c>)
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000eb0:	3201      	adds	r2, #1
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec4:	495d      	ldr	r1, [pc, #372]	; (800103c <config_pin+0xd1c>)
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ecc:	3202      	adds	r2, #2
 8000ece:	2101      	movs	r1, #1
 8000ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ed4:	431a      	orrs	r2, r3
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ede:	4957      	ldr	r1, [pc, #348]	; (800103c <config_pin+0xd1c>)
 8000ee0:	68ba      	ldr	r2, [r7, #8]
 8000ee2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ee6:	3203      	adds	r2, #3
 8000ee8:	2101      	movs	r1, #1
 8000eea:	fa01 f202 	lsl.w	r2, r1, r2
 8000eee:	43d2      	mvns	r2, r2
 8000ef0:	401a      	ands	r2, r3
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000ef6:	e252      	b.n	800139e <config_pin+0x107e>

                case (AF5):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efc:	494f      	ldr	r1, [pc, #316]	; (800103c <config_pin+0xd1c>)
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f14:	4949      	ldr	r1, [pc, #292]	; (800103c <config_pin+0xd1c>)
 8000f16:	68ba      	ldr	r2, [r7, #8]
 8000f18:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f1c:	3201      	adds	r2, #1
 8000f1e:	2101      	movs	r1, #1
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	43d2      	mvns	r2, r2
 8000f26:	401a      	ands	r2, r3
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f30:	4942      	ldr	r1, [pc, #264]	; (800103c <config_pin+0xd1c>)
 8000f32:	68ba      	ldr	r2, [r7, #8]
 8000f34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f38:	3202      	adds	r2, #2
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	493c      	ldr	r1, [pc, #240]	; (800103c <config_pin+0xd1c>)
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f52:	3203      	adds	r2, #3
 8000f54:	2101      	movs	r1, #1
 8000f56:	fa01 f202 	lsl.w	r2, r1, r2
 8000f5a:	43d2      	mvns	r2, r2
 8000f5c:	401a      	ands	r2, r3
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000f62:	e21c      	b.n	800139e <config_pin+0x107e>

                case (AF6):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f68:	4934      	ldr	r1, [pc, #208]	; (800103c <config_pin+0xd1c>)
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f70:	2101      	movs	r1, #1
 8000f72:	fa01 f202 	lsl.w	r2, r1, r2
 8000f76:	43d2      	mvns	r2, r2
 8000f78:	401a      	ands	r2, r3
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f82:	492e      	ldr	r1, [pc, #184]	; (800103c <config_pin+0xd1c>)
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f8a:	3201      	adds	r2, #1
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f92:	431a      	orrs	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f9c:	4927      	ldr	r1, [pc, #156]	; (800103c <config_pin+0xd1c>)
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fa4:	3202      	adds	r2, #2
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	431a      	orrs	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	4921      	ldr	r1, [pc, #132]	; (800103c <config_pin+0xd1c>)
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fbe:	3203      	adds	r2, #3
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc6:	43d2      	mvns	r2, r2
 8000fc8:	401a      	ands	r2, r3
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8000fce:	e1e6      	b.n	800139e <config_pin+0x107e>

                case (AF7):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	4919      	ldr	r1, [pc, #100]	; (800103c <config_pin+0xd1c>)
 8000fd6:	68ba      	ldr	r2, [r7, #8]
 8000fd8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fdc:	2101      	movs	r1, #1
 8000fde:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe2:	431a      	orrs	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fec:	4913      	ldr	r1, [pc, #76]	; (800103c <config_pin+0xd1c>)
 8000fee:	68ba      	ldr	r2, [r7, #8]
 8000ff0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <config_pin+0xd1c>)
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800100e:	3202      	adds	r2, #2
 8001010:	2101      	movs	r1, #1
 8001012:	fa01 f202 	lsl.w	r2, r1, r2
 8001016:	431a      	orrs	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001020:	4906      	ldr	r1, [pc, #24]	; (800103c <config_pin+0xd1c>)
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001028:	3203      	adds	r2, #3
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	43d2      	mvns	r2, r2
 8001032:	401a      	ands	r2, r3
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8001038:	e1b1      	b.n	800139e <config_pin+0x107e>
 800103a:	bf00      	nop
 800103c:	20000040 	.word	0x20000040

                case (AF8):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	49a0      	ldr	r1, [pc, #640]	; (80012c8 <config_pin+0xfa8>)
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800104c:	2101      	movs	r1, #1
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	43d2      	mvns	r2, r2
 8001054:	401a      	ands	r2, r3
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105e:	499a      	ldr	r1, [pc, #616]	; (80012c8 <config_pin+0xfa8>)
 8001060:	68ba      	ldr	r2, [r7, #8]
 8001062:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001066:	3201      	adds	r2, #1
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	43d2      	mvns	r2, r2
 8001070:	401a      	ands	r2, r3
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107a:	4993      	ldr	r1, [pc, #588]	; (80012c8 <config_pin+0xfa8>)
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001082:	3202      	adds	r2, #2
 8001084:	2101      	movs	r1, #1
 8001086:	fa01 f202 	lsl.w	r2, r1, r2
 800108a:	43d2      	mvns	r2, r2
 800108c:	401a      	ands	r2, r3
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001096:	498c      	ldr	r1, [pc, #560]	; (80012c8 <config_pin+0xfa8>)
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800109e:	3203      	adds	r2, #3
 80010a0:	2101      	movs	r1, #1
 80010a2:	fa01 f202 	lsl.w	r2, r1, r2
 80010a6:	431a      	orrs	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80010ac:	e177      	b.n	800139e <config_pin+0x107e>

                case (AF9):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b2:	4985      	ldr	r1, [pc, #532]	; (80012c8 <config_pin+0xfa8>)
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010ba:	2101      	movs	r1, #1
 80010bc:	fa01 f202 	lsl.w	r2, r1, r2
 80010c0:	431a      	orrs	r2, r3
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ca:	497f      	ldr	r1, [pc, #508]	; (80012c8 <config_pin+0xfa8>)
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010d2:	3201      	adds	r2, #1
 80010d4:	2101      	movs	r1, #1
 80010d6:	fa01 f202 	lsl.w	r2, r1, r2
 80010da:	43d2      	mvns	r2, r2
 80010dc:	401a      	ands	r2, r3
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e6:	4978      	ldr	r1, [pc, #480]	; (80012c8 <config_pin+0xfa8>)
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010ee:	3202      	adds	r2, #2
 80010f0:	2101      	movs	r1, #1
 80010f2:	fa01 f202 	lsl.w	r2, r1, r2
 80010f6:	43d2      	mvns	r2, r2
 80010f8:	401a      	ands	r2, r3
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	4971      	ldr	r1, [pc, #452]	; (80012c8 <config_pin+0xfa8>)
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800110a:	3203      	adds	r2, #3
 800110c:	2101      	movs	r1, #1
 800110e:	fa01 f202 	lsl.w	r2, r1, r2
 8001112:	431a      	orrs	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8001118:	e141      	b.n	800139e <config_pin+0x107e>

                case (AF10):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	496a      	ldr	r1, [pc, #424]	; (80012c8 <config_pin+0xfa8>)
 8001120:	68ba      	ldr	r2, [r7, #8]
 8001122:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	43d2      	mvns	r2, r2
 800112e:	401a      	ands	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001138:	4963      	ldr	r1, [pc, #396]	; (80012c8 <config_pin+0xfa8>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001140:	3201      	adds	r2, #1
 8001142:	2101      	movs	r1, #1
 8001144:	fa01 f202 	lsl.w	r2, r1, r2
 8001148:	431a      	orrs	r2, r3
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001152:	495d      	ldr	r1, [pc, #372]	; (80012c8 <config_pin+0xfa8>)
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800115a:	3202      	adds	r2, #2
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	43d2      	mvns	r2, r2
 8001164:	401a      	ands	r2, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4956      	ldr	r1, [pc, #344]	; (80012c8 <config_pin+0xfa8>)
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001176:	3203      	adds	r2, #3
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	431a      	orrs	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8001184:	e10b      	b.n	800139e <config_pin+0x107e>

                case (AF11):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118a:	494f      	ldr	r1, [pc, #316]	; (80012c8 <config_pin+0xfa8>)
 800118c:	68ba      	ldr	r2, [r7, #8]
 800118e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001192:	2101      	movs	r1, #1
 8001194:	fa01 f202 	lsl.w	r2, r1, r2
 8001198:	431a      	orrs	r2, r3
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a2:	4949      	ldr	r1, [pc, #292]	; (80012c8 <config_pin+0xfa8>)
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011aa:	3201      	adds	r2, #1
 80011ac:	2101      	movs	r1, #1
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011bc:	4942      	ldr	r1, [pc, #264]	; (80012c8 <config_pin+0xfa8>)
 80011be:	68ba      	ldr	r2, [r7, #8]
 80011c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011c4:	3202      	adds	r2, #2
 80011c6:	2101      	movs	r1, #1
 80011c8:	fa01 f202 	lsl.w	r2, r1, r2
 80011cc:	43d2      	mvns	r2, r2
 80011ce:	401a      	ands	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d8:	493b      	ldr	r1, [pc, #236]	; (80012c8 <config_pin+0xfa8>)
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011e0:	3203      	adds	r2, #3
 80011e2:	2101      	movs	r1, #1
 80011e4:	fa01 f202 	lsl.w	r2, r1, r2
 80011e8:	431a      	orrs	r2, r3
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80011ee:	e0d6      	b.n	800139e <config_pin+0x107e>

                case (AF12):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f4:	4934      	ldr	r1, [pc, #208]	; (80012c8 <config_pin+0xfa8>)
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011fc:	2101      	movs	r1, #1
 80011fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001202:	43d2      	mvns	r2, r2
 8001204:	401a      	ands	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120e:	492e      	ldr	r1, [pc, #184]	; (80012c8 <config_pin+0xfa8>)
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001216:	3201      	adds	r2, #1
 8001218:	2101      	movs	r1, #1
 800121a:	fa01 f202 	lsl.w	r2, r1, r2
 800121e:	43d2      	mvns	r2, r2
 8001220:	401a      	ands	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	4927      	ldr	r1, [pc, #156]	; (80012c8 <config_pin+0xfa8>)
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001232:	3202      	adds	r2, #2
 8001234:	2101      	movs	r1, #1
 8001236:	fa01 f202 	lsl.w	r2, r1, r2
 800123a:	431a      	orrs	r2, r3
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	4920      	ldr	r1, [pc, #128]	; (80012c8 <config_pin+0xfa8>)
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800124c:	3203      	adds	r2, #3
 800124e:	2101      	movs	r1, #1
 8001250:	fa01 f202 	lsl.w	r2, r1, r2
 8001254:	431a      	orrs	r2, r3
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 800125a:	e0a0      	b.n	800139e <config_pin+0x107e>

                case (AF13):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001260:	4919      	ldr	r1, [pc, #100]	; (80012c8 <config_pin+0xfa8>)
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f202 	lsl.w	r2, r1, r2
 800126e:	431a      	orrs	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	4913      	ldr	r1, [pc, #76]	; (80012c8 <config_pin+0xfa8>)
 800127a:	68ba      	ldr	r2, [r7, #8]
 800127c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001280:	3201      	adds	r2, #1
 8001282:	2101      	movs	r1, #1
 8001284:	fa01 f202 	lsl.w	r2, r1, r2
 8001288:	43d2      	mvns	r2, r2
 800128a:	401a      	ands	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001294:	490c      	ldr	r1, [pc, #48]	; (80012c8 <config_pin+0xfa8>)
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800129c:	3202      	adds	r2, #2
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f202 	lsl.w	r2, r1, r2
 80012a4:	431a      	orrs	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	4906      	ldr	r1, [pc, #24]	; (80012c8 <config_pin+0xfa8>)
 80012b0:	68ba      	ldr	r2, [r7, #8]
 80012b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012b6:	3203      	adds	r2, #3
 80012b8:	2101      	movs	r1, #1
 80012ba:	fa01 f202 	lsl.w	r2, r1, r2
 80012be:	431a      	orrs	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 80012c4:	e06b      	b.n	800139e <config_pin+0x107e>
 80012c6:	bf00      	nop
 80012c8:	20000040 	.word	0x20000040

                case (AF14):
                    port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	4936      	ldr	r1, [pc, #216]	; (80013ac <config_pin+0x108c>)
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012d8:	2101      	movs	r1, #1
 80012da:	fa01 f202 	lsl.w	r2, r1, r2
 80012de:	43d2      	mvns	r2, r2
 80012e0:	401a      	ands	r2, r3
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	4930      	ldr	r1, [pc, #192]	; (80013ac <config_pin+0x108c>)
 80012ec:	68ba      	ldr	r2, [r7, #8]
 80012ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012f2:	3201      	adds	r2, #1
 80012f4:	2101      	movs	r1, #1
 80012f6:	fa01 f202 	lsl.w	r2, r1, r2
 80012fa:	431a      	orrs	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	4929      	ldr	r1, [pc, #164]	; (80013ac <config_pin+0x108c>)
 8001306:	68ba      	ldr	r2, [r7, #8]
 8001308:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800130c:	3202      	adds	r2, #2
 800130e:	2101      	movs	r1, #1
 8001310:	fa01 f202 	lsl.w	r2, r1, r2
 8001314:	431a      	orrs	r2, r3
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131e:	4923      	ldr	r1, [pc, #140]	; (80013ac <config_pin+0x108c>)
 8001320:	68ba      	ldr	r2, [r7, #8]
 8001322:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001326:	3203      	adds	r2, #3
 8001328:	2101      	movs	r1, #1
 800132a:	fa01 f202 	lsl.w	r2, r1, r2
 800132e:	431a      	orrs	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 8001334:	e033      	b.n	800139e <config_pin+0x107e>

                case (AF15):
                    port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	491c      	ldr	r1, [pc, #112]	; (80013ac <config_pin+0x108c>)
 800133c:	68ba      	ldr	r2, [r7, #8]
 800133e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001342:	2101      	movs	r1, #1
 8001344:	fa01 f202 	lsl.w	r2, r1, r2
 8001348:	431a      	orrs	r2, r3
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001352:	4916      	ldr	r1, [pc, #88]	; (80013ac <config_pin+0x108c>)
 8001354:	68ba      	ldr	r2, [r7, #8]
 8001356:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800135a:	3201      	adds	r2, #1
 800135c:	2101      	movs	r1, #1
 800135e:	fa01 f202 	lsl.w	r2, r1, r2
 8001362:	431a      	orrs	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800136c:	490f      	ldr	r1, [pc, #60]	; (80013ac <config_pin+0x108c>)
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001374:	3202      	adds	r2, #2
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f202 	lsl.w	r2, r1, r2
 800137c:	431a      	orrs	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	625a      	str	r2, [r3, #36]	; 0x24
                    port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	4909      	ldr	r1, [pc, #36]	; (80013ac <config_pin+0x108c>)
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800138e:	3203      	adds	r2, #3
 8001390:	2101      	movs	r1, #1
 8001392:	fa01 f202 	lsl.w	r2, r1, r2
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
                    break;
 800139c:	bf00      	nop
            }
        }
    }
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	20000040 	.word	0x20000040

080013b0 <gpio_port_config>:
 * @param myPins : GPIO pin numbers. Enter as an array.
 * @param numPins : The number of GPIO pins you want to configure.
 * @retval None
 * @example : gpio_port_config(myGPIO,(int []) {1, 2, 3, 5},4);
 */
void gpio_port_config(GPIO_TYPE gpio_type, int myPins[], int numPins) {
 80013b0:	b084      	sub	sp, #16
 80013b2:	b5b0      	push	{r4, r5, r7, lr}
 80013b4:	b084      	sub	sp, #16
 80013b6:	af02      	add	r7, sp, #8
 80013b8:	f107 0418 	add.w	r4, r7, #24
 80013bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (gpio_type.port==PORTA) {
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	4a25      	ldr	r2, [pc, #148]	; (8001458 <gpio_port_config+0xa8>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d105      	bne.n	80013d4 <gpio_port_config+0x24>
        GPIO_CLOCK_ENABLE_PORTA;
 80013c8:	4a24      	ldr	r2, [pc, #144]	; (800145c <gpio_port_config+0xac>)
 80013ca:	4b24      	ldr	r3, [pc, #144]	; (800145c <gpio_port_config+0xac>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f043 0301 	orr.w	r3, r3, #1
 80013d2:	6313      	str	r3, [r2, #48]	; 0x30
	}

    if (gpio_type.port==PORTB) {
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	4a22      	ldr	r2, [pc, #136]	; (8001460 <gpio_port_config+0xb0>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d105      	bne.n	80013e8 <gpio_port_config+0x38>
        GPIO_CLOCK_ENABLE_PORTB;
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <gpio_port_config+0xac>)
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <gpio_port_config+0xac>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f043 0302 	orr.w	r3, r3, #2
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
    }

    if (gpio_type.port==PORTC) {
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <gpio_port_config+0xb4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d105      	bne.n	80013fc <gpio_port_config+0x4c>
        GPIO_CLOCK_ENABLE_PORTC;
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <gpio_port_config+0xac>)
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <gpio_port_config+0xac>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f043 0304 	orr.w	r3, r3, #4
 80013fa:	6313      	str	r3, [r2, #48]	; 0x30
    }

    if (gpio_type.port==PORTD) {
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	4a1a      	ldr	r2, [pc, #104]	; (8001468 <gpio_port_config+0xb8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d105      	bne.n	8001410 <gpio_port_config+0x60>
        GPIO_CLOCK_ENABLE_PORTD;
 8001404:	4a15      	ldr	r2, [pc, #84]	; (800145c <gpio_port_config+0xac>)
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <gpio_port_config+0xac>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f043 0308 	orr.w	r3, r3, #8
 800140e:	6313      	str	r3, [r2, #48]	; 0x30
    }

    for (int i = 0; i<numPins; i++) {
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	e015      	b.n	8001442 <gpio_port_config+0x92>
        gpio_type.pin= myPins[i];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800141c:	4413      	add	r3, r2
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	61fb      	str	r3, [r7, #28]
        config_pin(gpio_type.port,gpio_type.pin,gpio_type.speed,gpio_type.mode, gpio_type.mode_type,gpio_type.alt_func);
 8001422:	69b8      	ldr	r0, [r7, #24]
 8001424:	69f9      	ldr	r1, [r7, #28]
 8001426:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001428:	6a3d      	ldr	r5, [r7, #32]
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	b29b      	uxth	r3, r3
 800142e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001430:	9201      	str	r2, [sp, #4]
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	462b      	mov	r3, r5
 8001436:	4622      	mov	r2, r4
 8001438:	f7fe ff72 	bl	8000320 <config_pin>
    for (int i = 0; i<numPins; i++) {
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001446:	429a      	cmp	r2, r3
 8001448:	dbe5      	blt.n	8001416 <gpio_port_config+0x66>
    }
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001454:	b004      	add	sp, #16
 8001456:	4770      	bx	lr
 8001458:	40020000 	.word	0x40020000
 800145c:	40023800 	.word	0x40023800
 8001460:	40020400 	.word	0x40020400
 8001464:	40020800 	.word	0x40020800
 8001468:	40020c00 	.word	0x40020c00

0800146c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001476:	4909      	ldr	r1, [pc, #36]	; (800149c <NVIC_EnableIRQ+0x30>)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	095b      	lsrs	r3, r3, #5
 800147e:	79fa      	ldrb	r2, [r7, #7]
 8001480:	f002 021f 	and.w	r2, r2, #31
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <I2C_enable>:
 */

#include "I2C_Library.h"


void I2C_enable() {
 80014a0:	b590      	push	{r4, r7, lr}
 80014a2:	b093      	sub	sp, #76	; 0x4c
 80014a4:	af06      	add	r7, sp, #24
	// I2C will not work unless the config_clock_50MHz(); is used before enabling I2C.
    int SCL = 6;
 80014a6:	2306      	movs	r3, #6
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    int SDA = 7;
 80014aa:	2307      	movs	r3, #7
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28

	// PORTB alternate mode setup pin 6 and 7
    GPIO_TYPE myI2C;
    myI2C.port = PORTB;
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <I2C_enable+0xa4>)
 80014b0:	607b      	str	r3, [r7, #4]
    myI2C.mode = ALT_MODE;
 80014b2:	2302      	movs	r3, #2
 80014b4:	60fb      	str	r3, [r7, #12]

    myI2C.speed = SPEED_LOW;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
    myI2C.alt_func = AF4;
 80014ba:	2304      	movs	r3, #4
 80014bc:	61fb      	str	r3, [r7, #28]
    gpio_port_config(myI2C,(int []) {SCL,SDA},2);
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
 80014c6:	2302      	movs	r3, #2
 80014c8:	9304      	str	r3, [sp, #16]
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	9303      	str	r3, [sp, #12]
 80014d0:	466c      	mov	r4, sp
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80014da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014e2:	f7ff ff65 	bl	80013b0 <gpio_port_config>

	// Enabling clock for I2C
    RCC->APB1ENR |=RCC_APB1ENR_I2C1EN;
 80014e6:	4a18      	ldr	r2, [pc, #96]	; (8001548 <I2C_enable+0xa8>)
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <I2C_enable+0xa8>)
 80014ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014f0:	6413      	str	r3, [r2, #64]	; 0x40


	// The APB clock frequency is 50 MHz.
    I2C1->CR2 |= 0b110010;
 80014f2:	4a16      	ldr	r2, [pc, #88]	; (800154c <I2C_enable+0xac>)
 80014f4:	4b15      	ldr	r3, [pc, #84]	; (800154c <I2C_enable+0xac>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 80014fc:	6053      	str	r3, [r2, #4]
	// Standard I2C master mode
    I2C1->CCR &= ~I2C_CCR_FS;
 80014fe:	4a13      	ldr	r2, [pc, #76]	; (800154c <I2C_enable+0xac>)
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <I2C_enable+0xac>)
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001508:	61d3      	str	r3, [r2, #28]
	// Clock control register as 100 kHZ for an APB frequency of 50 MHz.
	// (2*100khz)^-1 = RCC*(1/50Mhz)
    I2C1->CCR |= 250;
 800150a:	4a10      	ldr	r2, [pc, #64]	; (800154c <I2C_enable+0xac>)
 800150c:	4b0f      	ldr	r3, [pc, #60]	; (800154c <I2C_enable+0xac>)
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f043 03fa 	orr.w	r3, r3, #250	; 0xfa
 8001514:	61d3      	str	r3, [r2, #28]
	// Maximum rise time. In standard mode, the maximum SCL rise time is 1000ns. We have 50MHz apb freq
	// which is 20ns. 1000/20 +1 = 51
    I2C1->TRISE |= 51;
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <I2C_enable+0xac>)
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <I2C_enable+0xac>)
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8001520:	6213      	str	r3, [r2, #32]

	// Peripheral Enable
    I2C1->CR1 |= I2C_CR1_PE;
 8001522:	4a0a      	ldr	r2, [pc, #40]	; (800154c <I2C_enable+0xac>)
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <I2C_enable+0xac>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6013      	str	r3, [r2, #0]

	/* Interrupt Enabled for the I2C1 Error event */
    I2C1->CR2 = I2C_CR2_ITERREN;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <I2C_enable+0xac>)
 8001530:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001534:	605a      	str	r2, [r3, #4]
    NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001536:	2020      	movs	r0, #32
 8001538:	f7ff ff98 	bl	800146c <NVIC_EnableIRQ>
}
 800153c:	bf00      	nop
 800153e:	3734      	adds	r7, #52	; 0x34
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	40020400 	.word	0x40020400
 8001548:	40023800 	.word	0x40023800
 800154c:	40005400 	.word	0x40005400

08001550 <I2C1_ER_IRQHandler>:
/* Interrupt Service Routine for I2C1 Error event*/
void I2C1_ER_IRQHandler() {
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
    I2C1->SR1 &= ~I2C_SR1_AF;
 8001554:	4a08      	ldr	r2, [pc, #32]	; (8001578 <I2C1_ER_IRQHandler+0x28>)
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <I2C1_ER_IRQHandler+0x28>)
 8001558:	695b      	ldr	r3, [r3, #20]
 800155a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800155e:	6153      	str	r3, [r2, #20]
    I2C1->CR1 |= I2C_CR1_STOP;
 8001560:	4a05      	ldr	r2, [pc, #20]	; (8001578 <I2C1_ER_IRQHandler+0x28>)
 8001562:	4b05      	ldr	r3, [pc, #20]	; (8001578 <I2C1_ER_IRQHandler+0x28>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800156a:	6013      	str	r3, [r2, #0]
}
 800156c:	bf00      	nop
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40005400 	.word	0x40005400

0800157c <I2C_addressWrite>:


void I2C_addressWrite(uint8_t i2c_address) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]

    I2C1->DR = (i2c_address<<1) & 0b11111110; //lsb is 0 (Reset), therefore master is in transmitter mode
 8001586:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <I2C_addressWrite+0x3c>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b2db      	uxtb	r3, r3
 800158e:	6113      	str	r3, [r2, #16]

	// EV6
    while(!(I2C1->SR1 & I2C_SR1_ADDR)); // Wait for Received Address matched
 8001590:	bf00      	nop
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <I2C_addressWrite+0x3c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0302 	and.w	r3, r3, #2
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f9      	beq.n	8001592 <I2C_addressWrite+0x16>
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 800159e:	bf00      	nop
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <I2C_addressWrite+0x3c>)
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f9      	beq.n	80015a0 <I2C_addressWrite+0x24>
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40005400 	.word	0x40005400

080015bc <I2C_addressRead>:

void I2C_addressRead(uint8_t i2c_address) {
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = (i2c_address<<1) | 0b00000001; // LSB is 1 (Set), therefore master is in receiver mode
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <I2C_addressRead+0x40>)
 80015c8:	79fb      	ldrb	r3, [r7, #7]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6113      	str	r3, [r2, #16]

    while(!(I2C1->SR1 & I2C_SR1_ADDR)); // Wait for Received Address matched
 80015d2:	bf00      	nop
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <I2C_addressRead+0x40>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f003 0302 	and.w	r3, r3, #2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f9      	beq.n	80015d4 <I2C_addressRead+0x18>
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80015e0:	bf00      	nop
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <I2C_addressRead+0x40>)
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f9      	beq.n	80015e2 <I2C_addressRead+0x26>
	// Reading SR1 then SR2 clears ADDR register
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40005400 	.word	0x40005400

08001600 <I2C_data>:

void I2C_data(uint8_t i2c_data) {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = i2c_data;
 800160a:	4a08      	ldr	r2, [pc, #32]	; (800162c <I2C_data+0x2c>)
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	6113      	str	r3, [r2, #16]
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8001610:	bf00      	nop
 8001612:	4b06      	ldr	r3, [pc, #24]	; (800162c <I2C_data+0x2c>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f9      	beq.n	8001612 <I2C_data+0x12>
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40005400 	.word	0x40005400

08001630 <I2C_dataRead>:

uint8_t I2C_dataRead(void) {
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
		//uint16_t i2c_data = I2C1->DR;
    while(!(I2C1->SR1 & I2C_SR1_TXE));
 8001634:	bf00      	nop
 8001636:	4b07      	ldr	r3, [pc, #28]	; (8001654 <I2C_dataRead+0x24>)
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163e:	2b00      	cmp	r3, #0
 8001640:	d0f9      	beq.n	8001636 <I2C_dataRead+0x6>
    return (uint8_t) I2C1->DR;
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <I2C_dataRead+0x24>)
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	b2db      	uxtb	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40005400 	.word	0x40005400

08001658 <I2C_stop>:

void I2C_stop() {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
    while (!(I2C1->SR1 & I2C_SR1_BTF)); // Byte transfer finished succeeded
 800165c:	bf00      	nop
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <I2C_stop+0x28>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f9      	beq.n	800165e <I2C_stop+0x6>
    I2C1->CR1 |= I2C_CR1_STOP;
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <I2C_stop+0x28>)
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <I2C_stop+0x28>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001674:	6013      	str	r3, [r2, #0]
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40005400 	.word	0x40005400

08001684 <I2C_start>:


void I2C_start() {
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
	//while(I2C1->SR2 & I2C_SR2_BUSY);// Unnecessary
	I2C1->CR1 |= I2C_CR1_START;
 8001688:	4a08      	ldr	r2, [pc, #32]	; (80016ac <I2C_start+0x28>)
 800168a:	4b08      	ldr	r3, [pc, #32]	; (80016ac <I2C_start+0x28>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)); // keep waiting until the SB bit has been set
 8001694:	bf00      	nop
 8001696:	4b05      	ldr	r3, [pc, #20]	; (80016ac <I2C_start+0x28>)
 8001698:	695b      	ldr	r3, [r3, #20]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d0f9      	beq.n	8001696 <I2C_start+0x12>
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	40005400 	.word	0x40005400

080016b0 <NVIC_EnableIRQ>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80016ba:	4909      	ldr	r1, [pc, #36]	; (80016e0 <NVIC_EnableIRQ+0x30>)
 80016bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c0:	095b      	lsrs	r3, r3, #5
 80016c2:	79fa      	ldrb	r2, [r7, #7]
 80016c4:	f002 021f 	and.w	r2, r2, #31
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <config_clock_50MHz>:
// Declaring as volatile
// Volatile means that Ticks can change at any time
// Declaring volatile is needed for global variables changed by interrupted service routines
// https://www.embedded.com/electronics-blogs/beginner-s-corner/4023801/Introduction-to-the-Volatile-Keyword

void config_clock_50MHz(void) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
	/* Enable HSI */
    RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80016e8:	4a4d      	ldr	r2, [pc, #308]	; (8001820 <config_clock_50MHz+0x13c>)
 80016ea:	4b4d      	ldr	r3, [pc, #308]	; (8001820 <config_clock_50MHz+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f043 0301 	orr.w	r3, r3, #1
 80016f2:	6013      	str	r3, [r2, #0]

	/* Wait for HSI to be ready */
    while ((RCC->CR & RCC_CR_HSIRDY) == 0) {
 80016f4:	bf00      	nop
 80016f6:	4b4a      	ldr	r3, [pc, #296]	; (8001820 <config_clock_50MHz+0x13c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f9      	beq.n	80016f6 <config_clock_50MHz+0x12>
	  // Nop
    }

	/* Set HSI as the System Clock */
    RCC->CFGR = RCC_CFGR_SW_HSI;
 8001702:	4b47      	ldr	r3, [pc, #284]	; (8001820 <config_clock_50MHz+0x13c>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]

	/* Wait for HSI to be used for the system clock */
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI) {
 8001708:	bf00      	nop
 800170a:	4b45      	ldr	r3, [pc, #276]	; (8001820 <config_clock_50MHz+0x13c>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f9      	bne.n	800170a <config_clock_50MHz+0x26>
	 // Nop
    }

    FLASH->ACR |= FLASH_ACR_PRFTEN;                          // Enable Prefetch Buffer
 8001716:	4a43      	ldr	r2, [pc, #268]	; (8001824 <config_clock_50MHz+0x140>)
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <config_clock_50MHz+0x140>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= FLASH_ACR_LATENCY;                         // Flash 1 wait state
 8001722:	4a40      	ldr	r2, [pc, #256]	; (8001824 <config_clock_50MHz+0x140>)
 8001724:	4b3f      	ldr	r3, [pc, #252]	; (8001824 <config_clock_50MHz+0x140>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f043 030f 	orr.w	r3, r3, #15
 800172c:	6013      	str	r3, [r2, #0]
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;                       // Enable the PWR APB1 Clock
 800172e:	4a3c      	ldr	r2, [pc, #240]	; (8001820 <config_clock_50MHz+0x13c>)
 8001730:	4b3b      	ldr	r3, [pc, #236]	; (8001820 <config_clock_50MHz+0x13c>)
 8001732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001738:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR = PWR_CR_VOS_0;                                  // Select the Voltage Range 1 (1.8V)
 800173a:	4b3b      	ldr	r3, [pc, #236]	; (8001828 <config_clock_50MHz+0x144>)
 800173c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001740:	601a      	str	r2, [r3, #0]
	// when VOS '0' the maximum value of hclk = 144 MHz
    while((PWR->CSR & PWR_CSR_VOSRDY ) != 0);
 8001742:	bf00      	nop
 8001744:	4b38      	ldr	r3, [pc, #224]	; (8001828 <config_clock_50MHz+0x144>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f9      	bne.n	8001744 <config_clock_50MHz+0x60>

	/* PLLCLK = (HSI * 4)/2 = 32 MHz */ //NAH
    RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC| RCC_PLLCFGR_PLLM |  RCC_PLLCFGR_PLLN);
 8001750:	4933      	ldr	r1, [pc, #204]	; (8001820 <config_clock_50MHz+0x13c>)
 8001752:	4b33      	ldr	r3, [pc, #204]	; (8001820 <config_clock_50MHz+0x13c>)
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4b35      	ldr	r3, [pc, #212]	; (800182c <config_clock_50MHz+0x148>)
 8001758:	4013      	ands	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
    RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSI|RCC_PLLCFGR_PLLM_4 | (200<<6));
 800175c:	4a30      	ldr	r2, [pc, #192]	; (8001820 <config_clock_50MHz+0x13c>)
 800175e:	4b30      	ldr	r3, [pc, #192]	; (8001820 <config_clock_50MHz+0x13c>)
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 8001766:	f043 0310 	orr.w	r3, r3, #16
 800176a:	6053      	str	r3, [r2, #4]

	/* Peripheral Clock divisors */
    RCC->CFGR &= ~(0xF<<4); // Cleared 4 bits. HPRE[3:0] which are bits 4,5,6,7. This means  that the system clock is not divided
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <config_clock_50MHz+0x13c>)
 800176e:	4b2c      	ldr	r3, [pc, #176]	; (8001820 <config_clock_50MHz+0x13c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001776:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (0b1000<<4); // AHB system clock now divided by 2.
 8001778:	4a29      	ldr	r2, [pc, #164]	; (8001820 <config_clock_50MHz+0x13c>)
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <config_clock_50MHz+0x13c>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001782:	6093      	str	r3, [r2, #8]
	// HCLK is now 50 MHz



	// HCLK = SYSCLK
    RCC->CFGR &= ~(0x7<<10); // cleared 3 bits. PPRE1[2:0] which are bits 10,11,12
 8001784:	4a26      	ldr	r2, [pc, #152]	; (8001820 <config_clock_50MHz+0x13c>)
 8001786:	4b26      	ldr	r3, [pc, #152]	; (8001820 <config_clock_50MHz+0x13c>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
	//RCC->CFGR |= (0b100<<10); // Set as 101, which means the AHB clock is divided by 2. APB1. 50mhz


    RCC->CFGR &= ~(0x7<<13); // Cleared 3 bits. PPRE2[2:0] which are bits 13,14,15
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <config_clock_50MHz+0x13c>)
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <config_clock_50MHz+0x13c>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]


	// the commented out apb1 apb2 means not divided.

	/* Enable PLL */
    RCC->CR &= ~RCC_CR_PLLON;       /* Disable PLL */
 800179c:	4a20      	ldr	r2, [pc, #128]	; (8001820 <config_clock_50MHz+0x13c>)
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <config_clock_50MHz+0x13c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017a6:	6013      	str	r3, [r2, #0]
    RCC->CR |= RCC_CR_PLLON;        /* Enable PLL     */
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <config_clock_50MHz+0x13c>)
 80017aa:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <config_clock_50MHz+0x13c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

	   /* Wait until the PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0) {
 80017b4:	bf00      	nop
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <config_clock_50MHz+0x13c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f9      	beq.n	80017b6 <config_clock_50MHz+0xd2>
	       //Nop
    }

	   /* Select PLL as system Clock */
    RCC->CFGR &= ~RCC_CFGR_SW;            /* Clear */
 80017c2:	4a17      	ldr	r2, [pc, #92]	; (8001820 <config_clock_50MHz+0x13c>)
 80017c4:	4b16      	ldr	r3, [pc, #88]	; (8001820 <config_clock_50MHz+0x13c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	6093      	str	r3, [r2, #8]
    RCC->CFGR |=  RCC_CFGR_SW_PLL;    /* Set   */
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <config_clock_50MHz+0x13c>)
 80017d0:	4b13      	ldr	r3, [pc, #76]	; (8001820 <config_clock_50MHz+0x13c>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6093      	str	r3, [r2, #8]

	   /* Wait for PLL to become system core clock */
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL) {
 80017da:	bf00      	nop
 80017dc:	4b10      	ldr	r3, [pc, #64]	; (8001820 <config_clock_50MHz+0x13c>)
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d1f9      	bne.n	80017dc <config_clock_50MHz+0xf8>




	//************************* configuring for milisecond delay
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80017e8:	4a0d      	ldr	r2, [pc, #52]	; (8001820 <config_clock_50MHz+0x13c>)
 80017ea:	4b0d      	ldr	r3, [pc, #52]	; (8001820 <config_clock_50MHz+0x13c>)
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	f043 0304 	orr.w	r3, r3, #4
 80017f2:	6413      	str	r3, [r2, #64]	; 0x40
    TIM4->PSC = 50;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <config_clock_50MHz+0x14c>)
 80017f6:	2232      	movs	r2, #50	; 0x32
 80017f8:	629a      	str	r2, [r3, #40]	; 0x28
    TIM4->ARR = 1000;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <config_clock_50MHz+0x14c>)
 80017fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001800:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM4->CR1 &= ~TIM_CR1_DIR; //Up counter. By default, but still good practice
 8001802:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <config_clock_50MHz+0x14c>)
 8001804:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <config_clock_50MHz+0x14c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 0310 	bic.w	r3, r3, #16
 800180c:	6013      	str	r3, [r2, #0]
	 //TIM4->CR1 |= TIM_CR1_URS; // Only up/down counter generates an update interrupt // good practice
    TIM4->DIER = TIM_DIER_UIE; // Update interrupt enabled
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <config_clock_50MHz+0x14c>)
 8001810:	2201      	movs	r2, #1
 8001812:	60da      	str	r2, [r3, #12]
    NVIC_EnableIRQ(TIM4_IRQn);
 8001814:	201e      	movs	r0, #30
 8001816:	f7ff ff4b 	bl	80016b0 <NVIC_EnableIRQ>
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	40023c00 	.word	0x40023c00
 8001828:	40007000 	.word	0x40007000
 800182c:	ffbf8000 	.word	0xffbf8000
 8001830:	40000800 	.word	0x40000800

08001834 <TIM4_IRQHandler>:


void TIM4_IRQHandler() {
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
    Ticks++;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <TIM4_IRQHandler+0x24>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	4a06      	ldr	r2, [pc, #24]	; (8001858 <TIM4_IRQHandler+0x24>)
 8001840:	6013      	str	r3, [r2, #0]
    TIM4->SR &= ~TIM_SR_UIF; // cleared update interrupt
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <TIM4_IRQHandler+0x28>)
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <TIM4_IRQHandler+0x28>)
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	f023 0301 	bic.w	r3, r3, #1
 800184c:	6113      	str	r3, [r2, #16]
}
 800184e:	bf00      	nop
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	2000009c 	.word	0x2000009c
 800185c:	40000800 	.word	0x40000800

08001860 <imu_accel_x>:
 */
#include "ss_mpu6050.h"
#include "I2C_Library.h"

uint16_t imu_accel_x(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
	uint16_t accel_x;
	I2C_start();
 8001866:	f7ff ff0d 	bl	8001684 <I2C_start>
	I2C_addressWrite(0x68); // I2C address of MPU6050
 800186a:	2068      	movs	r0, #104	; 0x68
 800186c:	f7ff fe86 	bl	800157c <I2C_addressWrite>
	I2C_data(59);  //Register address that is going to be read
 8001870:	203b      	movs	r0, #59	; 0x3b
 8001872:	f7ff fec5 	bl	8001600 <I2C_data>
	I2C_data(59);
 8001876:	203b      	movs	r0, #59	; 0x3b
 8001878:	f7ff fec2 	bl	8001600 <I2C_data>

	I2C_start();
 800187c:	f7ff ff02 	bl	8001684 <I2C_start>
	I2C_addressRead(0x68);
 8001880:	2068      	movs	r0, #104	; 0x68
 8001882:	f7ff fe9b 	bl	80015bc <I2C_addressRead>
	accel_x |= I2C_dataRead()<<8;
 8001886:	f7ff fed3 	bl	8001630 <I2C_dataRead>
 800188a:	4603      	mov	r3, r0
 800188c:	021b      	lsls	r3, r3, #8
 800188e:	b21a      	sxth	r2, r3
 8001890:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001894:	4313      	orrs	r3, r2
 8001896:	b21b      	sxth	r3, r3
 8001898:	80fb      	strh	r3, [r7, #6]
	I2C_stop();
 800189a:	f7ff fedd 	bl	8001658 <I2C_stop>
	return accel_x;
 800189e:	88fb      	ldrh	r3, [r7, #6]

}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <__libc_init_array>:
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	4e0d      	ldr	r6, [pc, #52]	; (80018e0 <__libc_init_array+0x38>)
 80018ac:	4c0d      	ldr	r4, [pc, #52]	; (80018e4 <__libc_init_array+0x3c>)
 80018ae:	1ba4      	subs	r4, r4, r6
 80018b0:	10a4      	asrs	r4, r4, #2
 80018b2:	2500      	movs	r5, #0
 80018b4:	42a5      	cmp	r5, r4
 80018b6:	d109      	bne.n	80018cc <__libc_init_array+0x24>
 80018b8:	4e0b      	ldr	r6, [pc, #44]	; (80018e8 <__libc_init_array+0x40>)
 80018ba:	4c0c      	ldr	r4, [pc, #48]	; (80018ec <__libc_init_array+0x44>)
 80018bc:	f000 f818 	bl	80018f0 <_init>
 80018c0:	1ba4      	subs	r4, r4, r6
 80018c2:	10a4      	asrs	r4, r4, #2
 80018c4:	2500      	movs	r5, #0
 80018c6:	42a5      	cmp	r5, r4
 80018c8:	d105      	bne.n	80018d6 <__libc_init_array+0x2e>
 80018ca:	bd70      	pop	{r4, r5, r6, pc}
 80018cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018d0:	4798      	blx	r3
 80018d2:	3501      	adds	r5, #1
 80018d4:	e7ee      	b.n	80018b4 <__libc_init_array+0xc>
 80018d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018da:	4798      	blx	r3
 80018dc:	3501      	adds	r5, #1
 80018de:	e7f2      	b.n	80018c6 <__libc_init_array+0x1e>
 80018e0:	08001908 	.word	0x08001908
 80018e4:	08001908 	.word	0x08001908
 80018e8:	08001908 	.word	0x08001908
 80018ec:	0800190c 	.word	0x0800190c

080018f0 <_init>:
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	bf00      	nop
 80018f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f6:	bc08      	pop	{r3}
 80018f8:	469e      	mov	lr, r3
 80018fa:	4770      	bx	lr

080018fc <_fini>:
 80018fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018fe:	bf00      	nop
 8001900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001902:	bc08      	pop	{r3}
 8001904:	469e      	mov	lr, r3
 8001906:	4770      	bx	lr
