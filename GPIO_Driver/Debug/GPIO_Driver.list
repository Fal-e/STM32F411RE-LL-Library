
GPIO_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000198c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001b24  08001b24  00011b24  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b4c  08001b4c  00011b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b50  08001b50  00011b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08001b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000080  08001bd4  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  200000a0  08001bd4  000200a0  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000035bc  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000a0a  00000000  00000000  0002366c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000001b0  00000000  00000000  00024078  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00024228  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000111a  00000000  00000000  00024370  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000f7b  00000000  00000000  0002548a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00026405  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000594  00000000  00000000  00026484  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00026a18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001b0c 	.word	0x08001b0c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08001b0c 	.word	0x08001b0c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <main>:
*/



int main(void)
{
 80001e8:	b590      	push	{r4, r7, lr}
 80001ea:	b095      	sub	sp, #84	; 0x54
 80001ec:	af06      	add	r7, sp, #24
lcd_goto_xy(4,2);
lcd_print("Shahini");
//delay_mS(2000);
*/

 config_clock_50MHz();
 80001ee:	f001 fa67 	bl	80016c0 <config_clock_50MHz>


GPIO_TYPE myGPIO;
myGPIO.port = PORTC;
 80001f2:	4b2a      	ldr	r3, [pc, #168]	; (800029c <main+0xb4>)
 80001f4:	617b      	str	r3, [r7, #20]
myGPIO.mode = ANALOG_MODE;
 80001f6:	2303      	movs	r3, #3
 80001f8:	61fb      	str	r3, [r7, #28]
gpio_port_config(myGPIO,(int []) {0},1);
 80001fa:	2300      	movs	r3, #0
 80001fc:	633b      	str	r3, [r7, #48]	; 0x30
 80001fe:	2301      	movs	r3, #1
 8000200:	9304      	str	r3, [sp, #16]
 8000202:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000206:	9303      	str	r3, [sp, #12]
 8000208:	466c      	mov	r4, sp
 800020a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800020e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000212:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800021c:	f001 f8ec 	bl	80013f8 <gpio_port_config>


I2C_enable();
 8000220:	f001 f962 	bl	80014e8 <I2C_enable>
lcd_i2c_clear();
 8000224:	f001 fbe9 	bl	80019fa <lcd_i2c_clear>

// Read data sheet for the GPIO expander in STM32 folder.
// The first data bit sent to the GPIO expander is whether it is input/output etc.


lcd_i2c_init();
 8000228:	f001 fbc2 	bl	80019b0 <lcd_i2c_init>


char str[16]; // Temporary placement


RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 800022c:	4a1c      	ldr	r2, [pc, #112]	; (80002a0 <main+0xb8>)
 800022e:	4b1c      	ldr	r3, [pc, #112]	; (80002a0 <main+0xb8>)
 8000230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000232:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000236:	6453      	str	r3, [r2, #68]	; 0x44
ADC1->SQR1 |= ADC_SQR1_L_0; // One conversion ->  0001. 1111
 8000238:	4a1a      	ldr	r2, [pc, #104]	; (80002a4 <main+0xbc>)
 800023a:	4b1a      	ldr	r3, [pc, #104]	; (80002a4 <main+0xbc>)
 800023c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800023e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000242:	62d3      	str	r3, [r2, #44]	; 0x2c
ADC1->SQR3 |= ADC_SQR3_SQ1_1 | ADC_SQR3_SQ1_3; // 2 or 10, gives us 1100 which is 10. We want
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <main+0xbc>)
 8000246:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <main+0xbc>)
 8000248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800024a:	f043 030a 	orr.w	r3, r3, #10
 800024e:	6353      	str	r3, [r2, #52]	; 0x34
ADC1->CR2 |= ADC_CR2_CONT; // continous mode
 8000250:	4a14      	ldr	r2, [pc, #80]	; (80002a4 <main+0xbc>)
 8000252:	4b14      	ldr	r3, [pc, #80]	; (80002a4 <main+0xbc>)
 8000254:	689b      	ldr	r3, [r3, #8]
 8000256:	f043 0302 	orr.w	r3, r3, #2
 800025a:	6093      	str	r3, [r2, #8]
ADC1->CR2 |= ADC_CR2_ADON;
 800025c:	4a11      	ldr	r2, [pc, #68]	; (80002a4 <main+0xbc>)
 800025e:	4b11      	ldr	r3, [pc, #68]	; (80002a4 <main+0xbc>)
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	f043 0301 	orr.w	r3, r3, #1
 8000266:	6093      	str	r3, [r2, #8]
// maybe put a check that adon is 1
ADC1->CR2 |= ADC_CR2_SWSTART; // Continous Conversion Mode
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <main+0xbc>)
 800026a:	4b0e      	ldr	r3, [pc, #56]	; (80002a4 <main+0xbc>)
 800026c:	689b      	ldr	r3, [r3, #8]
 800026e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000272:	6093      	str	r3, [r2, #8]

while(1){
int result = ADC1->DR;
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <main+0xbc>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000278:	637b      	str	r3, [r7, #52]	; 0x34
itoa(result, str, 10); // convert from integer to string
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	220a      	movs	r2, #10
 800027e:	4619      	mov	r1, r3
 8000280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000282:	f001 fc01 	bl	8001a88 <itoa>
lcd_i2c_print(str);
 8000286:	1d3b      	adds	r3, r7, #4
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fb73 	bl	8001974 <lcd_i2c_print>
delay_mS(1000);
 800028e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000292:	f001 fad3 	bl	800183c <delay_mS>
lcd_i2c_clear();
 8000296:	f001 fbb0 	bl	80019fa <lcd_i2c_clear>
while(1){
 800029a:	e7eb      	b.n	8000274 <main+0x8c>
 800029c:	40020800 	.word	0x40020800
 80002a0:	40023800 	.word	0x40023800
 80002a4:	40012000 	.word	0x40012000

080002a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80002a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80002e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002ae:	e003      	b.n	80002b8 <LoopCopyDataInit>

080002b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80002b0:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80002b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80002b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80002b6:	3104      	adds	r1, #4

080002b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80002b8:	480b      	ldr	r0, [pc, #44]	; (80002e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80002ba:	4b0c      	ldr	r3, [pc, #48]	; (80002ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80002bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80002be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80002c0:	d3f6      	bcc.n	80002b0 <CopyDataInit>
  ldr  r2, =_sbss
 80002c2:	4a0b      	ldr	r2, [pc, #44]	; (80002f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80002c4:	e002      	b.n	80002cc <LoopFillZerobss>

080002c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80002c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80002c8:	f842 3b04 	str.w	r3, [r2], #4

080002cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80002cc:	4b09      	ldr	r3, [pc, #36]	; (80002f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80002ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80002d0:	d3f9      	bcc.n	80002c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80002d2:	f000 f813 	bl	80002fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002d6:	f001 fb9b 	bl	8001a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80002da:	f7ff ff85 	bl	80001e8 <main>
  bx  lr    
 80002de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80002e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80002e4:	08001b54 	.word	0x08001b54
  ldr  r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80002ec:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 80002f0:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 80002f4:	200000a0 	.word	0x200000a0

080002f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC_IRQHandler>
	...

080002fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000300:	4a16      	ldr	r2, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000302:	4b16      	ldr	r3, [pc, #88]	; (800035c <SystemInit+0x60>)
 8000304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800030c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000312:	4b13      	ldr	r3, [pc, #76]	; (8000360 <SystemInit+0x64>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f043 0301 	orr.w	r3, r3, #1
 800031a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <SystemInit+0x64>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000322:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <SystemInit+0x64>)
 8000324:	4b0e      	ldr	r3, [pc, #56]	; (8000360 <SystemInit+0x64>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800032c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000330:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <SystemInit+0x64>)
 8000334:	4a0b      	ldr	r2, [pc, #44]	; (8000364 <SystemInit+0x68>)
 8000336:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000338:	4a09      	ldr	r2, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <SystemInit+0x64>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000342:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000344:	4b06      	ldr	r3, [pc, #24]	; (8000360 <SystemInit+0x64>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800034a:	4b04      	ldr	r3, [pc, #16]	; (800035c <SystemInit+0x60>)
 800034c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000350:	609a      	str	r2, [r3, #8]
#endif
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	e000ed00 	.word	0xe000ed00
 8000360:	40023800 	.word	0x40023800
 8000364:	24003010 	.word	0x24003010

08000368 <config_pin>:
		(0x1C), //7

};

 static void config_pin(GPIO_TypeDef *port, uint32_t pinNumber, uint32_t pinSpeed, uint32_t mode, uint16_t mode_type, uint32_t alt_func)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
 8000374:	603b      	str	r3, [r7, #0]

	if(mode == OUTPUT_MODE)
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	2b01      	cmp	r3, #1
 800037a:	f040 80aa 	bne.w	80004d2 <config_pin+0x16a>
	{
		port->MODER |= (1<<PINPOS[pinNumber]);
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	49b1      	ldr	r1, [pc, #708]	; (8000648 <config_pin+0x2e0>)
 8000384:	68ba      	ldr	r2, [r7, #8]
 8000386:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800038a:	2101      	movs	r1, #1
 800038c:	fa01 f202 	lsl.w	r2, r1, r2
 8000390:	431a      	orrs	r2, r3
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	601a      	str	r2, [r3, #0]
		port->MODER &= ~(1<<PINPOS[pinNumber]+1);
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	49ab      	ldr	r1, [pc, #684]	; (8000648 <config_pin+0x2e0>)
 800039c:	68ba      	ldr	r2, [r7, #8]
 800039e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80003a2:	3201      	adds	r2, #1
 80003a4:	2101      	movs	r1, #1
 80003a6:	fa01 f202 	lsl.w	r2, r1, r2
 80003aa:	43d2      	mvns	r2, r2
 80003ac:	401a      	ands	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	601a      	str	r2, [r3, #0]


			if(mode_type == OUTPUT_PUP)
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d109      	bne.n	80003cc <config_pin+0x64>
			{
				port->OTYPER &= ~(1<<pinNumber);
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	2101      	movs	r1, #1
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	43d2      	mvns	r2, r2
 80003c6:	401a      	ands	r2, r3
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	605a      	str	r2, [r3, #4]
			}

			if(mode_type == OUTPUT_OD)
 80003cc:	8b3b      	ldrh	r3, [r7, #24]
 80003ce:	2b01      	cmp	r3, #1
 80003d0:	d108      	bne.n	80003e4 <config_pin+0x7c>
			{
				port->OTYPER |= (1<<pinNumber);
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	685b      	ldr	r3, [r3, #4]
 80003d6:	2101      	movs	r1, #1
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	431a      	orrs	r2, r3
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	605a      	str	r2, [r3, #4]
			}


			switch(pinSpeed)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	2b03      	cmp	r3, #3
 80003e8:	f200 80c5 	bhi.w	8000576 <config_pin+0x20e>
 80003ec:	a201      	add	r2, pc, #4	; (adr r2, 80003f4 <config_pin+0x8c>)
 80003ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f2:	bf00      	nop
 80003f4:	08000405 	.word	0x08000405
 80003f8:	08000431 	.word	0x08000431
 80003fc:	08000467 	.word	0x08000467
 8000400:	0800049d 	.word	0x0800049d
			{
			//Output speed
			case (SPEED_LOW):
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]); // Putting a 00
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	498f      	ldr	r1, [pc, #572]	; (8000648 <config_pin+0x2e0>)
 800040a:	68ba      	ldr	r2, [r7, #8]
 800040c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000410:	2101      	movs	r1, #1
 8000412:	4091      	lsls	r1, r2
 8000414:	68ba      	ldr	r2, [r7, #8]
 8000416:	3201      	adds	r2, #1
 8000418:	488b      	ldr	r0, [pc, #556]	; (8000648 <config_pin+0x2e0>)
 800041a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800041e:	2001      	movs	r0, #1
 8000420:	fa00 f202 	lsl.w	r2, r0, r2
 8000424:	430a      	orrs	r2, r1
 8000426:	43d2      	mvns	r2, r2
 8000428:	401a      	ands	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	609a      	str	r2, [r3, #8]
			break;
 800042e:	e0a2      	b.n	8000576 <config_pin+0x20e>

			case (SPEED_MEDIUM): //Putting a 01
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	4984      	ldr	r1, [pc, #528]	; (8000648 <config_pin+0x2e0>)
 8000436:	68ba      	ldr	r2, [r7, #8]
 8000438:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800043c:	2101      	movs	r1, #1
 800043e:	fa01 f202 	lsl.w	r2, r1, r2
 8000442:	431a      	orrs	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	609a      	str	r2, [r3, #8]
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber+1]);
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	689b      	ldr	r3, [r3, #8]
 800044c:	68ba      	ldr	r2, [r7, #8]
 800044e:	3201      	adds	r2, #1
 8000450:	497d      	ldr	r1, [pc, #500]	; (8000648 <config_pin+0x2e0>)
 8000452:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	43d2      	mvns	r2, r2
 800045e:	401a      	ands	r2, r3
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	609a      	str	r2, [r3, #8]
			break;
 8000464:	e087      	b.n	8000576 <config_pin+0x20e>

			case (SPEED_HIGH): //Putting a 10
			port->OSPEEDR &= ~(1<<PINPOS[pinNumber]);
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	4977      	ldr	r1, [pc, #476]	; (8000648 <config_pin+0x2e0>)
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000472:	2101      	movs	r1, #1
 8000474:	fa01 f202 	lsl.w	r2, r1, r2
 8000478:	43d2      	mvns	r2, r2
 800047a:	401a      	ands	r2, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	609a      	str	r2, [r3, #8]
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 8000480:	68fb      	ldr	r3, [r7, #12]
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	68ba      	ldr	r2, [r7, #8]
 8000486:	3201      	adds	r2, #1
 8000488:	496f      	ldr	r1, [pc, #444]	; (8000648 <config_pin+0x2e0>)
 800048a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800048e:	2101      	movs	r1, #1
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	431a      	orrs	r2, r3
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	609a      	str	r2, [r3, #8]
			break;
 800049a:	e06c      	b.n	8000576 <config_pin+0x20e>

			case (SPEED_V_HIGH): //Putting a 11
			port->OSPEEDR |= (1<<PINPOS[pinNumber]);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4969      	ldr	r1, [pc, #420]	; (8000648 <config_pin+0x2e0>)
 80004a2:	68ba      	ldr	r2, [r7, #8]
 80004a4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004a8:	2101      	movs	r1, #1
 80004aa:	fa01 f202 	lsl.w	r2, r1, r2
 80004ae:	431a      	orrs	r2, r3
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	609a      	str	r2, [r3, #8]
			port->OSPEEDR |= (1<<PINPOS[pinNumber+1]);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	689b      	ldr	r3, [r3, #8]
 80004b8:	68ba      	ldr	r2, [r7, #8]
 80004ba:	3201      	adds	r2, #1
 80004bc:	4962      	ldr	r1, [pc, #392]	; (8000648 <config_pin+0x2e0>)
 80004be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004c2:	2101      	movs	r1, #1
 80004c4:	fa01 f202 	lsl.w	r2, r1, r2
 80004c8:	431a      	orrs	r2, r3
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	609a      	str	r2, [r3, #8]
			break;
 80004ce:	bf00      	nop
 80004d0:	e051      	b.n	8000576 <config_pin+0x20e>

		}

	else
	{
		switch(mode)
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b02      	cmp	r3, #2
 80004d6:	d019      	beq.n	800050c <config_pin+0x1a4>
 80004d8:	2b03      	cmp	r3, #3
 80004da:	d032      	beq.n	8000542 <config_pin+0x1da>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d14a      	bne.n	8000576 <config_pin+0x20e>
					{

					case (INPUT_MODE): //00
					port->MODER &= ~(1<<PINPOS[pinNumber]) & ~(1<<PINPOS[pinNumber+1]);
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4958      	ldr	r1, [pc, #352]	; (8000648 <config_pin+0x2e0>)
 80004e6:	68ba      	ldr	r2, [r7, #8]
 80004e8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80004ec:	2101      	movs	r1, #1
 80004ee:	4091      	lsls	r1, r2
 80004f0:	68ba      	ldr	r2, [r7, #8]
 80004f2:	3201      	adds	r2, #1
 80004f4:	4854      	ldr	r0, [pc, #336]	; (8000648 <config_pin+0x2e0>)
 80004f6:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80004fa:	2001      	movs	r0, #1
 80004fc:	fa00 f202 	lsl.w	r2, r0, r2
 8000500:	430a      	orrs	r2, r1
 8000502:	43d2      	mvns	r2, r2
 8000504:	401a      	ands	r2, r3
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	601a      	str	r2, [r3, #0]
					break;
 800050a:	e034      	b.n	8000576 <config_pin+0x20e>

					case (ALT_MODE): //10
					port->MODER &= ~(1<<PINPOS[pinNumber]);
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	494d      	ldr	r1, [pc, #308]	; (8000648 <config_pin+0x2e0>)
 8000512:	68ba      	ldr	r2, [r7, #8]
 8000514:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000518:	2101      	movs	r1, #1
 800051a:	fa01 f202 	lsl.w	r2, r1, r2
 800051e:	43d2      	mvns	r2, r2
 8000520:	401a      	ands	r2, r3
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	601a      	str	r2, [r3, #0]
					port->MODER |= (1<<(PINPOS[pinNumber]+1));
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4947      	ldr	r1, [pc, #284]	; (8000648 <config_pin+0x2e0>)
 800052c:	68ba      	ldr	r2, [r7, #8]
 800052e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000532:	3201      	adds	r2, #1
 8000534:	2101      	movs	r1, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	431a      	orrs	r2, r3
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	601a      	str	r2, [r3, #0]
					break;
 8000540:	e019      	b.n	8000576 <config_pin+0x20e>

					case (ANALOG_MODE): //11
					port->MODER |= (1<<PINPOS[pinNumber]);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4940      	ldr	r1, [pc, #256]	; (8000648 <config_pin+0x2e0>)
 8000548:	68ba      	ldr	r2, [r7, #8]
 800054a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800054e:	2101      	movs	r1, #1
 8000550:	fa01 f202 	lsl.w	r2, r1, r2
 8000554:	431a      	orrs	r2, r3
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	601a      	str	r2, [r3, #0]
					port->MODER |= (1<<(PINPOS[pinNumber]+1));
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	493a      	ldr	r1, [pc, #232]	; (8000648 <config_pin+0x2e0>)
 8000560:	68ba      	ldr	r2, [r7, #8]
 8000562:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000566:	3201      	adds	r2, #1
 8000568:	2101      	movs	r1, #1
 800056a:	fa01 f202 	lsl.w	r2, r1, r2
 800056e:	431a      	orrs	r2, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	601a      	str	r2, [r3, #0]
					break;
 8000574:	bf00      	nop

					}

	}

	if (mode == ALT_MODE)
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	2b02      	cmp	r3, #2
 800057a:	f040 8734 	bne.w	80013e6 <config_pin+0x107e>
	{
		if (pinNumber <=7) //Low Register, AFRL
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	2b07      	cmp	r3, #7
 8000582:	f200 83a0 	bhi.w	8000cc6 <config_pin+0x95e>
		{
			switch(alt_func)
 8000586:	69fb      	ldr	r3, [r7, #28]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	f200 872c 	bhi.w	80013e6 <config_pin+0x107e>
 800058e:	a201      	add	r2, pc, #4	; (adr r2, 8000594 <config_pin+0x22c>)
 8000590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000594:	080005d5 	.word	0x080005d5
 8000598:	08000651 	.word	0x08000651
 800059c:	080006c1 	.word	0x080006c1
 80005a0:	08000731 	.word	0x08000731
 80005a4:	0800079f 	.word	0x0800079f
 80005a8:	0800080f 	.word	0x0800080f
 80005ac:	0800087d 	.word	0x0800087d
 80005b0:	080008f1 	.word	0x080008f1
 80005b4:	0800095d 	.word	0x0800095d
 80005b8:	080009cd 	.word	0x080009cd
 80005bc:	08000a3b 	.word	0x08000a3b
 80005c0:	08000aa9 	.word	0x08000aa9
 80005c4:	08000b15 	.word	0x08000b15
 80005c8:	08000b89 	.word	0x08000b89
 80005cc:	08000bf3 	.word	0x08000bf3
 80005d0:	08000c5d 	.word	0x08000c5d
				{

				case (AF0):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	491c      	ldr	r1, [pc, #112]	; (800064c <config_pin+0x2e4>)
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005e0:	2101      	movs	r1, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	43d2      	mvns	r2, r2
 80005e8:	401a      	ands	r2, r3
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	6a1b      	ldr	r3, [r3, #32]
 80005f2:	4916      	ldr	r1, [pc, #88]	; (800064c <config_pin+0x2e4>)
 80005f4:	68ba      	ldr	r2, [r7, #8]
 80005f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80005fa:	3201      	adds	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	43d2      	mvns	r2, r2
 8000604:	401a      	ands	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	6a1b      	ldr	r3, [r3, #32]
 800060e:	490f      	ldr	r1, [pc, #60]	; (800064c <config_pin+0x2e4>)
 8000610:	68ba      	ldr	r2, [r7, #8]
 8000612:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000616:	3202      	adds	r2, #2
 8000618:	2101      	movs	r1, #1
 800061a:	fa01 f202 	lsl.w	r2, r1, r2
 800061e:	43d2      	mvns	r2, r2
 8000620:	401a      	ands	r2, r3
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	4908      	ldr	r1, [pc, #32]	; (800064c <config_pin+0x2e4>)
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000632:	3203      	adds	r2, #3
 8000634:	2101      	movs	r1, #1
 8000636:	fa01 f202 	lsl.w	r2, r1, r2
 800063a:	43d2      	mvns	r2, r2
 800063c:	401a      	ands	r2, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	621a      	str	r2, [r3, #32]
				break;
 8000642:	f000 bed0 	b.w	80013e6 <config_pin+0x107e>
 8000646:	bf00      	nop
 8000648:	20000000 	.word	0x20000000
 800064c:	20000040 	.word	0x20000040

				case (AF1):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	49a5      	ldr	r1, [pc, #660]	; (80008ec <config_pin+0x584>)
 8000656:	68ba      	ldr	r2, [r7, #8]
 8000658:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800065c:	2101      	movs	r1, #1
 800065e:	fa01 f202 	lsl.w	r2, r1, r2
 8000662:	431a      	orrs	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	499f      	ldr	r1, [pc, #636]	; (80008ec <config_pin+0x584>)
 800066e:	68ba      	ldr	r2, [r7, #8]
 8000670:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000674:	3201      	adds	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	fa01 f202 	lsl.w	r2, r1, r2
 800067c:	43d2      	mvns	r2, r2
 800067e:	401a      	ands	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	6a1b      	ldr	r3, [r3, #32]
 8000688:	4998      	ldr	r1, [pc, #608]	; (80008ec <config_pin+0x584>)
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000690:	3202      	adds	r2, #2
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	43d2      	mvns	r2, r2
 800069a:	401a      	ands	r2, r3
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6a1b      	ldr	r3, [r3, #32]
 80006a4:	4991      	ldr	r1, [pc, #580]	; (80008ec <config_pin+0x584>)
 80006a6:	68ba      	ldr	r2, [r7, #8]
 80006a8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006ac:	3203      	adds	r2, #3
 80006ae:	2101      	movs	r1, #1
 80006b0:	fa01 f202 	lsl.w	r2, r1, r2
 80006b4:	43d2      	mvns	r2, r2
 80006b6:	401a      	ands	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	621a      	str	r2, [r3, #32]

				break;
 80006bc:	f000 be93 	b.w	80013e6 <config_pin+0x107e>

				case (AF2):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6a1b      	ldr	r3, [r3, #32]
 80006c4:	4989      	ldr	r1, [pc, #548]	; (80008ec <config_pin+0x584>)
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	43d2      	mvns	r2, r2
 80006d4:	401a      	ands	r2, r3
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6a1b      	ldr	r3, [r3, #32]
 80006de:	4983      	ldr	r1, [pc, #524]	; (80008ec <config_pin+0x584>)
 80006e0:	68ba      	ldr	r2, [r7, #8]
 80006e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80006e6:	3201      	adds	r2, #1
 80006e8:	2101      	movs	r1, #1
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	431a      	orrs	r2, r3
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	497c      	ldr	r1, [pc, #496]	; (80008ec <config_pin+0x584>)
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000700:	3202      	adds	r2, #2
 8000702:	2101      	movs	r1, #1
 8000704:	fa01 f202 	lsl.w	r2, r1, r2
 8000708:	43d2      	mvns	r2, r2
 800070a:	401a      	ands	r2, r3
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6a1b      	ldr	r3, [r3, #32]
 8000714:	4975      	ldr	r1, [pc, #468]	; (80008ec <config_pin+0x584>)
 8000716:	68ba      	ldr	r2, [r7, #8]
 8000718:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800071c:	3203      	adds	r2, #3
 800071e:	2101      	movs	r1, #1
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	43d2      	mvns	r2, r2
 8000726:	401a      	ands	r2, r3
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	621a      	str	r2, [r3, #32]
				break;
 800072c:	f000 be5b 	b.w	80013e6 <config_pin+0x107e>

				case (AF3):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	496d      	ldr	r1, [pc, #436]	; (80008ec <config_pin+0x584>)
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800073c:	2101      	movs	r1, #1
 800073e:	fa01 f202 	lsl.w	r2, r1, r2
 8000742:	431a      	orrs	r2, r3
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	6a1b      	ldr	r3, [r3, #32]
 800074c:	4967      	ldr	r1, [pc, #412]	; (80008ec <config_pin+0x584>)
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000754:	3201      	adds	r2, #1
 8000756:	2101      	movs	r1, #1
 8000758:	fa01 f202 	lsl.w	r2, r1, r2
 800075c:	431a      	orrs	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6a1b      	ldr	r3, [r3, #32]
 8000766:	4961      	ldr	r1, [pc, #388]	; (80008ec <config_pin+0x584>)
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800076e:	3202      	adds	r2, #2
 8000770:	2101      	movs	r1, #1
 8000772:	fa01 f202 	lsl.w	r2, r1, r2
 8000776:	43d2      	mvns	r2, r2
 8000778:	401a      	ands	r2, r3
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	495a      	ldr	r1, [pc, #360]	; (80008ec <config_pin+0x584>)
 8000784:	68ba      	ldr	r2, [r7, #8]
 8000786:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800078a:	3203      	adds	r2, #3
 800078c:	2101      	movs	r1, #1
 800078e:	fa01 f202 	lsl.w	r2, r1, r2
 8000792:	43d2      	mvns	r2, r2
 8000794:	401a      	ands	r2, r3
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	621a      	str	r2, [r3, #32]
				break;
 800079a:	f000 be24 	b.w	80013e6 <config_pin+0x107e>

				case (AF4):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	6a1b      	ldr	r3, [r3, #32]
 80007a2:	4952      	ldr	r1, [pc, #328]	; (80008ec <config_pin+0x584>)
 80007a4:	68ba      	ldr	r2, [r7, #8]
 80007a6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	43d2      	mvns	r2, r2
 80007b2:	401a      	ands	r2, r3
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	494b      	ldr	r1, [pc, #300]	; (80008ec <config_pin+0x584>)
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007c4:	3201      	adds	r2, #1
 80007c6:	2101      	movs	r1, #1
 80007c8:	fa01 f202 	lsl.w	r2, r1, r2
 80007cc:	43d2      	mvns	r2, r2
 80007ce:	401a      	ands	r2, r3
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	6a1b      	ldr	r3, [r3, #32]
 80007d8:	4944      	ldr	r1, [pc, #272]	; (80008ec <config_pin+0x584>)
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007e0:	3202      	adds	r2, #2
 80007e2:	2101      	movs	r1, #1
 80007e4:	fa01 f202 	lsl.w	r2, r1, r2
 80007e8:	431a      	orrs	r2, r3
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	6a1b      	ldr	r3, [r3, #32]
 80007f2:	493e      	ldr	r1, [pc, #248]	; (80008ec <config_pin+0x584>)
 80007f4:	68ba      	ldr	r2, [r7, #8]
 80007f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80007fa:	3203      	adds	r2, #3
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	43d2      	mvns	r2, r2
 8000804:	401a      	ands	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	621a      	str	r2, [r3, #32]
				break;
 800080a:	f000 bdec 	b.w	80013e6 <config_pin+0x107e>

				case (AF5):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	4936      	ldr	r1, [pc, #216]	; (80008ec <config_pin+0x584>)
 8000814:	68ba      	ldr	r2, [r7, #8]
 8000816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800081a:	2101      	movs	r1, #1
 800081c:	fa01 f202 	lsl.w	r2, r1, r2
 8000820:	431a      	orrs	r2, r3
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	6a1b      	ldr	r3, [r3, #32]
 800082a:	4930      	ldr	r1, [pc, #192]	; (80008ec <config_pin+0x584>)
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000832:	3201      	adds	r2, #1
 8000834:	2101      	movs	r1, #1
 8000836:	fa01 f202 	lsl.w	r2, r1, r2
 800083a:	43d2      	mvns	r2, r2
 800083c:	401a      	ands	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6a1b      	ldr	r3, [r3, #32]
 8000846:	4929      	ldr	r1, [pc, #164]	; (80008ec <config_pin+0x584>)
 8000848:	68ba      	ldr	r2, [r7, #8]
 800084a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800084e:	3202      	adds	r2, #2
 8000850:	2101      	movs	r1, #1
 8000852:	fa01 f202 	lsl.w	r2, r1, r2
 8000856:	431a      	orrs	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	6a1b      	ldr	r3, [r3, #32]
 8000860:	4922      	ldr	r1, [pc, #136]	; (80008ec <config_pin+0x584>)
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000868:	3203      	adds	r2, #3
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	43d2      	mvns	r2, r2
 8000872:	401a      	ands	r2, r3
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	621a      	str	r2, [r3, #32]
				break;
 8000878:	f000 bdb5 	b.w	80013e6 <config_pin+0x107e>

				case (AF6):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	6a1b      	ldr	r3, [r3, #32]
 8000880:	491a      	ldr	r1, [pc, #104]	; (80008ec <config_pin+0x584>)
 8000882:	68ba      	ldr	r2, [r7, #8]
 8000884:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000888:	2101      	movs	r1, #1
 800088a:	fa01 f202 	lsl.w	r2, r1, r2
 800088e:	43d2      	mvns	r2, r2
 8000890:	401a      	ands	r2, r3
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6a1b      	ldr	r3, [r3, #32]
 800089a:	4914      	ldr	r1, [pc, #80]	; (80008ec <config_pin+0x584>)
 800089c:	68ba      	ldr	r2, [r7, #8]
 800089e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008a2:	3201      	adds	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	fa01 f202 	lsl.w	r2, r1, r2
 80008aa:	431a      	orrs	r2, r3
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	6a1b      	ldr	r3, [r3, #32]
 80008b4:	490d      	ldr	r1, [pc, #52]	; (80008ec <config_pin+0x584>)
 80008b6:	68ba      	ldr	r2, [r7, #8]
 80008b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008bc:	3202      	adds	r2, #2
 80008be:	2101      	movs	r1, #1
 80008c0:	fa01 f202 	lsl.w	r2, r1, r2
 80008c4:	431a      	orrs	r2, r3
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	6a1b      	ldr	r3, [r3, #32]
 80008ce:	4907      	ldr	r1, [pc, #28]	; (80008ec <config_pin+0x584>)
 80008d0:	68ba      	ldr	r2, [r7, #8]
 80008d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008d6:	3203      	adds	r2, #3
 80008d8:	2101      	movs	r1, #1
 80008da:	fa01 f202 	lsl.w	r2, r1, r2
 80008de:	43d2      	mvns	r2, r2
 80008e0:	401a      	ands	r2, r3
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	621a      	str	r2, [r3, #32]
				break;
 80008e6:	f000 bd7e 	b.w	80013e6 <config_pin+0x107e>
 80008ea:	bf00      	nop
 80008ec:	20000040 	.word	0x20000040

				case (AF7):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	49a3      	ldr	r1, [pc, #652]	; (8000b84 <config_pin+0x81c>)
 80008f6:	68ba      	ldr	r2, [r7, #8]
 80008f8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008fc:	2101      	movs	r1, #1
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	431a      	orrs	r2, r3
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	6a1b      	ldr	r3, [r3, #32]
 800090c:	499d      	ldr	r1, [pc, #628]	; (8000b84 <config_pin+0x81c>)
 800090e:	68ba      	ldr	r2, [r7, #8]
 8000910:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000914:	3201      	adds	r2, #1
 8000916:	2101      	movs	r1, #1
 8000918:	fa01 f202 	lsl.w	r2, r1, r2
 800091c:	431a      	orrs	r2, r3
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	4997      	ldr	r1, [pc, #604]	; (8000b84 <config_pin+0x81c>)
 8000928:	68ba      	ldr	r2, [r7, #8]
 800092a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800092e:	3202      	adds	r2, #2
 8000930:	2101      	movs	r1, #1
 8000932:	fa01 f202 	lsl.w	r2, r1, r2
 8000936:	431a      	orrs	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	6a1b      	ldr	r3, [r3, #32]
 8000940:	4990      	ldr	r1, [pc, #576]	; (8000b84 <config_pin+0x81c>)
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000948:	3203      	adds	r2, #3
 800094a:	2101      	movs	r1, #1
 800094c:	fa01 f202 	lsl.w	r2, r1, r2
 8000950:	43d2      	mvns	r2, r2
 8000952:	401a      	ands	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	621a      	str	r2, [r3, #32]
				break;
 8000958:	f000 bd45 	b.w	80013e6 <config_pin+0x107e>

				case (AF8):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	6a1b      	ldr	r3, [r3, #32]
 8000960:	4988      	ldr	r1, [pc, #544]	; (8000b84 <config_pin+0x81c>)
 8000962:	68ba      	ldr	r2, [r7, #8]
 8000964:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000968:	2101      	movs	r1, #1
 800096a:	fa01 f202 	lsl.w	r2, r1, r2
 800096e:	43d2      	mvns	r2, r2
 8000970:	401a      	ands	r2, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6a1b      	ldr	r3, [r3, #32]
 800097a:	4982      	ldr	r1, [pc, #520]	; (8000b84 <config_pin+0x81c>)
 800097c:	68ba      	ldr	r2, [r7, #8]
 800097e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000982:	3201      	adds	r2, #1
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	43d2      	mvns	r2, r2
 800098c:	401a      	ands	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	6a1b      	ldr	r3, [r3, #32]
 8000996:	497b      	ldr	r1, [pc, #492]	; (8000b84 <config_pin+0x81c>)
 8000998:	68ba      	ldr	r2, [r7, #8]
 800099a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800099e:	3202      	adds	r2, #2
 80009a0:	2101      	movs	r1, #1
 80009a2:	fa01 f202 	lsl.w	r2, r1, r2
 80009a6:	43d2      	mvns	r2, r2
 80009a8:	401a      	ands	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6a1b      	ldr	r3, [r3, #32]
 80009b2:	4974      	ldr	r1, [pc, #464]	; (8000b84 <config_pin+0x81c>)
 80009b4:	68ba      	ldr	r2, [r7, #8]
 80009b6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009ba:	3203      	adds	r2, #3
 80009bc:	2101      	movs	r1, #1
 80009be:	fa01 f202 	lsl.w	r2, r1, r2
 80009c2:	431a      	orrs	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	621a      	str	r2, [r3, #32]
				break;
 80009c8:	f000 bd0d 	b.w	80013e6 <config_pin+0x107e>

				case (AF9):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	6a1b      	ldr	r3, [r3, #32]
 80009d0:	496c      	ldr	r1, [pc, #432]	; (8000b84 <config_pin+0x81c>)
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009d8:	2101      	movs	r1, #1
 80009da:	fa01 f202 	lsl.w	r2, r1, r2
 80009de:	431a      	orrs	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6a1b      	ldr	r3, [r3, #32]
 80009e8:	4966      	ldr	r1, [pc, #408]	; (8000b84 <config_pin+0x81c>)
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80009f0:	3201      	adds	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	43d2      	mvns	r2, r2
 80009fa:	401a      	ands	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6a1b      	ldr	r3, [r3, #32]
 8000a04:	495f      	ldr	r1, [pc, #380]	; (8000b84 <config_pin+0x81c>)
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a0c:	3202      	adds	r2, #2
 8000a0e:	2101      	movs	r1, #1
 8000a10:	fa01 f202 	lsl.w	r2, r1, r2
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	401a      	ands	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	4958      	ldr	r1, [pc, #352]	; (8000b84 <config_pin+0x81c>)
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a28:	3203      	adds	r2, #3
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000a30:	431a      	orrs	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	621a      	str	r2, [r3, #32]
				break;
 8000a36:	f000 bcd6 	b.w	80013e6 <config_pin+0x107e>

				case (AF10):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	6a1b      	ldr	r3, [r3, #32]
 8000a3e:	4951      	ldr	r1, [pc, #324]	; (8000b84 <config_pin+0x81c>)
 8000a40:	68ba      	ldr	r2, [r7, #8]
 8000a42:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a46:	2101      	movs	r1, #1
 8000a48:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4c:	43d2      	mvns	r2, r2
 8000a4e:	401a      	ands	r2, r3
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	6a1b      	ldr	r3, [r3, #32]
 8000a58:	494a      	ldr	r1, [pc, #296]	; (8000b84 <config_pin+0x81c>)
 8000a5a:	68ba      	ldr	r2, [r7, #8]
 8000a5c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a60:	3201      	adds	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	fa01 f202 	lsl.w	r2, r1, r2
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	6a1b      	ldr	r3, [r3, #32]
 8000a72:	4944      	ldr	r1, [pc, #272]	; (8000b84 <config_pin+0x81c>)
 8000a74:	68ba      	ldr	r2, [r7, #8]
 8000a76:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a7a:	3202      	adds	r2, #2
 8000a7c:	2101      	movs	r1, #1
 8000a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a82:	43d2      	mvns	r2, r2
 8000a84:	401a      	ands	r2, r3
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6a1b      	ldr	r3, [r3, #32]
 8000a8e:	493d      	ldr	r1, [pc, #244]	; (8000b84 <config_pin+0x81c>)
 8000a90:	68ba      	ldr	r2, [r7, #8]
 8000a92:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000a96:	3203      	adds	r2, #3
 8000a98:	2101      	movs	r1, #1
 8000a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9e:	431a      	orrs	r2, r3
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	621a      	str	r2, [r3, #32]
				break;
 8000aa4:	f000 bc9f 	b.w	80013e6 <config_pin+0x107e>

				case (AF11):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	6a1b      	ldr	r3, [r3, #32]
 8000aac:	4935      	ldr	r1, [pc, #212]	; (8000b84 <config_pin+0x81c>)
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	431a      	orrs	r2, r3
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	6a1b      	ldr	r3, [r3, #32]
 8000ac4:	492f      	ldr	r1, [pc, #188]	; (8000b84 <config_pin+0x81c>)
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000acc:	3201      	adds	r2, #1
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad4:	431a      	orrs	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	6a1b      	ldr	r3, [r3, #32]
 8000ade:	4929      	ldr	r1, [pc, #164]	; (8000b84 <config_pin+0x81c>)
 8000ae0:	68ba      	ldr	r2, [r7, #8]
 8000ae2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ae6:	3202      	adds	r2, #2
 8000ae8:	2101      	movs	r1, #1
 8000aea:	fa01 f202 	lsl.w	r2, r1, r2
 8000aee:	43d2      	mvns	r2, r2
 8000af0:	401a      	ands	r2, r3
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	6a1b      	ldr	r3, [r3, #32]
 8000afa:	4922      	ldr	r1, [pc, #136]	; (8000b84 <config_pin+0x81c>)
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b02:	3203      	adds	r2, #3
 8000b04:	2101      	movs	r1, #1
 8000b06:	fa01 f202 	lsl.w	r2, r1, r2
 8000b0a:	431a      	orrs	r2, r3
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	621a      	str	r2, [r3, #32]
				break;
 8000b10:	f000 bc69 	b.w	80013e6 <config_pin+0x107e>

				case (AF12):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	6a1b      	ldr	r3, [r3, #32]
 8000b18:	491a      	ldr	r1, [pc, #104]	; (8000b84 <config_pin+0x81c>)
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	43d2      	mvns	r2, r2
 8000b28:	401a      	ands	r2, r3
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6a1b      	ldr	r3, [r3, #32]
 8000b32:	4914      	ldr	r1, [pc, #80]	; (8000b84 <config_pin+0x81c>)
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b42:	43d2      	mvns	r2, r2
 8000b44:	401a      	ands	r2, r3
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6a1b      	ldr	r3, [r3, #32]
 8000b4e:	490d      	ldr	r1, [pc, #52]	; (8000b84 <config_pin+0x81c>)
 8000b50:	68ba      	ldr	r2, [r7, #8]
 8000b52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b56:	3202      	adds	r2, #2
 8000b58:	2101      	movs	r1, #1
 8000b5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b5e:	431a      	orrs	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	6a1b      	ldr	r3, [r3, #32]
 8000b68:	4906      	ldr	r1, [pc, #24]	; (8000b84 <config_pin+0x81c>)
 8000b6a:	68ba      	ldr	r2, [r7, #8]
 8000b6c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b70:	3203      	adds	r2, #3
 8000b72:	2101      	movs	r1, #1
 8000b74:	fa01 f202 	lsl.w	r2, r1, r2
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	621a      	str	r2, [r3, #32]
				break;
 8000b7e:	f000 bc32 	b.w	80013e6 <config_pin+0x107e>
 8000b82:	bf00      	nop
 8000b84:	20000040 	.word	0x20000040

				case (AF13):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4999      	ldr	r1, [pc, #612]	; (8000df4 <config_pin+0xa8c>)
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000b94:	2101      	movs	r1, #1
 8000b96:	fa01 f202 	lsl.w	r2, r1, r2
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	621a      	str	r2, [r3, #32]
				port->AFR[0] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	6a1b      	ldr	r3, [r3, #32]
 8000ba4:	4993      	ldr	r1, [pc, #588]	; (8000df4 <config_pin+0xa8c>)
 8000ba6:	68ba      	ldr	r2, [r7, #8]
 8000ba8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bac:	3201      	adds	r2, #1
 8000bae:	2101      	movs	r1, #1
 8000bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb4:	43d2      	mvns	r2, r2
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	6a1b      	ldr	r3, [r3, #32]
 8000bc0:	498c      	ldr	r1, [pc, #560]	; (8000df4 <config_pin+0xa8c>)
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bc8:	3202      	adds	r2, #2
 8000bca:	2101      	movs	r1, #1
 8000bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	6a1b      	ldr	r3, [r3, #32]
 8000bda:	4986      	ldr	r1, [pc, #536]	; (8000df4 <config_pin+0xa8c>)
 8000bdc:	68ba      	ldr	r2, [r7, #8]
 8000bde:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000be2:	3203      	adds	r2, #3
 8000be4:	2101      	movs	r1, #1
 8000be6:	fa01 f202 	lsl.w	r2, r1, r2
 8000bea:	431a      	orrs	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	621a      	str	r2, [r3, #32]
				break;
 8000bf0:	e3f9      	b.n	80013e6 <config_pin+0x107e>

				case (AF14):
				port->AFR[0] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6a1b      	ldr	r3, [r3, #32]
 8000bf6:	497f      	ldr	r1, [pc, #508]	; (8000df4 <config_pin+0xa8c>)
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000bfe:	2101      	movs	r1, #1
 8000c00:	fa01 f202 	lsl.w	r2, r1, r2
 8000c04:	43d2      	mvns	r2, r2
 8000c06:	401a      	ands	r2, r3
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	6a1b      	ldr	r3, [r3, #32]
 8000c10:	4978      	ldr	r1, [pc, #480]	; (8000df4 <config_pin+0xa8c>)
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c18:	3201      	adds	r2, #1
 8000c1a:	2101      	movs	r1, #1
 8000c1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000c20:	431a      	orrs	r2, r3
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	6a1b      	ldr	r3, [r3, #32]
 8000c2a:	4972      	ldr	r1, [pc, #456]	; (8000df4 <config_pin+0xa8c>)
 8000c2c:	68ba      	ldr	r2, [r7, #8]
 8000c2e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c32:	3202      	adds	r2, #2
 8000c34:	2101      	movs	r1, #1
 8000c36:	fa01 f202 	lsl.w	r2, r1, r2
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	6a1b      	ldr	r3, [r3, #32]
 8000c44:	496b      	ldr	r1, [pc, #428]	; (8000df4 <config_pin+0xa8c>)
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c4c:	3203      	adds	r2, #3
 8000c4e:	2101      	movs	r1, #1
 8000c50:	fa01 f202 	lsl.w	r2, r1, r2
 8000c54:	431a      	orrs	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	621a      	str	r2, [r3, #32]
				break;
 8000c5a:	e3c4      	b.n	80013e6 <config_pin+0x107e>

				case (AF15):
				port->AFR[0] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6a1b      	ldr	r3, [r3, #32]
 8000c60:	4964      	ldr	r1, [pc, #400]	; (8000df4 <config_pin+0xa8c>)
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c68:	2101      	movs	r1, #1
 8000c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c6e:	431a      	orrs	r2, r3
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6a1b      	ldr	r3, [r3, #32]
 8000c78:	495e      	ldr	r1, [pc, #376]	; (8000df4 <config_pin+0xa8c>)
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c80:	3201      	adds	r2, #1
 8000c82:	2101      	movs	r1, #1
 8000c84:	fa01 f202 	lsl.w	r2, r1, r2
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	6a1b      	ldr	r3, [r3, #32]
 8000c92:	4958      	ldr	r1, [pc, #352]	; (8000df4 <config_pin+0xa8c>)
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000c9a:	3202      	adds	r2, #2
 8000c9c:	2101      	movs	r1, #1
 8000c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	621a      	str	r2, [r3, #32]
				port->AFR[0] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	4951      	ldr	r1, [pc, #324]	; (8000df4 <config_pin+0xa8c>)
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000cb4:	3203      	adds	r2, #3
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8000cbc:	431a      	orrs	r2, r3
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	621a      	str	r2, [r3, #32]
				break;
 8000cc2:	bf00      	nop
 8000cc4:	e38f      	b.n	80013e6 <config_pin+0x107e>

		}

		else // High Register, AFRH
		{
			switch(alt_func)
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	2b0f      	cmp	r3, #15
 8000cca:	f200 838c 	bhi.w	80013e6 <config_pin+0x107e>
 8000cce:	a201      	add	r2, pc, #4	; (adr r2, 8000cd4 <config_pin+0x96c>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000d15 	.word	0x08000d15
 8000cd8:	08000d85 	.word	0x08000d85
 8000cdc:	08000df9 	.word	0x08000df9
 8000ce0:	08000e67 	.word	0x08000e67
 8000ce4:	08000ed3 	.word	0x08000ed3
 8000ce8:	08000f41 	.word	0x08000f41
 8000cec:	08000fad 	.word	0x08000fad
 8000cf0:	08001019 	.word	0x08001019
 8000cf4:	08001089 	.word	0x08001089
 8000cf8:	080010f7 	.word	0x080010f7
 8000cfc:	08001163 	.word	0x08001163
 8000d00:	080011cf 	.word	0x080011cf
 8000d04:	08001239 	.word	0x08001239
 8000d08:	080012a5 	.word	0x080012a5
 8000d0c:	08001315 	.word	0x08001315
 8000d10:	0800137f 	.word	0x0800137f
				{

				case (AF0):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d18:	4936      	ldr	r1, [pc, #216]	; (8000df4 <config_pin+0xa8c>)
 8000d1a:	68ba      	ldr	r2, [r7, #8]
 8000d1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d20:	2101      	movs	r1, #1
 8000d22:	fa01 f202 	lsl.w	r2, r1, r2
 8000d26:	43d2      	mvns	r2, r2
 8000d28:	401a      	ands	r2, r3
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d32:	4930      	ldr	r1, [pc, #192]	; (8000df4 <config_pin+0xa8c>)
 8000d34:	68ba      	ldr	r2, [r7, #8]
 8000d36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d3a:	3201      	adds	r2, #1
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d42:	43d2      	mvns	r2, r2
 8000d44:	401a      	ands	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d4e:	4929      	ldr	r1, [pc, #164]	; (8000df4 <config_pin+0xa8c>)
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d56:	3202      	adds	r2, #2
 8000d58:	2101      	movs	r1, #1
 8000d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5e:	43d2      	mvns	r2, r2
 8000d60:	401a      	ands	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d6a:	4922      	ldr	r1, [pc, #136]	; (8000df4 <config_pin+0xa8c>)
 8000d6c:	68ba      	ldr	r2, [r7, #8]
 8000d6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d72:	3203      	adds	r2, #3
 8000d74:	2101      	movs	r1, #1
 8000d76:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7a:	43d2      	mvns	r2, r2
 8000d7c:	401a      	ands	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000d82:	e330      	b.n	80013e6 <config_pin+0x107e>

				case (AF1):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d88:	491a      	ldr	r1, [pc, #104]	; (8000df4 <config_pin+0xa8c>)
 8000d8a:	68ba      	ldr	r2, [r7, #8]
 8000d8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	431a      	orrs	r2, r3
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da0:	4914      	ldr	r1, [pc, #80]	; (8000df4 <config_pin+0xa8c>)
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000da8:	3201      	adds	r2, #1
 8000daa:	2101      	movs	r1, #1
 8000dac:	fa01 f202 	lsl.w	r2, r1, r2
 8000db0:	43d2      	mvns	r2, r2
 8000db2:	401a      	ands	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbc:	490d      	ldr	r1, [pc, #52]	; (8000df4 <config_pin+0xa8c>)
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000dc4:	3202      	adds	r2, #2
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dcc:	43d2      	mvns	r2, r2
 8000dce:	401a      	ands	r2, r3
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd8:	4906      	ldr	r1, [pc, #24]	; (8000df4 <config_pin+0xa8c>)
 8000dda:	68ba      	ldr	r2, [r7, #8]
 8000ddc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000de0:	3203      	adds	r2, #3
 8000de2:	2101      	movs	r1, #1
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	401a      	ands	r2, r3
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24

				break;
 8000df0:	e2f9      	b.n	80013e6 <config_pin+0x107e>
 8000df2:	bf00      	nop
 8000df4:	20000040 	.word	0x20000040

				case (AF2):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfc:	49a1      	ldr	r1, [pc, #644]	; (8001084 <config_pin+0xd1c>)
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e04:	2101      	movs	r1, #1
 8000e06:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0a:	43d2      	mvns	r2, r2
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	499b      	ldr	r1, [pc, #620]	; (8001084 <config_pin+0xd1c>)
 8000e18:	68ba      	ldr	r2, [r7, #8]
 8000e1a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e1e:	3201      	adds	r2, #1
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	431a      	orrs	r2, r3
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e30:	4994      	ldr	r1, [pc, #592]	; (8001084 <config_pin+0xd1c>)
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e38:	3202      	adds	r2, #2
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	43d2      	mvns	r2, r2
 8000e42:	401a      	ands	r2, r3
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e4c:	498d      	ldr	r1, [pc, #564]	; (8001084 <config_pin+0xd1c>)
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e54:	3203      	adds	r2, #3
 8000e56:	2101      	movs	r1, #1
 8000e58:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5c:	43d2      	mvns	r2, r2
 8000e5e:	401a      	ands	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000e64:	e2bf      	b.n	80013e6 <config_pin+0x107e>

				case (AF3):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6a:	4986      	ldr	r1, [pc, #536]	; (8001084 <config_pin+0xd1c>)
 8000e6c:	68ba      	ldr	r2, [r7, #8]
 8000e6e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); 	//1 in 2nd position
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	4980      	ldr	r1, [pc, #512]	; (8001084 <config_pin+0xd1c>)
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e8a:	3201      	adds	r2, #1
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e92:	431a      	orrs	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e9c:	4979      	ldr	r1, [pc, #484]	; (8001084 <config_pin+0xd1c>)
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ea4:	3202      	adds	r2, #2
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8000eac:	43d2      	mvns	r2, r2
 8000eae:	401a      	ands	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eb8:	4972      	ldr	r1, [pc, #456]	; (8001084 <config_pin+0xd1c>)
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ec0:	3203      	adds	r2, #3
 8000ec2:	2101      	movs	r1, #1
 8000ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec8:	43d2      	mvns	r2, r2
 8000eca:	401a      	ands	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000ed0:	e289      	b.n	80013e6 <config_pin+0x107e>

				case (AF4):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed6:	496b      	ldr	r1, [pc, #428]	; (8001084 <config_pin+0xd1c>)
 8000ed8:	68ba      	ldr	r2, [r7, #8]
 8000eda:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ede:	2101      	movs	r1, #1
 8000ee0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ee4:	43d2      	mvns	r2, r2
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	4964      	ldr	r1, [pc, #400]	; (8001084 <config_pin+0xd1c>)
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000ef8:	3201      	adds	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	43d2      	mvns	r2, r2
 8000f02:	401a      	ands	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f0c:	495d      	ldr	r1, [pc, #372]	; (8001084 <config_pin+0xd1c>)
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f14:	3202      	adds	r2, #2
 8000f16:	2101      	movs	r1, #1
 8000f18:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1c:	431a      	orrs	r2, r3
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f26:	4957      	ldr	r1, [pc, #348]	; (8001084 <config_pin+0xd1c>)
 8000f28:	68ba      	ldr	r2, [r7, #8]
 8000f2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f2e:	3203      	adds	r2, #3
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	43d2      	mvns	r2, r2
 8000f38:	401a      	ands	r2, r3
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000f3e:	e252      	b.n	80013e6 <config_pin+0x107e>

				case (AF5):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	494f      	ldr	r1, [pc, #316]	; (8001084 <config_pin+0xd1c>)
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	431a      	orrs	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	4949      	ldr	r1, [pc, #292]	; (8001084 <config_pin+0xd1c>)
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f64:	3201      	adds	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	fa01 f202 	lsl.w	r2, r1, r2
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	401a      	ands	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f78:	4942      	ldr	r1, [pc, #264]	; (8001084 <config_pin+0xd1c>)
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f80:	3202      	adds	r2, #2
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f202 	lsl.w	r2, r1, r2
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	493c      	ldr	r1, [pc, #240]	; (8001084 <config_pin+0xd1c>)
 8000f94:	68ba      	ldr	r2, [r7, #8]
 8000f96:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000f9a:	3203      	adds	r2, #3
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000fa2:	43d2      	mvns	r2, r2
 8000fa4:	401a      	ands	r2, r3
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8000faa:	e21c      	b.n	80013e6 <config_pin+0x107e>

				case (AF6):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb0:	4934      	ldr	r1, [pc, #208]	; (8001084 <config_pin+0xd1c>)
 8000fb2:	68ba      	ldr	r2, [r7, #8]
 8000fb4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	43d2      	mvns	r2, r2
 8000fc0:	401a      	ands	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	492e      	ldr	r1, [pc, #184]	; (8001084 <config_pin+0xd1c>)
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fd2:	3201      	adds	r2, #1
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fda:	431a      	orrs	r2, r3
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe4:	4927      	ldr	r1, [pc, #156]	; (8001084 <config_pin+0xd1c>)
 8000fe6:	68ba      	ldr	r2, [r7, #8]
 8000fe8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000fec:	3202      	adds	r2, #2
 8000fee:	2101      	movs	r1, #1
 8000ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	4921      	ldr	r1, [pc, #132]	; (8001084 <config_pin+0xd1c>)
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001006:	3203      	adds	r2, #3
 8001008:	2101      	movs	r1, #1
 800100a:	fa01 f202 	lsl.w	r2, r1, r2
 800100e:	43d2      	mvns	r2, r2
 8001010:	401a      	ands	r2, r3
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001016:	e1e6      	b.n	80013e6 <config_pin+0x107e>

				case (AF7):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800101c:	4919      	ldr	r1, [pc, #100]	; (8001084 <config_pin+0xd1c>)
 800101e:	68ba      	ldr	r2, [r7, #8]
 8001020:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001024:	2101      	movs	r1, #1
 8001026:	fa01 f202 	lsl.w	r2, r1, r2
 800102a:	431a      	orrs	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	4913      	ldr	r1, [pc, #76]	; (8001084 <config_pin+0xd1c>)
 8001036:	68ba      	ldr	r2, [r7, #8]
 8001038:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800103c:	3201      	adds	r2, #1
 800103e:	2101      	movs	r1, #1
 8001040:	fa01 f202 	lsl.w	r2, r1, r2
 8001044:	431a      	orrs	r2, r3
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104e:	490d      	ldr	r1, [pc, #52]	; (8001084 <config_pin+0xd1c>)
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001056:	3202      	adds	r2, #2
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	431a      	orrs	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+3)); //0 in 4th position
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001068:	4906      	ldr	r1, [pc, #24]	; (8001084 <config_pin+0xd1c>)
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001070:	3203      	adds	r2, #3
 8001072:	2101      	movs	r1, #1
 8001074:	fa01 f202 	lsl.w	r2, r1, r2
 8001078:	43d2      	mvns	r2, r2
 800107a:	401a      	ands	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001080:	e1b1      	b.n	80013e6 <config_pin+0x107e>
 8001082:	bf00      	nop
 8001084:	20000040 	.word	0x20000040

				case (AF8):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	49a0      	ldr	r1, [pc, #640]	; (8001310 <config_pin+0xfa8>)
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001094:	2101      	movs	r1, #1
 8001096:	fa01 f202 	lsl.w	r2, r1, r2
 800109a:	43d2      	mvns	r2, r2
 800109c:	401a      	ands	r2, r3
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a6:	499a      	ldr	r1, [pc, #616]	; (8001310 <config_pin+0xfa8>)
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010ae:	3201      	adds	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	fa01 f202 	lsl.w	r2, r1, r2
 80010b6:	43d2      	mvns	r2, r2
 80010b8:	401a      	ands	r2, r3
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	4993      	ldr	r1, [pc, #588]	; (8001310 <config_pin+0xfa8>)
 80010c4:	68ba      	ldr	r2, [r7, #8]
 80010c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010ca:	3202      	adds	r2, #2
 80010cc:	2101      	movs	r1, #1
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	43d2      	mvns	r2, r2
 80010d4:	401a      	ands	r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	498c      	ldr	r1, [pc, #560]	; (8001310 <config_pin+0xfa8>)
 80010e0:	68ba      	ldr	r2, [r7, #8]
 80010e2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80010e6:	3203      	adds	r2, #3
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	431a      	orrs	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80010f4:	e177      	b.n	80013e6 <config_pin+0x107e>

				case (AF9):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010fa:	4985      	ldr	r1, [pc, #532]	; (8001310 <config_pin+0xfa8>)
 80010fc:	68ba      	ldr	r2, [r7, #8]
 80010fe:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001102:	2101      	movs	r1, #1
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	431a      	orrs	r2, r3
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001112:	497f      	ldr	r1, [pc, #508]	; (8001310 <config_pin+0xfa8>)
 8001114:	68ba      	ldr	r2, [r7, #8]
 8001116:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800111a:	3201      	adds	r2, #1
 800111c:	2101      	movs	r1, #1
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	43d2      	mvns	r2, r2
 8001124:	401a      	ands	r2, r3
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112e:	4978      	ldr	r1, [pc, #480]	; (8001310 <config_pin+0xfa8>)
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001136:	3202      	adds	r2, #2
 8001138:	2101      	movs	r1, #1
 800113a:	fa01 f202 	lsl.w	r2, r1, r2
 800113e:	43d2      	mvns	r2, r2
 8001140:	401a      	ands	r2, r3
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	4971      	ldr	r1, [pc, #452]	; (8001310 <config_pin+0xfa8>)
 800114c:	68ba      	ldr	r2, [r7, #8]
 800114e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001152:	3203      	adds	r2, #3
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	431a      	orrs	r2, r3
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001160:	e141      	b.n	80013e6 <config_pin+0x107e>

				case (AF10):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001166:	496a      	ldr	r1, [pc, #424]	; (8001310 <config_pin+0xfa8>)
 8001168:	68ba      	ldr	r2, [r7, #8]
 800116a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	43d2      	mvns	r2, r2
 8001176:	401a      	ands	r2, r3
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001180:	4963      	ldr	r1, [pc, #396]	; (8001310 <config_pin+0xfa8>)
 8001182:	68ba      	ldr	r2, [r7, #8]
 8001184:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001188:	3201      	adds	r2, #1
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	431a      	orrs	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	495d      	ldr	r1, [pc, #372]	; (8001310 <config_pin+0xfa8>)
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011a2:	3202      	adds	r2, #2
 80011a4:	2101      	movs	r1, #1
 80011a6:	fa01 f202 	lsl.w	r2, r1, r2
 80011aa:	43d2      	mvns	r2, r2
 80011ac:	401a      	ands	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	4956      	ldr	r1, [pc, #344]	; (8001310 <config_pin+0xfa8>)
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011be:	3203      	adds	r2, #3
 80011c0:	2101      	movs	r1, #1
 80011c2:	fa01 f202 	lsl.w	r2, r1, r2
 80011c6:	431a      	orrs	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80011cc:	e10b      	b.n	80013e6 <config_pin+0x107e>

				case (AF11):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d2:	494f      	ldr	r1, [pc, #316]	; (8001310 <config_pin+0xfa8>)
 80011d4:	68ba      	ldr	r2, [r7, #8]
 80011d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011da:	2101      	movs	r1, #1
 80011dc:	fa01 f202 	lsl.w	r2, r1, r2
 80011e0:	431a      	orrs	r2, r3
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	4949      	ldr	r1, [pc, #292]	; (8001310 <config_pin+0xfa8>)
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80011f2:	3201      	adds	r2, #1
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f202 	lsl.w	r2, r1, r2
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+2)); // 0 in 3rd position
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001204:	4942      	ldr	r1, [pc, #264]	; (8001310 <config_pin+0xfa8>)
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800120c:	3202      	adds	r2, #2
 800120e:	2101      	movs	r1, #1
 8001210:	fa01 f202 	lsl.w	r2, r1, r2
 8001214:	43d2      	mvns	r2, r2
 8001216:	401a      	ands	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001220:	493b      	ldr	r1, [pc, #236]	; (8001310 <config_pin+0xfa8>)
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001228:	3203      	adds	r2, #3
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	431a      	orrs	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 8001236:	e0d6      	b.n	80013e6 <config_pin+0x107e>

				case (AF12):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800123c:	4934      	ldr	r1, [pc, #208]	; (8001310 <config_pin+0xfa8>)
 800123e:	68ba      	ldr	r2, [r7, #8]
 8001240:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	43d2      	mvns	r2, r2
 800124c:	401a      	ands	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001256:	492e      	ldr	r1, [pc, #184]	; (8001310 <config_pin+0xfa8>)
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800125e:	3201      	adds	r2, #1
 8001260:	2101      	movs	r1, #1
 8001262:	fa01 f202 	lsl.w	r2, r1, r2
 8001266:	43d2      	mvns	r2, r2
 8001268:	401a      	ands	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	4927      	ldr	r1, [pc, #156]	; (8001310 <config_pin+0xfa8>)
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800127a:	3202      	adds	r2, #2
 800127c:	2101      	movs	r1, #1
 800127e:	fa01 f202 	lsl.w	r2, r1, r2
 8001282:	431a      	orrs	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128c:	4920      	ldr	r1, [pc, #128]	; (8001310 <config_pin+0xfa8>)
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001294:	3203      	adds	r2, #3
 8001296:	2101      	movs	r1, #1
 8001298:	fa01 f202 	lsl.w	r2, r1, r2
 800129c:	431a      	orrs	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80012a2:	e0a0      	b.n	80013e6 <config_pin+0x107e>

				case (AF13):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a8:	4919      	ldr	r1, [pc, #100]	; (8001310 <config_pin+0xfa8>)
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	431a      	orrs	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] &= ~(1<<(alt_PINPOS[pinNumber]+1)); // 0 in 2nd position
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c0:	4913      	ldr	r1, [pc, #76]	; (8001310 <config_pin+0xfa8>)
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012c8:	3201      	adds	r2, #1
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	490c      	ldr	r1, [pc, #48]	; (8001310 <config_pin+0xfa8>)
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012e4:	3202      	adds	r2, #2
 80012e6:	2101      	movs	r1, #1
 80012e8:	fa01 f202 	lsl.w	r2, r1, r2
 80012ec:	431a      	orrs	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f6:	4906      	ldr	r1, [pc, #24]	; (8001310 <config_pin+0xfa8>)
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80012fe:	3203      	adds	r2, #3
 8001300:	2101      	movs	r1, #1
 8001302:	fa01 f202 	lsl.w	r2, r1, r2
 8001306:	431a      	orrs	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800130c:	e06b      	b.n	80013e6 <config_pin+0x107e>
 800130e:	bf00      	nop
 8001310:	20000040 	.word	0x20000040

				case (AF14):
				port->AFR[1] &= ~(1<<alt_PINPOS[pinNumber]); // 0 in 1st position
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	4936      	ldr	r1, [pc, #216]	; (80013f4 <config_pin+0x108c>)
 800131a:	68ba      	ldr	r2, [r7, #8]
 800131c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001320:	2101      	movs	r1, #1
 8001322:	fa01 f202 	lsl.w	r2, r1, r2
 8001326:	43d2      	mvns	r2, r2
 8001328:	401a      	ands	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001332:	4930      	ldr	r1, [pc, #192]	; (80013f4 <config_pin+0x108c>)
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800133a:	3201      	adds	r2, #1
 800133c:	2101      	movs	r1, #1
 800133e:	fa01 f202 	lsl.w	r2, r1, r2
 8001342:	431a      	orrs	r2, r3
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	4929      	ldr	r1, [pc, #164]	; (80013f4 <config_pin+0x108c>)
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8001354:	3202      	adds	r2, #2
 8001356:	2101      	movs	r1, #1
 8001358:	fa01 f202 	lsl.w	r2, r1, r2
 800135c:	431a      	orrs	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001366:	4923      	ldr	r1, [pc, #140]	; (80013f4 <config_pin+0x108c>)
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800136e:	3203      	adds	r2, #3
 8001370:	2101      	movs	r1, #1
 8001372:	fa01 f202 	lsl.w	r2, r1, r2
 8001376:	431a      	orrs	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 800137c:	e033      	b.n	80013e6 <config_pin+0x107e>


				case (AF15):
				port->AFR[1] |= (1<<alt_PINPOS[pinNumber]); 	//1 in 1st position
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	491c      	ldr	r1, [pc, #112]	; (80013f4 <config_pin+0x108c>)
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	431a      	orrs	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+1)); //1 in 2nd position
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	4916      	ldr	r1, [pc, #88]	; (80013f4 <config_pin+0x108c>)
 800139c:	68ba      	ldr	r2, [r7, #8]
 800139e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013a2:	3201      	adds	r2, #1
 80013a4:	2101      	movs	r1, #1
 80013a6:	fa01 f202 	lsl.w	r2, r1, r2
 80013aa:	431a      	orrs	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+2)); //1 in 3rd position
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b4:	490f      	ldr	r1, [pc, #60]	; (80013f4 <config_pin+0x108c>)
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013bc:	3202      	adds	r2, #2
 80013be:	2101      	movs	r1, #1
 80013c0:	fa01 f202 	lsl.w	r2, r1, r2
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	625a      	str	r2, [r3, #36]	; 0x24
				port->AFR[1] |= (1<<(alt_PINPOS[pinNumber]+3)); //1 in 4th position
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	4909      	ldr	r1, [pc, #36]	; (80013f4 <config_pin+0x108c>)
 80013d0:	68ba      	ldr	r2, [r7, #8]
 80013d2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80013d6:	3203      	adds	r2, #3
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	431a      	orrs	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
				break;
 80013e4:	bf00      	nop
				}
		}


	}
}
 80013e6:	bf00      	nop
 80013e8:	3714      	adds	r7, #20
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	20000040 	.word	0x20000040

080013f8 <gpio_port_config>:
 * @param numPins : The number of GPIO pins you want to configure.
 * @retval None
 * @example : gpio_port_config(myGPIO,(int []) {1, 2, 3, 5},4);
 */
void gpio_port_config(GPIO_TYPE gpio_type, int myPins[], int numPins)
{
 80013f8:	b084      	sub	sp, #16
 80013fa:	b5b0      	push	{r4, r5, r7, lr}
 80013fc:	b084      	sub	sp, #16
 80013fe:	af02      	add	r7, sp, #8
 8001400:	f107 0418 	add.w	r4, r7, #24
 8001404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	if(gpio_type.port==PORTA)
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	4a25      	ldr	r2, [pc, #148]	; (80014a0 <gpio_port_config+0xa8>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d105      	bne.n	800141c <gpio_port_config+0x24>
			GPIO_CLOCK_ENABLE_PORTA;
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <gpio_port_config+0xac>)
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <gpio_port_config+0xac>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTB)
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <gpio_port_config+0xb0>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d105      	bne.n	8001430 <gpio_port_config+0x38>
				GPIO_CLOCK_ENABLE_PORTB;
 8001424:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <gpio_port_config+0xac>)
 8001426:	4b1f      	ldr	r3, [pc, #124]	; (80014a4 <gpio_port_config+0xac>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTC)
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <gpio_port_config+0xb4>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d105      	bne.n	8001444 <gpio_port_config+0x4c>
				GPIO_CLOCK_ENABLE_PORTC;
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <gpio_port_config+0xac>)
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <gpio_port_config+0xac>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f043 0304 	orr.w	r3, r3, #4
 8001442:	6313      	str	r3, [r2, #48]	; 0x30
		if(gpio_type.port==PORTD)
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4a1a      	ldr	r2, [pc, #104]	; (80014b0 <gpio_port_config+0xb8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d105      	bne.n	8001458 <gpio_port_config+0x60>
				GPIO_CLOCK_ENABLE_PORTD;
 800144c:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <gpio_port_config+0xac>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <gpio_port_config+0xac>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f043 0308 	orr.w	r3, r3, #8
 8001456:	6313      	str	r3, [r2, #48]	; 0x30


	for (int i = 0; i<numPins; i++)
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	e015      	b.n	800148a <gpio_port_config+0x92>
	{
			gpio_type.pin= myPins[i];
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001464:	4413      	add	r3, r2
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61fb      	str	r3, [r7, #28]
		config_pin(gpio_type.port,gpio_type.pin,gpio_type.speed,gpio_type.mode, gpio_type.mode_type,gpio_type.alt_func);
 800146a:	69b8      	ldr	r0, [r7, #24]
 800146c:	69f9      	ldr	r1, [r7, #28]
 800146e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001470:	6a3d      	ldr	r5, [r7, #32]
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	b29b      	uxth	r3, r3
 8001476:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001478:	9201      	str	r2, [sp, #4]
 800147a:	9300      	str	r3, [sp, #0]
 800147c:	462b      	mov	r3, r5
 800147e:	4622      	mov	r2, r4
 8001480:	f7fe ff72 	bl	8000368 <config_pin>
	for (int i = 0; i<numPins; i++)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3301      	adds	r3, #1
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800148e:	429a      	cmp	r2, r3
 8001490:	dbe5      	blt.n	800145e <gpio_port_config+0x66>

	}


}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800149c:	b004      	add	sp, #16
 800149e:	4770      	bx	lr
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40020400 	.word	0x40020400
 80014ac:	40020800 	.word	0x40020800
 80014b0:	40020c00 	.word	0x40020c00

080014b4 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80014be:	4909      	ldr	r1, [pc, #36]	; (80014e4 <NVIC_EnableIRQ+0x30>)
 80014c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c4:	095b      	lsrs	r3, r3, #5
 80014c6:	79fa      	ldrb	r2, [r7, #7]
 80014c8:	f002 021f 	and.w	r2, r2, #31
 80014cc:	2001      	movs	r0, #1
 80014ce:	fa00 f202 	lsl.w	r2, r0, r2
 80014d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000e100 	.word	0xe000e100

080014e8 <I2C_enable>:

#include "I2C_Library.h"


void I2C_enable()
{
 80014e8:	b590      	push	{r4, r7, lr}
 80014ea:	b093      	sub	sp, #76	; 0x4c
 80014ec:	af06      	add	r7, sp, #24
	// I2C will not work unless the config_clock_50MHz(); is used before enabling I2C.
	int SCL = 6;
 80014ee:	2306      	movs	r3, #6
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int SDA = 7;
 80014f2:	2307      	movs	r3, #7
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28

	// PORTB alternate mode setup pin 6 and 7
	GPIO_TYPE myI2C;
	myI2C.port = PORTB;
 80014f6:	4b25      	ldr	r3, [pc, #148]	; (800158c <I2C_enable+0xa4>)
 80014f8:	607b      	str	r3, [r7, #4]
	myI2C.mode = ALT_MODE;
 80014fa:	2302      	movs	r3, #2
 80014fc:	60fb      	str	r3, [r7, #12]

	myI2C.speed = SPEED_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	61bb      	str	r3, [r7, #24]
	myI2C.alt_func = AF4;
 8001502:	2304      	movs	r3, #4
 8001504:	61fb      	str	r3, [r7, #28]
	gpio_port_config(myI2C,(int []) {SCL,SDA},2);
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	623b      	str	r3, [r7, #32]
 800150a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
 800150e:	2302      	movs	r3, #2
 8001510:	9304      	str	r3, [sp, #16]
 8001512:	f107 0320 	add.w	r3, r7, #32
 8001516:	9303      	str	r3, [sp, #12]
 8001518:	466c      	mov	r4, sp
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800152a:	f7ff ff65 	bl	80013f8 <gpio_port_config>

	// Enabling clock for I2C
	RCC->APB1ENR |=RCC_APB1ENR_I2C1EN;
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <I2C_enable+0xa8>)
 8001530:	4b17      	ldr	r3, [pc, #92]	; (8001590 <I2C_enable+0xa8>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40


	// The APB clock frequency is 50 MHz.
	I2C1->CR2 |= 0b110010;
 800153a:	4a16      	ldr	r2, [pc, #88]	; (8001594 <I2C_enable+0xac>)
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <I2C_enable+0xac>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f043 0332 	orr.w	r3, r3, #50	; 0x32
 8001544:	6053      	str	r3, [r2, #4]
	// Standard I2C master mode
	I2C1->CCR &= ~I2C_CCR_FS;
 8001546:	4a13      	ldr	r2, [pc, #76]	; (8001594 <I2C_enable+0xac>)
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <I2C_enable+0xac>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001550:	61d3      	str	r3, [r2, #28]
	// Clock control register as 100 kHZ for an APB frequency of 50 MHz.
	// (2*100khz)^-1 = RCC*(1/50Mhz)
	I2C1->CCR |= 250;
 8001552:	4a10      	ldr	r2, [pc, #64]	; (8001594 <I2C_enable+0xac>)
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <I2C_enable+0xac>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f043 03fa 	orr.w	r3, r3, #250	; 0xfa
 800155c:	61d3      	str	r3, [r2, #28]
	// Maximum rise time. In standard mode, the maximum SCL rise time is 1000ns. We have 50MHz apb freq
	// which is 20ns. 1000/20 +1 = 51
	I2C1->TRISE |= 51;
 800155e:	4a0d      	ldr	r2, [pc, #52]	; (8001594 <I2C_enable+0xac>)
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <I2C_enable+0xac>)
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	f043 0333 	orr.w	r3, r3, #51	; 0x33
 8001568:	6213      	str	r3, [r2, #32]

	// Peripheral Enable
	I2C1->CR1 |= I2C_CR1_PE;
 800156a:	4a0a      	ldr	r2, [pc, #40]	; (8001594 <I2C_enable+0xac>)
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <I2C_enable+0xac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f043 0301 	orr.w	r3, r3, #1
 8001574:	6013      	str	r3, [r2, #0]

	/* Interrupt Enabled for the I2C1 Error event */
	I2C1->CR2 = I2C_CR2_ITERREN;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <I2C_enable+0xac>)
 8001578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800157c:	605a      	str	r2, [r3, #4]
	NVIC_EnableIRQ(I2C1_ER_IRQn);
 800157e:	2020      	movs	r0, #32
 8001580:	f7ff ff98 	bl	80014b4 <NVIC_EnableIRQ>


}
 8001584:	bf00      	nop
 8001586:	3734      	adds	r7, #52	; 0x34
 8001588:	46bd      	mov	sp, r7
 800158a:	bd90      	pop	{r4, r7, pc}
 800158c:	40020400 	.word	0x40020400
 8001590:	40023800 	.word	0x40023800
 8001594:	40005400 	.word	0x40005400

08001598 <I2C1_ER_IRQHandler>:
/* Interrupt Service Routine for I2C1 Error event*/
void I2C1_ER_IRQHandler()
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
	I2C1->SR1 &= ~I2C_SR1_AF;
 800159c:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <I2C1_ER_IRQHandler+0x28>)
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <I2C1_ER_IRQHandler+0x28>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015a6:	6153      	str	r3, [r2, #20]
	I2C1->CR1 |= I2C_CR1_STOP;
 80015a8:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <I2C1_ER_IRQHandler+0x28>)
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <I2C1_ER_IRQHandler+0x28>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40005400 	.word	0x40005400

080015c4 <I2C_addressWrite>:


void I2C_addressWrite(uint8_t i2c_address)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	71fb      	strb	r3, [r7, #7]

	I2C1->DR = (i2c_address<<1) & 0b11111110; //lsb is 0 (Reset), therefore master is in transmitter mode
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <I2C_addressWrite+0x3c>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	6113      	str	r3, [r2, #16]


	// EV6
	while(!(I2C1->SR1 & I2C_SR1_ADDR)); // Wait for Received Address matched
 80015d8:	bf00      	nop
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <I2C_addressWrite+0x3c>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f9      	beq.n	80015da <I2C_addressWrite+0x16>
	while(!(I2C1->SR2 & I2C_SR2_BUSY));
 80015e6:	bf00      	nop
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <I2C_addressWrite+0x3c>)
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d0f9      	beq.n	80015e8 <I2C_addressWrite+0x24>

}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	40005400 	.word	0x40005400

08001604 <I2C_data>:

void I2C_data(uint8_t i2c_data)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
		I2C1->DR = i2c_data;
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <I2C_data+0x2c>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8001614:	bf00      	nop
 8001616:	4b06      	ldr	r3, [pc, #24]	; (8001630 <I2C_data+0x2c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b00      	cmp	r3, #0
 8001620:	d0f9      	beq.n	8001616 <I2C_data+0x12>

}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400

08001634 <I2C_stop>:

void I2C_stop()
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
	while (!(I2C1->SR1 & I2C_SR1_BTF)); // Byte transfer finished succeeded
 8001638:	bf00      	nop
 800163a:	4b08      	ldr	r3, [pc, #32]	; (800165c <I2C_stop+0x28>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f9      	beq.n	800163a <I2C_stop+0x6>
	I2C1->CR1 |= I2C_CR1_STOP;
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <I2C_stop+0x28>)
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <I2C_stop+0x28>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001650:	6013      	str	r3, [r2, #0]

}
 8001652:	bf00      	nop
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40005400 	.word	0x40005400

08001660 <I2C_start>:


void I2C_start()
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	//while(I2C1->SR2 & I2C_SR2_BUSY);// Unnecessary
	I2C1->CR1 |= I2C_CR1_START;
 8001664:	4a08      	ldr	r2, [pc, #32]	; (8001688 <I2C_start+0x28>)
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <I2C_start+0x28>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]
	while(!(I2C1->SR1 & I2C_SR1_SB)); // keep waiting until the SB bit has been set
 8001670:	bf00      	nop
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <I2C_start+0x28>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f9      	beq.n	8001672 <I2C_start+0x12>
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40005400 	.word	0x40005400

0800168c <NVIC_EnableIRQ>:
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001696:	4909      	ldr	r1, [pc, #36]	; (80016bc <NVIC_EnableIRQ+0x30>)
 8001698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169c:	095b      	lsrs	r3, r3, #5
 800169e:	79fa      	ldrb	r2, [r7, #7]
 80016a0:	f002 021f 	and.w	r2, r2, #31
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <config_clock_50MHz>:
// Volatile means that Ticks can change at any time
// Declaring volatile is needed for global variables changed by interrupted service routines
// https://www.embedded.com/electronics-blogs/beginner-s-corner/4023801/Introduction-to-the-Volatile-Keyword

void config_clock_50MHz(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	/* Enable HSI */
	RCC->CR |= ((uint32_t)RCC_CR_HSION);
 80016c4:	4a4d      	ldr	r2, [pc, #308]	; (80017fc <config_clock_50MHz+0x13c>)
 80016c6:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <config_clock_50MHz+0x13c>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

	/* Wait for HSI to be ready */
	while ((RCC->CR & RCC_CR_HSIRDY) == 0){
 80016d0:	bf00      	nop
 80016d2:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <config_clock_50MHz+0x13c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d0f9      	beq.n	80016d2 <config_clock_50MHz+0x12>
	  // Nop
	}

	/* Set HSI as the System Clock */
	RCC->CFGR = RCC_CFGR_SW_HSI;
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <config_clock_50MHz+0x13c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	609a      	str	r2, [r3, #8]

	/* Wait for HSI to be used for the system clock */
	while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI){
 80016e4:	bf00      	nop
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <config_clock_50MHz+0x13c>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f003 030c 	and.w	r3, r3, #12
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f9      	bne.n	80016e6 <config_clock_50MHz+0x26>
	 // Nop
	}

	// some shit here //
	FLASH->ACR |= FLASH_ACR_PRFTEN;                          // Enable Prefetch Buffer
 80016f2:	4a43      	ldr	r2, [pc, #268]	; (8001800 <config_clock_50MHz+0x140>)
 80016f4:	4b42      	ldr	r3, [pc, #264]	; (8001800 <config_clock_50MHz+0x140>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fc:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY;                         // Flash 1 wait state
 80016fe:	4a40      	ldr	r2, [pc, #256]	; (8001800 <config_clock_50MHz+0x140>)
 8001700:	4b3f      	ldr	r3, [pc, #252]	; (8001800 <config_clock_50MHz+0x140>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f043 030f 	orr.w	r3, r3, #15
 8001708:	6013      	str	r3, [r2, #0]
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;                       // Enable the PWR APB1 Clock
 800170a:	4a3c      	ldr	r2, [pc, #240]	; (80017fc <config_clock_50MHz+0x13c>)
 800170c:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <config_clock_50MHz+0x13c>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001714:	6413      	str	r3, [r2, #64]	; 0x40
	PWR->CR = PWR_CR_VOS_0;                                  // Select the Voltage Range 1 (1.8V)
 8001716:	4b3b      	ldr	r3, [pc, #236]	; (8001804 <config_clock_50MHz+0x144>)
 8001718:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800171c:	601a      	str	r2, [r3, #0]
	while((PWR->CSR & PWR_CSR_VOSRDY ) != 0);
 800171e:	bf00      	nop
 8001720:	4b38      	ldr	r3, [pc, #224]	; (8001804 <config_clock_50MHz+0x144>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1f9      	bne.n	8001720 <config_clock_50MHz+0x60>

	/* PLLCLK = (HSI * 4)/2 = 32 MHz */ //NAH
	RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC| RCC_PLLCFGR_PLLM |  RCC_PLLCFGR_PLLN);
 800172c:	4933      	ldr	r1, [pc, #204]	; (80017fc <config_clock_50MHz+0x13c>)
 800172e:	4b33      	ldr	r3, [pc, #204]	; (80017fc <config_clock_50MHz+0x13c>)
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b35      	ldr	r3, [pc, #212]	; (8001808 <config_clock_50MHz+0x148>)
 8001734:	4013      	ands	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= (RCC_PLLCFGR_PLLSRC_HSI|RCC_PLLCFGR_PLLM_4 | (200<<6));
 8001738:	4a30      	ldr	r2, [pc, #192]	; (80017fc <config_clock_50MHz+0x13c>)
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <config_clock_50MHz+0x13c>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f443 5348 	orr.w	r3, r3, #12800	; 0x3200
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6053      	str	r3, [r2, #4]

	/* Peripheral Clock divisors */
	RCC->CFGR &= ~(0xF<<4); // Cleared 4 bits. HPRE[3:0] which are bits 4,5,6,7. This means  that the system clock is not divided
 8001748:	4a2c      	ldr	r2, [pc, #176]	; (80017fc <config_clock_50MHz+0x13c>)
 800174a:	4b2c      	ldr	r3, [pc, #176]	; (80017fc <config_clock_50MHz+0x13c>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001752:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= (0b1000<<4); // AHB system clock now divided by 2.
 8001754:	4a29      	ldr	r2, [pc, #164]	; (80017fc <config_clock_50MHz+0x13c>)
 8001756:	4b29      	ldr	r3, [pc, #164]	; (80017fc <config_clock_50MHz+0x13c>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800175e:	6093      	str	r3, [r2, #8]
	// HCLK is now 50 MHz



	// HCLK = SYSCLK
	RCC->CFGR &= ~(0x7<<10); // cleared 3 bits. PPRE1[2:0] which are bits 10,11,12
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <config_clock_50MHz+0x13c>)
 8001762:	4b26      	ldr	r3, [pc, #152]	; (80017fc <config_clock_50MHz+0x13c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800176a:	6093      	str	r3, [r2, #8]
	//RCC->CFGR |= (0b100<<10); // Set as 101, which means the AHB clock is divided by 2. APB1. 50mhz


	RCC->CFGR &= ~(0x7<<13); // Cleared 3 bits. PPRE2[2:0] which are bits 13,14,15
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <config_clock_50MHz+0x13c>)
 800176e:	4b23      	ldr	r3, [pc, #140]	; (80017fc <config_clock_50MHz+0x13c>)
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001776:	6093      	str	r3, [r2, #8]


	// the commented out apb1 apb2 means not divided.

	/* Enable PLL */
	 RCC->CR &= ~RCC_CR_PLLON;       /* Disable PLL */
 8001778:	4a20      	ldr	r2, [pc, #128]	; (80017fc <config_clock_50MHz+0x13c>)
 800177a:	4b20      	ldr	r3, [pc, #128]	; (80017fc <config_clock_50MHz+0x13c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001782:	6013      	str	r3, [r2, #0]
	 RCC->CR |= RCC_CR_PLLON;        /* Enable PLL     */
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <config_clock_50MHz+0x13c>)
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <config_clock_50MHz+0x13c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

	   /* Wait until the PLL is ready */
	 while((RCC->CR & RCC_CR_PLLRDY) == 0){
 8001790:	bf00      	nop
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <config_clock_50MHz+0x13c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0f9      	beq.n	8001792 <config_clock_50MHz+0xd2>
	       //Nop
	   }

	   /* Select PLL as system Clock */
	 RCC->CFGR &= ~RCC_CFGR_SW;            /* Clear */
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <config_clock_50MHz+0x13c>)
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <config_clock_50MHz+0x13c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 0303 	bic.w	r3, r3, #3
 80017a8:	6093      	str	r3, [r2, #8]
	 RCC->CFGR |=  RCC_CFGR_SW_PLL;    /* Set   */
 80017aa:	4a14      	ldr	r2, [pc, #80]	; (80017fc <config_clock_50MHz+0x13c>)
 80017ac:	4b13      	ldr	r3, [pc, #76]	; (80017fc <config_clock_50MHz+0x13c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f043 0302 	orr.w	r3, r3, #2
 80017b4:	6093      	str	r3, [r2, #8]

	   /* Wait for PLL to become system core clock */
	 while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL){
 80017b6:	bf00      	nop
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <config_clock_50MHz+0x13c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	d1f9      	bne.n	80017b8 <config_clock_50MHz+0xf8>




	//************************* configuring for milisecond delay
	 RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <config_clock_50MHz+0x13c>)
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <config_clock_50MHz+0x13c>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ca:	f043 0304 	orr.w	r3, r3, #4
 80017ce:	6413      	str	r3, [r2, #64]	; 0x40
	 TIM4->PSC = 50;
 80017d0:	4b0e      	ldr	r3, [pc, #56]	; (800180c <config_clock_50MHz+0x14c>)
 80017d2:	2232      	movs	r2, #50	; 0x32
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
	 TIM4->ARR = 1000;
 80017d6:	4b0d      	ldr	r3, [pc, #52]	; (800180c <config_clock_50MHz+0x14c>)
 80017d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
	 TIM4->CR1 &= ~TIM_CR1_DIR; //Up counter. By default, but still good practice
 80017de:	4a0b      	ldr	r2, [pc, #44]	; (800180c <config_clock_50MHz+0x14c>)
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <config_clock_50MHz+0x14c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0310 	bic.w	r3, r3, #16
 80017e8:	6013      	str	r3, [r2, #0]
	 //TIM4->CR1 |= TIM_CR1_URS; // Only up/down counter generates an update interrupt // good practice
	 TIM4->DIER = TIM_DIER_UIE; // Update interrupt enabled
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <config_clock_50MHz+0x14c>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	60da      	str	r2, [r3, #12]
	 NVIC_EnableIRQ(TIM4_IRQn);
 80017f0:	201e      	movs	r0, #30
 80017f2:	f7ff ff4b 	bl	800168c <NVIC_EnableIRQ>

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40023c00 	.word	0x40023c00
 8001804:	40007000 	.word	0x40007000
 8001808:	ffbf8000 	.word	0xffbf8000
 800180c:	40000800 	.word	0x40000800

08001810 <TIM4_IRQHandler>:


void TIM4_IRQHandler()
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

	Ticks++;
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <TIM4_IRQHandler+0x24>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	3301      	adds	r3, #1
 800181a:	4a06      	ldr	r2, [pc, #24]	; (8001834 <TIM4_IRQHandler+0x24>)
 800181c:	6013      	str	r3, [r2, #0]
	TIM4->SR &= ~TIM_SR_UIF; // cleared update interrupt
 800181e:	4a06      	ldr	r2, [pc, #24]	; (8001838 <TIM4_IRQHandler+0x28>)
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <TIM4_IRQHandler+0x28>)
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6113      	str	r3, [r2, #16]

}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	2000009c 	.word	0x2000009c
 8001838:	40000800 	.word	0x40000800

0800183c <delay_mS>:


void delay_mS(uint32_t mS)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
		TIM4->CR1 |= TIM_CR1_CEN;
 8001844:	4a0d      	ldr	r2, [pc, #52]	; (800187c <delay_mS+0x40>)
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <delay_mS+0x40>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6013      	str	r3, [r2, #0]
		Ticks = 0;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <delay_mS+0x44>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]

		while(Ticks<mS);
 8001856:	bf00      	nop
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <delay_mS+0x44>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d3f9      	bcc.n	8001858 <delay_mS+0x1c>

		TIM4->CR1 &= ~TIM_CR1_CEN;
 8001864:	4a05      	ldr	r2, [pc, #20]	; (800187c <delay_mS+0x40>)
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <delay_mS+0x40>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6013      	str	r3, [r2, #0]

}
 8001870:	bf00      	nop
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	40000800 	.word	0x40000800
 8001880:	2000009c 	.word	0x2000009c

08001884 <lcd_i2c_sendCmd>:
 */

#include "lcd_i2c.h"

void lcd_i2c_sendCmd(uint8_t cmd)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	71fb      	strb	r3, [r7, #7]

I2C_start();
 800188e:	f7ff fee7 	bl	8001660 <I2C_start>
I2C_addressWrite(0x27); //hard coded address for testing purposes
 8001892:	2027      	movs	r0, #39	; 0x27
 8001894:	f7ff fe96 	bl	80015c4 <I2C_addressWrite>
// upper nibble
I2C_data((cmd&0xF0)|0b1100); //0x0C  is 1 1 0 0. i.e. enable 1
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	f023 030f 	bic.w	r3, r3, #15
 80018a0:	b25b      	sxtb	r3, r3
 80018a2:	f043 030c 	orr.w	r3, r3, #12
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff feaa 	bl	8001604 <I2C_data>
I2C_data((cmd&0xF0)|0b1000); //0x08  is 1 0 0 0 i.e. enable 0
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	f023 030f 	bic.w	r3, r3, #15
 80018b8:	b25b      	sxtb	r3, r3
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fe9e 	bl	8001604 <I2C_data>
// lower nibble
I2C_data(((cmd<<4)&0xF0)|0b1100);
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	b25b      	sxtb	r3, r3
 80018ce:	f043 030c 	orr.w	r3, r3, #12
 80018d2:	b25b      	sxtb	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fe94 	bl	8001604 <I2C_data>
I2C_data(((cmd<<4)&0xF0)|0b1000);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	b25b      	sxtb	r3, r3
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	b25b      	sxtb	r3, r3
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fe8a 	bl	8001604 <I2C_data>
I2C_stop();
 80018f0:	f7ff fea0 	bl	8001634 <I2C_stop>

}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <lcd_i2c_sendData>:


void lcd_i2c_sendData(char data)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]

I2C_start();
 8001906:	f7ff feab 	bl	8001660 <I2C_start>
I2C_addressWrite(0x27); //hard coded for testing purposes
 800190a:	2027      	movs	r0, #39	; 0x27
 800190c:	f7ff fe5a 	bl	80015c4 <I2C_addressWrite>
//									       EN RW RS    P3 is the backlight. P3 =1, backlight is on
// upper nibble				  //		P3 P2 P1 P0
I2C_data((data&0xF0)|0b1101); //0x0C is  1  1  0  0. i.e. enable 1 RS=1
 8001910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001914:	f023 030f 	bic.w	r3, r3, #15
 8001918:	b25b      	sxtb	r3, r3
 800191a:	f043 030d 	orr.w	r3, r3, #13
 800191e:	b25b      	sxtb	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff fe6e 	bl	8001604 <I2C_data>
I2C_data((data&0xF0)|0b1001); //0x08  is 1 0 0 0 i.e. enable 0 RS=1
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	f023 030f 	bic.w	r3, r3, #15
 8001930:	b25b      	sxtb	r3, r3
 8001932:	f043 0309 	orr.w	r3, r3, #9
 8001936:	b25b      	sxtb	r3, r3
 8001938:	b2db      	uxtb	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fe62 	bl	8001604 <I2C_data>
// lower nibble
I2C_data(((data<<4)&0xF0)|0b1101);
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	b25b      	sxtb	r3, r3
 8001946:	f043 030d 	orr.w	r3, r3, #13
 800194a:	b25b      	sxtb	r3, r3
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff fe58 	bl	8001604 <I2C_data>
I2C_data(((data<<4)&0xF0)|0b1001);
 8001954:	79fb      	ldrb	r3, [r7, #7]
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	b25b      	sxtb	r3, r3
 800195a:	f043 0309 	orr.w	r3, r3, #9
 800195e:	b25b      	sxtb	r3, r3
 8001960:	b2db      	uxtb	r3, r3
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fe4e 	bl	8001604 <I2C_data>
I2C_stop();
 8001968:	f7ff fe64 	bl	8001634 <I2C_stop>

}
 800196c:	bf00      	nop
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}

08001974 <lcd_i2c_print>:


void lcd_i2c_print(char string[]) //  doing char myArray = "hello" creates an array of characters
// char *string is equivalent to string[]
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	int length = strlen(string); // We are passing the array to find the length of the string. Remember string[0] will return first  element and so on ...
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7fe fc2b 	bl	80001d8 <strlen>
 8001982:	4603      	mov	r3, r0
 8001984:	60bb      	str	r3, [r7, #8]

	for (int i =0; i<length; i++)
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	e009      	b.n	80019a0 <lcd_i2c_print+0x2c>
	{
		lcd_i2c_sendData(string[i]); //
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffb1 	bl	80018fc <lcd_i2c_sendData>
	for (int i =0; i<length; i++)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3301      	adds	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fa      	ldr	r2, [r7, #12]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <lcd_i2c_print+0x18>
	}


}
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <lcd_i2c_init>:

void lcd_i2c_init()
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
	lcd_i2c_sendCmd(0x33);
 80019b4:	2033      	movs	r0, #51	; 0x33
 80019b6:	f7ff ff65 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(5);
 80019ba:	2005      	movs	r0, #5
 80019bc:	f7ff ff3e 	bl	800183c <delay_mS>
	lcd_i2c_sendCmd(0x32);
 80019c0:	2032      	movs	r0, #50	; 0x32
 80019c2:	f7ff ff5f 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(5);
 80019c6:	2005      	movs	r0, #5
 80019c8:	f7ff ff38 	bl	800183c <delay_mS>
	lcd_i2c_sendCmd(0x28);
 80019cc:	2028      	movs	r0, #40	; 0x28
 80019ce:	f7ff ff59 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(5);
 80019d2:	2005      	movs	r0, #5
 80019d4:	f7ff ff32 	bl	800183c <delay_mS>
	lcd_i2c_sendCmd(0x0E);
 80019d8:	200e      	movs	r0, #14
 80019da:	f7ff ff53 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(5);
 80019de:	2005      	movs	r0, #5
 80019e0:	f7ff ff2c 	bl	800183c <delay_mS>
	lcd_i2c_sendCmd(0x01);
 80019e4:	2001      	movs	r0, #1
 80019e6:	f7ff ff4d 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(5);
 80019ea:	2005      	movs	r0, #5
 80019ec:	f7ff ff26 	bl	800183c <delay_mS>
	lcd_i2c_sendCmd(0x80);
 80019f0:	2080      	movs	r0, #128	; 0x80
 80019f2:	f7ff ff47 	bl	8001884 <lcd_i2c_sendCmd>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <lcd_i2c_clear>:

void lcd_i2c_clear()
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
	lcd_i2c_sendCmd(0x01);
 80019fe:	2001      	movs	r0, #1
 8001a00:	f7ff ff40 	bl	8001884 <lcd_i2c_sendCmd>
	delay_mS(10); // Added delay because some LCD commands would not work
 8001a04:	200a      	movs	r0, #10
 8001a06:	f7ff ff19 	bl	800183c <delay_mS>
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
	...

08001a10 <__libc_init_array>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	4e0d      	ldr	r6, [pc, #52]	; (8001a48 <__libc_init_array+0x38>)
 8001a14:	4c0d      	ldr	r4, [pc, #52]	; (8001a4c <__libc_init_array+0x3c>)
 8001a16:	1ba4      	subs	r4, r4, r6
 8001a18:	10a4      	asrs	r4, r4, #2
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	42a5      	cmp	r5, r4
 8001a1e:	d109      	bne.n	8001a34 <__libc_init_array+0x24>
 8001a20:	4e0b      	ldr	r6, [pc, #44]	; (8001a50 <__libc_init_array+0x40>)
 8001a22:	4c0c      	ldr	r4, [pc, #48]	; (8001a54 <__libc_init_array+0x44>)
 8001a24:	f000 f872 	bl	8001b0c <_init>
 8001a28:	1ba4      	subs	r4, r4, r6
 8001a2a:	10a4      	asrs	r4, r4, #2
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	42a5      	cmp	r5, r4
 8001a30:	d105      	bne.n	8001a3e <__libc_init_array+0x2e>
 8001a32:	bd70      	pop	{r4, r5, r6, pc}
 8001a34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a38:	4798      	blx	r3
 8001a3a:	3501      	adds	r5, #1
 8001a3c:	e7ee      	b.n	8001a1c <__libc_init_array+0xc>
 8001a3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a42:	4798      	blx	r3
 8001a44:	3501      	adds	r5, #1
 8001a46:	e7f2      	b.n	8001a2e <__libc_init_array+0x1e>
 8001a48:	08001b4c 	.word	0x08001b4c
 8001a4c:	08001b4c 	.word	0x08001b4c
 8001a50:	08001b4c 	.word	0x08001b4c
 8001a54:	08001b50 	.word	0x08001b50

08001a58 <__itoa>:
 8001a58:	1e93      	subs	r3, r2, #2
 8001a5a:	2b22      	cmp	r3, #34	; 0x22
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	460c      	mov	r4, r1
 8001a60:	d904      	bls.n	8001a6c <__itoa+0x14>
 8001a62:	2300      	movs	r3, #0
 8001a64:	700b      	strb	r3, [r1, #0]
 8001a66:	461c      	mov	r4, r3
 8001a68:	4620      	mov	r0, r4
 8001a6a:	bd10      	pop	{r4, pc}
 8001a6c:	2a0a      	cmp	r2, #10
 8001a6e:	d109      	bne.n	8001a84 <__itoa+0x2c>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	da07      	bge.n	8001a84 <__itoa+0x2c>
 8001a74:	232d      	movs	r3, #45	; 0x2d
 8001a76:	700b      	strb	r3, [r1, #0]
 8001a78:	4240      	negs	r0, r0
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	4421      	add	r1, r4
 8001a7e:	f000 f805 	bl	8001a8c <__utoa>
 8001a82:	e7f1      	b.n	8001a68 <__itoa+0x10>
 8001a84:	2100      	movs	r1, #0
 8001a86:	e7f9      	b.n	8001a7c <__itoa+0x24>

08001a88 <itoa>:
 8001a88:	f7ff bfe6 	b.w	8001a58 <__itoa>

08001a8c <__utoa>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	4c1e      	ldr	r4, [pc, #120]	; (8001b08 <__utoa+0x7c>)
 8001a90:	b08b      	sub	sp, #44	; 0x2c
 8001a92:	4603      	mov	r3, r0
 8001a94:	460f      	mov	r7, r1
 8001a96:	466d      	mov	r5, sp
 8001a98:	f104 0e20 	add.w	lr, r4, #32
 8001a9c:	6820      	ldr	r0, [r4, #0]
 8001a9e:	6861      	ldr	r1, [r4, #4]
 8001aa0:	462e      	mov	r6, r5
 8001aa2:	c603      	stmia	r6!, {r0, r1}
 8001aa4:	3408      	adds	r4, #8
 8001aa6:	4574      	cmp	r4, lr
 8001aa8:	4635      	mov	r5, r6
 8001aaa:	d1f7      	bne.n	8001a9c <__utoa+0x10>
 8001aac:	7921      	ldrb	r1, [r4, #4]
 8001aae:	7131      	strb	r1, [r6, #4]
 8001ab0:	1e91      	subs	r1, r2, #2
 8001ab2:	6820      	ldr	r0, [r4, #0]
 8001ab4:	6030      	str	r0, [r6, #0]
 8001ab6:	2922      	cmp	r1, #34	; 0x22
 8001ab8:	f04f 0100 	mov.w	r1, #0
 8001abc:	d904      	bls.n	8001ac8 <__utoa+0x3c>
 8001abe:	7039      	strb	r1, [r7, #0]
 8001ac0:	460f      	mov	r7, r1
 8001ac2:	4638      	mov	r0, r7
 8001ac4:	b00b      	add	sp, #44	; 0x2c
 8001ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ac8:	1e78      	subs	r0, r7, #1
 8001aca:	4606      	mov	r6, r0
 8001acc:	fbb3 f5f2 	udiv	r5, r3, r2
 8001ad0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8001ad4:	fb02 3315 	mls	r3, r2, r5, r3
 8001ad8:	4473      	add	r3, lr
 8001ada:	1c4c      	adds	r4, r1, #1
 8001adc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001ae0:	f806 3f01 	strb.w	r3, [r6, #1]!
 8001ae4:	462b      	mov	r3, r5
 8001ae6:	b965      	cbnz	r5, 8001b02 <__utoa+0x76>
 8001ae8:	553d      	strb	r5, [r7, r4]
 8001aea:	187a      	adds	r2, r7, r1
 8001aec:	1acc      	subs	r4, r1, r3
 8001aee:	42a3      	cmp	r3, r4
 8001af0:	dae7      	bge.n	8001ac2 <__utoa+0x36>
 8001af2:	7844      	ldrb	r4, [r0, #1]
 8001af4:	7815      	ldrb	r5, [r2, #0]
 8001af6:	f800 5f01 	strb.w	r5, [r0, #1]!
 8001afa:	3301      	adds	r3, #1
 8001afc:	f802 4901 	strb.w	r4, [r2], #-1
 8001b00:	e7f4      	b.n	8001aec <__utoa+0x60>
 8001b02:	4621      	mov	r1, r4
 8001b04:	e7e2      	b.n	8001acc <__utoa+0x40>
 8001b06:	bf00      	nop
 8001b08:	08001b24 	.word	0x08001b24

08001b0c <_init>:
 8001b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b0e:	bf00      	nop
 8001b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b12:	bc08      	pop	{r3}
 8001b14:	469e      	mov	lr, r3
 8001b16:	4770      	bx	lr

08001b18 <_fini>:
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b1a:	bf00      	nop
 8001b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b1e:	bc08      	pop	{r3}
 8001b20:	469e      	mov	lr, r3
 8001b22:	4770      	bx	lr
